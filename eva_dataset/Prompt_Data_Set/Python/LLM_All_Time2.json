[
    "\"Generate Python code that implements a simple web server that can handle GET and POST requests using the http.server module.\"",
    "\"Write a Python program that uses the os and shutil modules to create a backup of a given directory, including all subdirectories and files.\"",
    "\"Use the pandas library to read a CSV file, filter out rows that meet certain conditions, and then write the filtered data back to a new CSV file.\"",
    "\"Create a Python script that uses the requests and beautifulsoup libraries to scrape data from a website and parse it into a JSON format.\"",
    "\"Implement a command-line interface for a simple todo list app using the argparse module, allowing users to add, remove, and view items in the list.\"",
    "\"Write a Python function that takes a string as input and returns the first 10 characters of the string, using only slicing.\"",
    "\"Use the numpy and matplotlib libraries to plot a line graph of a given set of data, customizing the appearance of the plot as desired.\"",
    "\"Generate Python code that imports the requests library and creates a session object with thread-safe connection pooling, files posting, and other features.\"",
    "\"Generate Python code that imports the AWS SDK for Python and creates an Amazon S3 bucket, an Amazon EC2 instance, and an Amazon RDS database, and sets up user authentication using IAM roles.\"",
    "\"Generate Python code that implements a low-level, data-driven core for interacting with AWS services, similar to boto 3, using Python's built-in HTTP client and JSON encoding to communicate with AWS APIs.\"",
    "\"Generate Python code that imports the necessary modules for Python 2 and 3 compatibility, such as `future` and `backports`, and defines a set of utility functions for working with strings, lists, dictionaries, and other common data structures in a compatible way.\"",
    "\"Generate Python code that uses the `pip` module to download, build, install, upgrade, and uninstall Python packages.\"",
    "\"Generate Python code that allows humans to interact with the web using HTTP, including sending requests, receiving responses, parsing HTML, and making API calls, using intuitive syntax and handling common tasks such as authentication, cookies, and caching.\"",
    "\"Generate Python code that implements Internationalized Domain Names in Applications (IDNA) functionality, allowing for the conversion of domain names containing non-ASCII characters to their ASCII equivalent, including the validation of such domain names against the appropriate IDNA rules.\"",
    "\"Generate Python code that creates an Amazon S3 Transfer Manager using the Boto3 library, allowing you to manage and automate data transfers between your local machine and Amazon S3 buckets.\"",
    "\"Generate Python code that provides additional functionality to the standard Python datetime module, such as support for nanosecond precision, arbitrary precision timestamps, and improved date and time parsing.\"",
    "\"Generate Python code that imports the requests library, makes an HTTP GET request to the Mozilla SSL CA bundle URL, downloads the CA bundle file, and saves it to the system's trusted certificate authority directory.\"",
    "\"Generate Python code that parses and emit YAML documents using the `yaml` module, respectively represented by the `YAMLParser` and `YAMEmitter` classes.\"",
    "\"Generate Python code that imports the `pip` module and uses its functions to install a package from the PyPI repository, such as `pip install requests`.\"",
    "\"Generate Python code that creates a universal command line environment for AWS, allowing users to interactively manage AWS services and resources from the command line, including creating and managing EC2 instances, S3 buckets, and IAM users and policies.\"",
    "\"Generate Python code that uses the `re` module to create regular expressions for parsing and manipulating JSON data, and the `json` module to convert between Python objects and JSON strings.\"",
    "\"Generate Python code that implements ASN.1 types and DER/BER/CER codecs using pure Python, without any external dependencies, similar to the X.208 standard.\"",
    "\"Generate Python code that implements an RSA algorithm, using only pure Python without any external libraries, to perform encryption and decryption operations.\"",
    "\"Generate Python code that creates a built package format for Python using a template engine like Jinja2, including a README file and a setup.py script that defines the package name, version, author, and license, and includes a MANIFEST.in file to specify the package structure.\"",
    "\"Generate Python code that imports the necessary modules for array computing and performs basic operations such as array creation, indexing, slicing, reshaping, and element-wise arithmetic.\"",
    "\"Generate Python code that implements backported and experimental type hints for Python 3.8+ using the `typing` module, including support for union types, literals, and protocols.\"",
    "\"Generate Python code that imports the necessary libraries to create cross-platform colored terminal text, such as `os` for platform detection and `colored` for colorizing the text.\"",
    "\"Generate Python code that detects the encoding of a given string using the chardet library and prints the detected encoding.\"",
    "\"Generate Python code that imports the required libraries and defines a function that takes a timestamp and returns the time in a specific timezone, accounting for daylight savings and historical changes in the timezone.\"",
    "\"Generate Python code that parses and converts reStructuredText documents into various formats, such as HTML, PDF, and latex, using the docutils library.\"",
    "\"Generate Python code that creates a fast and expressive template engine, capable of rendering templates with arbitrary depth, that supports both inline and block-level syntax, and that allows for nested blocks and conditionals, using a simple and intuitive API.\"",
    "\"Generate Python code that creates a composable command line interface toolkit by defining modular, reusable commands and implementing a framework for combining them into more complex workflows.\"",
    "\"Generate Python code that uses an existing library like 'bleach' or 'html.parser' to sanitize untrusted user input and append it to an HTML/XML document, while ensuring that any injected code is properly escaped and poses no security risk.\"",
    "\"Generate Python code that imports the required C libraries and calls the necessary functions to implement a foreign function interface for Python, allowing Python programs to call C code and vice versa.\"",
    "\"Generate Python code that imports the cryptography package and uses its recipes and primitives to encrypt and decrypt data, implement digital signatures, and perform other cryptographic operations.\"",
    "\"Generate Python code that creates a class without boilerplate using the `abc` module, like this:\\n```python\\nfrom abc import ABCMeta, abstractmethod\\n\\nclass MyClass(metaclass=ABCMeta):\\n   @abstractmethod\\n   def my_method(self) -> None:\\n       pass\\n```\\nThis will create a class `MyClass` that has an abstract method `my_method`, which can be implemented by any subclass of `MyClass`. The `ABCMeta` metaclass takes care of automatically generating the `__init__` method for us, so we don't need to write it ourselves.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an instance of the Google API Client to interact with Google APIs, including setting up authentication and creating service objects for specific Google services like Google Drive, Google Sheets, and Google Slides.\"",
    "\"Generate Python code that imports the pyparsing module and creates a parsing grammar using the `Grammar` class, then uses the `parse_string()` method to parse input strings and retrieve matches.\"",
    "\"Generate Python code that imports the core utilities for Python packages, including file manipulation, directory navigation, and string processing functions.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `chardet` library to detect the encoding of a given string, or raises an exception if the encoding cannot be detected.\"",
    "\"Generate Python code that reads metadata from Python packages using the `packaging` library, specifically the `PackageMetaData` class, and prints the name, version, author, and license of each package.\"",
    "\"Generate Python code that imports the necessary libraries for data analysis, time series, and statistics, such as NumPy, Pandas, Matplotlib, and SciPy, and creates a set of robust data structures for efficient data manipulation and analysis.\"",
    "\"Generate Python code that imports the os and shutil modules, creates a context manager for temporarily modifying the working directory, and yields a Path object for a ZIP file.\"",
    "\"Generate Python code that uses the `ast` module to parse C code and create an abstract syntax tree, which can then be analyzed and transformed.\"",
    "\"Generate Python code that implements a generic, spec-compliant, and thorough OAuth request-signing logic using the `requests` library and the `hmac` module for computing signatures.\"",
    "\"Generate Python code that implements a JSON Web Token (JWT) generator and verifier, using the HMAC SHA-256 algorithm for signing, and supporting both RSA1_5 and RSA-OAEP key formats.\"",
    "\"Generate Python code that imports the Flask web framework and creates a simple web application that handles GET requests for the root URL (\\\"/\\\") and displays \\\"Hello, World!\\\" in the response.\"",
    "\"Generate Python code that imports the OAuthlib library and uses it to authenticate a Requests session, allowing you to make authenticated HTTP requests to APIs that require OAuth authentication.\"",
    "\"Generate Python code that imports the Google Auth library and creates an OAuth2 client for authentication with Google services.\"",
    "\"Generate Python code that creates an extensible memoizing collection class and decorator for caching function calls with arguments, using a dictionary to store the cache and implementing a mechanism for invalidating cached values upon changes to the input data.\"",
    "\"Generate Python code that imports and uses the `pyasn1` library to implement a collection of ASN.1-based protocols modules, including support for encoding and decoding of ASN.1 data, and implementation of custom ASN.1-based protocols.\"",
    "\"Generate Python code that creates a modular and extensible web application framework using Flask or Django, allowing developers to build complex web applications with ease.\"",
    "\"Generate Python code that implements a multidict data structure, which is a dictionary that can store multiple values for each key, similar to a list but with key-value pairs instead of indices.\"",
    "\"Generate Python code that imports the json module and creates a function to encode and decode JSON data using the json.dumps() and json.loads() methods.\"",
    "\"Generate Python code that imports the requests library and uses it to send an HTTP GET request to a given URL, returning the response object.\"",
    "\"Generate Python code that implements a decorator system for human-readable functions, allowing developers to add functionality to existing functions without modifying their implementation.\"",
    "\"Generate Python code that uses cryptographic hash functions and digital signatures to ensure the integrity and authenticity of data when passing it to untrusted environments, and implement a secure communication protocol for transmitting the data between the trusted and untrusted environments.\"",
    "\"Generate Python code that imports the necessary modules and implements the functionality described in the package description, such as:\\n```\\nimport threading\\nimport Queue\\n\\ndef run_in_thread(fn):\\n   def wrapper():\\n       fn()\\n   t = threading.Thread(target=wrapper)\\n   t.daemon = True # so that the thread dies when the main thread does\\n   t.start()\\n```\\nThis code defines a function `run_in_thread` that takes another function `fn` as an argument, creates a new thread using `threading.Thread`, sets the daemon flag to `True` so that the thread dies when the main thread does, and starts the thread using `t.start()`. This allows the main thread to continue executing while the function `fn` runs in parallel in a separate thread.\"",
    "\"Generate Python code that imports the functools module and creates a decorator function using the @ symbol, like so: `@decorator(func)`; this will allow you to add additional functionality to existing functions without changing their implementation.\"",
    "\"Generate Python code that defines a Protocol Buffers message for a Google API using the `google.protobuf` package, including the necessary dependencies and extensions for the specific API.\"",
    "\"Generate Python code that imports the necessary libraries and uses the psutil module to monitor system processes and retrieve information such as CPU usage, memory usage, and disk usage, while also using the os module to gather information about the system's hardware and software capabilities.\"",
    "\"Generate Python code that imports the asyncio module and creates an asynchronous HTTP client that can send requests to a server and receive responses, using the async/await syntax for easier asynchronous programming.\"",
    "\"Generate Python code that creates a database abstraction layer to interact with various databases, including MySQL, PostgreSQL, SQLite, and Oracle, using SQLAlchemy, allowing for simplified querying and data manipulation while abstracting away database-specific syntax.\"",
    "\"Generate Python code that implements an HTTP/2-based RPC framework, complete with request and response messages, stream multiplexing, and optional compression.\"",
    "\"Generate Python code that uses the combination of libxml2, libxslt, and ElementTree to process XML files in a powerful and Pythonic way.\"",
    "\"Generate Python code that cleans single-source support for Python 3 and 2 by using the `future` module to detect the version of Python being used, and then importing the appropriate modules and classes from either `backports` or `builtins` based on that version.\"",
    "\"Generate Python code that imports the pytest module and runs a test file named \\\"test_myfunction.py\\\" using the `pytest` command.\"",
    "\"Generate Python code that imports the necessary libraries and sets up authentication for using the Google Cloud API client core library.\"",
    "\"Generate Python code that imports the required modules for a library with cross-Python path, ini-parsing, IO, code, and log facilities, such as `import os; import configparser; import sys; import logging; import io`\"",
    "\"Generate Python code that creates an image processing library that can open, manipulate, and save various image file formats, including BMP, PNG, JPEG, GIF, and TIFF, using the Pillow library.\"",
    "\"Generate Python code that parses and formats dates, times, and durations in ISO 8601 format using the `datetime` module and its methods such as `datetime.fromisoformat()` and `datetime.timetz()`.\"",
    "\"Generate Python code that imports the `jsonschema` library and uses it to validate a JSON document against a JSON schema, raising a `ValidationError` if there are any validation errors.\"",
    "\"Generate Python code that implements fundamental algorithms for scientific computing, including linear algebra, optimization, signal processing, and statistics, using efficient and well-tested libraries like NumPy and SciPy.\"",
    "\"Generate Python code that imports the Apache Arrow library and creates a table from a CSV file, allowing you to perform efficient data processing and analysis operations on the data.\"",
    "\"Generate Python code that implements a plugin system using a dictionary to register and call plugins, and a hook system using a list of functions to execute callbacks in a specific order.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client object for interacting with Google Cloud Storage.\"",
    "\"Generate Python code that imports the websocket library and creates a client object with a custom header and a callback function for message reception.\"",
    "\"Generate Python code that imports the Pygments library and uses it to perform syntax highlighting on source code files, providing users with customizable themes and support for multiple programming languages.\"",
    "\"Generate Python code that imports the OpenSSL library and provides a simple interface for creating SSL/TLS connections, encrypting data, and verifying certificates.\"",
    "\"Generate Python code that imports the asyncio module and creates a timeout context manager function that takes a time limit and a function to run as arguments, starts the function in an asynchronous task, and cancels the task and raises a TimeoutError if it doesn't finish within the specified time limit.\"",
    "\"Generate Python code that uses the Swagger specification to create a client runtime for interacting with RESTful APIs.\"",
    "\"Generate Python code that implements persistent, functional, and immutable data structures using libraries like Immutable collections, toolz, and PyDS.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that takes a string as input, checks if it contains any vowels, and returns \\\"Yes\\\" if it does, or \\\"No\\\" otherwise.\"",
    "\"Generate Python code that imports the necessary modules from the Microsoft Azure Core Library for Python to interact with Azure services such as Azure Active Directory, Azure Service Bus, Azure Storage, and Azure Event Hubs.\"",
    "\"Generate Python code that downloads media files from Google Drive using the `google-api-python-client` library, and utilizes resumable uploads when necessary.\"",
    "\"Generate Python code that creates a fast and extensible progress meter using a customizable template and supports multiple concurrent jobs.\"",
    "\"Generate Python code that uses BeautifulSoup and Requests libraries to scrape data from websites and parse HTML elements.\"",
    "\"Generate Python code that builds a virtual environment for Python projects using the `venv` module, creating a self-contained directory tree with the selected Python version and necessary dependencies.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client object to interact with Azure Blob Storage, allowing users to create, delete, list, download, and upload blobs in their Azure storage account.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to a Google BigQuery database, allowing me to execute SQL queries and retrieve results.\"",
    "\"Generate Python code that imports relevant libraries for machine learning and data mining, such as NumPy, SciPy, and scikit-learn, and creates a module for implementing common machine learning algorithms and data mining techniques, including data preprocessing, feature selection, and model evaluation.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a client object to interact with Google APIs, such as the Google Drive API or Google Sheets API, by using the Google API Client Library for Python.\"",
    "\"Generate Python code that imports the required libraries and creates a function that takes a string as input, parses it using Beautiful Soup, and returns a list of tuples containing the selected elements' names and values using a modern CSS selector implementation.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `tabulate` function from the `pytable` library to pretty-print tabular data, with column headers and proper alignment.\"",
    "\"Generate Python code that imports the `fcntl` module, creates a lock file with `fcntl.flock`, and demos the ability to check for the presence of the lock file and release the lock using `fcntl.flock.remove()`; this demonstrates a platform-independent file lock.\"",
    "\"Generate Python code that imports the requests library and creates a session object to send HTTP requests, allowing for configuration of various options such as headers, cookies, and authentication.\"",
    "\"Generate Python code that parses and serializes ASN.1 data using the Fast ASN.1 parser and serializer, supporting definitions for private keys, public keys, certificates, CRL, OCSP, CMS, PKCS#3, PKCS#7, PKCS#8, PKCS#12, PKCS#5, X.509 and TSP.\"",
    "\"Generate Python code that creates a file system specifier, which is a dictionary that contains information about a file system such as its type, mount point, and other relevant details.\"",
    "\"Generate Python code that imports the 'concurrent.futures' module and creates a pool of worker threads to execute a function asynchronously, allowing for lightweight in-process concurrent programming.\"",
    "\"Generate Python code that uses the `coverage` module to measure the code coverage of a Python script, calculates the coverage percentage, and displays the results in a neat format.\"",
    "\"Generate Python code that plots data from various sources, such as CSV files, databases, and scientific instruments, using a variety of visualization tools and techniques, including line plots, scatter plots, bar charts, histograms, and more, with customizable titles, labels, colors, fonts, and layouts, and allows for interactive exploration and manipulation of the plots.\"",
    "\"Generate Python code that imports the docker-py library and creates a DockerClient object to interact with the Docker Engine API, allowing users to perform various container and image management operations, such as creating, starting, stopping, and deleting containers, as well as building and loading images.\"",
    "\"Generate Python code that imports the discord.py library and creates a bot instance, allowing you to interact with the Discord API and perform various tasks such as creating servers, managing channels, and sending messages.\"",
    "\"Generate Python code that imports the necessary modules from the Microsoft Azure Client Library for Python (Common) and creates an instance of the AzureClient class, authenticating with Azure Active Directory (AAD) using a client ID and secret, and sets up a subscription ID and tenant ID for use in subsequent API calls.\"",
    "\"Generate Python code that imports the necessary modules from the NaCl library and uses them to implement network communication and cryptographic operations, such as creating a secure socket connection, sending and receiving messages, and authenticating messages using digital signatures.\"",
    "\"Generate Python code that implements lightweight pipelining with Python functions using the `pipeline` module, which allows for the creation of modular, reusable data processing pipelines.\"",
    "\"Generate Python code that implements RFC 6570 URI Templates, allowing users to create templates with placeholders for URIs and replace them with actual values when needed, using a simple and efficient syntax.\"",
    "\"Generate Python code that uses the Pexpect library to interact with a console application, allowing for easy control and automation of interactive processes.\"",
    "\"Generate Python code that uses the `termwidth` module to calculate the displayed width of Unicode strings in a terminal, and returns the width in pixels.\"",
    "\"Generate Python code that runs a subprocess in a pseudo terminal using the `subprocess` module and `pty` module, like this:\\n```\\nimport subprocess\\nimport pty\\n\\n# Create a pseudo terminal\\npt = pty.Fork()\\n\\n# Start the subprocess\\nsubprocess.run(['ls', '-l'], env=None, stdin=pt.stdin, stdout=pt.stdout, stderr=pt.stderr)\\n\\n# Close the pseudo terminal\\npt.close()\\n```\"",
    "\"Generate Python code that builds a reasonableness model using a combination of natural language processing, computer vision, and machine learning techniques to evaluate the reasonableness of a given input.\"",
    "\"Generate Python code that imports the Boto3 library and creates an instance of the S3 object, allowing for convenient interaction with an Amazon S3 bucket.\"",
    "\"Generate Python code that implements an SSH2 protocol library, allowing for secure remote access and file transfers using the SSH2 protocol.\"",
    "\"Generate Python code that creates an asynchronous client for AWS services using Botocore and AioHttp:\\n```python\\nimport asyncio\\nimport botocore\\nfrom aiohttp import ClientSession\\n\\nasync def get_ec2_instances(region):\\n   session = aiohttp.ClientSession()\\n   ec2 = botocore.client('ec2', region=region, session=session)\\n   instances = await ec2.describe_instances(Filters=['instance-state-name=running'])\\n   return await instances['Reservations'][0]['Instances']\\n\\nasync def get_s3_objects(bucket, prefix):\\n   session = aiohttp.ClientSession()\\n   s3 = botocore.client('s3', session=session)\\n   objects = await s3.list_objects(Bucket=bucket, Prefix=prefix)\\n   return await objects['Contents']\\n\\nasync def main():\\n   # Initialize the clients\\n   ec2 = botocore.client('ec2')\\n   s3 = botocore.client('s3')\\n   \\n   # Get the running EC\"",
    "\"Generate Python code that implements modern password hashing using a secure hash algorithm such as Argon2 or Bcrypt, featuring password saltings and multiple rounds of hashing for increased security, and stores passwords in a secure format for server-side usage.\"",
    "\"Generate Python code that imports the required libraries and implements a fast constraint solver using the Cassowary algorithm, similar to the given package description.\"",
    "\"Generate Python code that imports the psycopg2 module and connects to a PostgreSQL database using a DSN string, then executes a query and fetches the results.\\n\\nHere is an example of a prompt that could generate Python code to accomplish the same tasks as the psycopg2 package description:\\n\\n\\\"Generate Python code that imports the psycopg2 module, connects to a PostgreSQL database using a DSN string, executes a query, and fetches the results.\\\"\\n\\nHere is some sample code that fulfills the prompt:\\n\\n```\\nimport psycopg2\\n\\n# Connect to the database using a DSN string\\nconn = psycopg2.connect(dsn='mydb://user:password@host:port/database')\\n\\n# Execute a query\\ncur = conn.cursor()\\ncur.execute('SELECT * FROM mytable')\\n\\n# Fetch the results\\nrows = cur.fetchall()\\n\\n# Print the rows\\nfor row in rows:\\n   print(row)\\n\\n# Close the cursor and connection\\ncur.close()\\nconn.close()\\n```\\n\\nThis code imports the\"",
    "\"Generate Python code that imports the redis module and creates a connection to a Redis server, allowing for interaction with the key-value store and database.\"",
    "\"Generate Python code that implements a McCabe checker plugin for flake8, which checks for cyclomatic complexity in Python code and reports violations of a specified threshold as errors.\"",
    "\"Generate Python code that imports the required packages and reads their resources using the `package_resources` module, for example:\\n```python\\nimport package_resources\\n\\n# Read a resource file\\nwith open(package_resources.get_resource('mypackage', 'data.txt'), 'r') as f:\\n   data = f.read()\\n\\n# Read a resource directory\\nfor filename in package_resources.get_resource_names('mypackage'):\\n   if filename.endswith('.txt'):\\n       # Open and read each text file in the directory\\n       with open(package_resources.get_resource('mypackage', filename), 'r') as f:\\n           data = f.read()\\n```\"",
    "\"Generate Python code that provides additional routines for operating on iterables, such as iterative filtering, grouping, and mapping, similar to the functionality provided by the itertools module but with a focus on performance and flexibility.\"",
    "\"Generate Python code that creates a WSGI HTTP server for UNIX using the `wsgiref` module, listening on port 8000 by default, and serving files from the current directory.\\n\\nHere's an example of a possible implementation:\\n```\\nimport wsgiref\\n\\nhttp_server = wsgiref.WSGIServer(('', 8000), wsgiref.handlers.DefaultFileHandler)\\nhttp_server.serve_forever()\\n```\\nThis code creates a WSGI server that listens on port 8000 and serves files from the current directory using the `DefaultFileHandler` class from the `wsgiref` module. The `serve_forever()` method runs the server in an infinite loop, handling incoming requests and sending responses.\"",
    "\"Generate Python code that imports the GitPython library and uses it to interact with a local Git repository, such as creating a new branch, making changes to files, committing those changes, and pushing them to a remote repository.\"",
    "\"Generate Python code that imports the necessary libraries and creates an interactive command line interface using the prompt_toolkit library, allowing users to input commands and receive responses based on the entered input.\"",
    "\"Generate Python code that imports the `chardet` library, reads the input file's contents, detects the character encoding of the file using `chardetect`, and prints the detected encoding.\"",
    "\"Generate Python code that uses the `pycodestyle` library to check the style of a given Python file against the PEP 8 conventions and reports any violations found.\"",
    "\"Generate Python code that creates an interactive shell for productive computing, providing syntax highlighting, tab completion, and introspection capabilities.\"",
    "\"Generate Python code that creates a simple web application using Tornado, handling incoming HTTP requests and responses asynchronously, utilizing Tornado's async IO loop.\"",
    "\"Generate Python code that creates a utility belt for advanced users of python-requests, including functions for making requests with custom headers, handling JSON responses, and debugging requests.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an HTTP authentication using the Google Authentication Library with the httplib2 transport.\"",
    "\"Generate Python code that implements type system extensions for programs checked with the mypy type checker, allowing for more expressive and powerful type annotations, including union types, tuples, and generics.\"",
    "\"Generate Python code that uses the Cython compiler to write C extensions in the Python language, allowing for faster execution of certain parts of the code.\"",
    "\"Generate Python code that uses the `lxml` library to parse XML documents and protects against XML bomb attacks by limiting the depth of the parsing tree and checking for excessive entity expansion.\"",
    "\"Generate Python code that implements an alternative regular expression module, replacing the built-in re module, with improved performance and additional features such as support for Unicode characters and non-greedy quantifiers.\"",
    "\"Generate Python code that imports the discord.py library and creates a bot that listens for messages starting with \\\"!mirror\\\" and, when triggered, sends a message to the channel with the same content as the original message.\"",
    "\"Generate Python code that imports the Prometheus Python client library and uses it to query the Prometheus API, retrieve metrics and alerts, and display them in a user-friendly format.\"",
    "\"Generate Python code that implements a function to create and compose stylesheets using CSS variables, allowing for easy manipulation of colors and typography across multiple platforms and applications.\"",
    "\"Generate Python code that imports the necessary modules from the Abseil Python Common Libraries, including `absl.python_util`, `absl.strings`, `absl.container`, `absl.synchronization`, `absl.numbers`, and `absl.math`, and uses them to perform various tasks such as string manipulation, container utilities, synchronization, number parsing, and mathematical operations.\"",
    "\"Generate Python code that parses a configuration file in INI format and returns a dictionary representing the contents of the file, using the `configparser` library and the `dict()` function.\"",
    "\"Generate Python code that parses a TOML file and returns a dictionary representing the contents of the file using the `toml` library.\"",
    "\"Generate Python code that uses the `ast` module to parse a SQL query and returns an abstract syntax tree, without performing any validation or error checking.\"",
    "\"Generate Python code that imports the openpyxl library and uses it to read and write Excel 2010 xlsx/xlsm files.\"",
    "\"Generate Python code that imports the Google Auth library and creates an authenticated client using a service account key file, including setting up authentication credentials and authorizing the user.\"",
    "\"Generate Python code that imports the enum module in Python 3.4 and creates a compatibility layer for older versions of Python (3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4) by using the enum module's _generate_yaml() function to create a YAML file defining the enumerations, which can then be imported in the older versions of Python using the yaml module.\"",
    "\"Generate Python code that imports the lxml library and uses it to read and write XML files, similar to how the built-in open() function is used to read and write text files.\"",
    "\"Generate Python code that imports the `blessed` package and uses it to manage versions using SCM tags.\"",
    "\"Generate Python code that configures a application using a simple and declarative format, allowing for easy management of settings and dependencies across multiple environments.\"",
    "\"Generate Python code that imports the necessary libraries for distribution utilities, such as NumPy and SciPy, and provides functions for calculating various statistical distributions, such as binomial, Poisson, normal, and exponential.\"",
    "\"Generate Python code that imports os and uses its functions to determine the current platform and return the appropriate directory path for storing user data, such as os.path.expanduser('~/.config') on Unix-like systems and os.path.join(os.environ['APPDATA'], 'user_data') on Windows.\"",
    "\"Generate Python code that implements a sliding window memory map manager using a dictionary to store the mapping of memory blocks to their corresponding positions in the window, and utilizing the sys module's mmap function to create a mappable file that represents the window.\"",
    "\"Generate Python code that imports the java module and creates a Java Virtual Machine (JVM) using the `java.awt` library, allowing Python programs to interact with Java objects and classes.\"",
    "\"Generate Python code that imports os and uses its getenv method to determine the user's home directory, then returns a dictionary with keys for desktop, documents, downloads, and temp, each pointing to an appropriate directory depending on the operating system.\"",
    "\"Generate Python code that uses the `pkg_resources` module to discover and load entry points from installed packages, such as command line tools and libraries, and make them available for use in your program.\"",
    "\"Generate Python code that uses the `pytest` module to run tests in a way that mimics the behavior of the `distutils` command, including resolving dependencies.\"",
    "\"Generate Python code that imports the MySQL Connector library and creates a connection to a MySQL database using a given host, username, password, and database name.\"",
    "\"Generate Python code that sorts Python imports using the `import` statement, module name, and line number.\"",
    "\"Generate Python code that implements a simple object database using Git as the backing store, allowing objects to be stored, retrieved, and deleted using a simple API.\"",
    "\"Generate Python code that defines a custom Pickler class that extends the standard pickle.Pickler functionality by adding a new method, `dump_with_optional_compression`, which takes an additional argument, `compression`, and uses it to compress the data before dumping it to a file.\"",
    "\"Generate Python code that implements a Markdown processor, following John Gruber's Markdown syntax, and outputting HTML.\"",
    "\"Generate Python code that imports the datetime module and creates a tzinfo object for the local timezone using the datetime.timezone variable.\"",
    "\"Generate Python code that implements a super-fast templating language by borrowing ideas from existing templating languages, using a combination of tokenization, caching, and lazy evaluation to optimize performance.\"",
    "\"Generate Python code that creates a tiny shelve-like database with concurrency support, using the `threading` module to manage concurrent access to the database.\"",
    "\"Generate Python code that sanitizes HTML content using a saferlist-based approach, removing any harmful tags or attributes while preserving the structure and content of the original document.\"",
    "\"Generate Python code that imports the unittest.mock module and patches it into the sys.meta_path, allowing for the use of mock objects in unit tests for all versions of Python.\"",
    "\"Generate Python code that imports the required modules and creates a basic implementation of a list-like structure that supports the methods defined in collections.abc.MutableSequence.\"",
    "\"Generate Python code that imports the pymongo library and creates a connection to a MongoDB server, allowing you to interact with the database and perform various operations such as inserting, querying, updating, and deleting data.\"",
    "\"Generate Python code that imports the required libraries and uses ADAL Python to authenticate to Azure Active Directory (AAD) and access AAD-protected web resources.\"",
    "\"Generate Python code that imports the necessary modules and uses ANSI escape codes to format text in the terminal with various colors, boldness, and styles.\"",
    "\"Generate Python code that imports the requests library and uses it to perform OAuth 2.0 authentication with a server, obtaining an access token that can be used to make authenticated API requests.\"",
    "\"Generate Python code that implements internationalization utilities, including support for multiple languages, date and time formatters, number and currency formatters, and message translation using Gettext.\"",
    "\"Generate Python code that imports the necessary modules for interacting with AWS services, such as boto3, and sets up credentials for accessing AWS resources.\"",
    "\"Generate Python code that imports the psycopg2 module and creates a connection to a PostgreSQL database, allowing for interaction with the database through SQL queries.\"",
    "\"Generate Python code that uses the ast module to parse Python source code and checks for known security vulnerabilities and best practices violations, reporting any issues found.\"",
    "\"Generate Python code that imports the `google.protobuf` module and uses it to define and serialize structured data messages.\"",
    "\"Generate Python code that imports the required libraries and creates a graph data structure with nodes and edges, allowing users to add, remove, and manipulate nodes and edges, and perform operations such as graph traversal, shortest path finding, and network analysis.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a ZeroMQ context, socket, and router to send and receive messages between processes.\"",
    "\"Generate Python code that provides various utility functions for interactive computing, including printing tables, debugging, timing, and profiling, similar to the functionality offered by the Vestigial utilities from IPython.\"",
    "\"Generate Python code that uses SQLAlchemy's MetaData, Table, and Column objects to define a migrations table, create a versioning system, and update the database schema accordingly.\"",
    "\"Generate Python code that implements an autocompletion tool for Python, using natural language processing and machine learning algorithms to provide intelligent suggestions for incomplete code, and integrating with popular text editors through APIs or plugins.\"",
    "\"Generate Python code that implements a MessagePack serializer, which takes in Python objects as input and outputs their serialized representations in MessagePack format, using the `msgpack` library.\"",
    "\"Generate Python code that imports the os and re modules, defines a function that takes a file path and a list of gitignore patterns as arguments, uses re.compile to create a regular expression from the gitignore patterns, uses os.path.normcase to normalize the file path, and returns True if the normalized file path matches the regular expression, False otherwise.\"",
    "\"Generate Python code that parses a string using the pyparsing library, extracting the name, version, and author of a Python package from its package description.\"",
    "\"Generate Python code that imports the C library 'Google CRC32C' and provides a Python interface for calculating CRC-32 checksums for strings and bytes.\"",
    "\"Generate Python code that uses the pep8 and pyflakes modules to check for compliance with PEP 8 style conventions and potential issues in modular source code, respectively.\"",
    "\"Generate Python code that creates an empty list called `aiosignal` to store registered asynchronous callbacks, and uses the `async def` syntax to define a decorator function that takes in a function argument and appends it to the `aiosignal` list.\"",
    "\"Generate Python code that imports the required libraries and provides a simple interface for encryption and decryption using cryptography.\"",
    "\"Generate Python code that imports the necessary modules for interacting with Apache Spark, creates a SparkContext, loads data into a SparkDataFrame, applies various transformations and actions to the data, and saves the resulting data to a file using the SparkDataFrame's save method.\"",
    "\"Generate Python code that imports the configparser module and updates it to the latest version for older Python versions.\"",
    "\"Generate Python code that imports the TensorFlow module and creates a simple neural network for image classification.\"",
    "\"Generate Python code that creates a DNS client that can perform various DNS operations such as querying DNS records, modifying DNS records, and testing DNS server connectivity.\"",
    "\"Generate Python code that defines a callback function that takes a single argument, `response`, which is the response from an API request, and returns a processed version of the response data.\"",
    "\"Generate Python code that imports a retrying library such as `retrying` or `tenacity`, wraps the code to be retried in a function, and uses the retrying library to retry the function up to a specified number of times or until a specific condition is met.\"",
    "\"Generate Python code that imports the ast module and creates a custom class, MyAST, that inherits from ast.NodeVisitor and adds type comments to the tree.\"",
    "\"Generate Python code that imports the `types` module, defines a class with a `__init__` method that takes an object as its argument and stores it in an instance variable, and overrides the `__getattr__` method to return a proxy object that delegates all calls to the original object while also tracking the number of times each attribute is accessed.\"",
    "\"Generate Python code that uses type hints to validate data in a function signature, for example: `def my_function(x: int) -> None:` to ensure that the `x` argument is an integer.\"",
    "\"Generate Python code that imports the required libraries and provides a function for converting IP addresses between IPv4 and IPv6 formats, performs DNS lookups, and calculates the IP address subnet mask.\"",
    "\"Generate Python code that creates a TensorBoard summary writer to visualize the training process of a TensorFlow model.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to Dogadog's API to collect metrics, log data, and create alerts for monitoring infrastructure performance and application health.\"",
    "\"Generate Python code that uses the `pickle` module to serialize all Python objects into a binary format that can be loaded and executed in another environment.\"",
    "\"Generate Python code that uses the `nbt` library to read and convert Jupyter Notebooks into Python scripts, which can then be executed directly from the command line or integrated into other applications.\"",
    "\"Generate Python code that implements a Jupyter protocol server and client library, allowing for interactive computing and data sharing between processes.\"",
    "\"Generate Python code that creates an interactive environment for working with Python code, including syntax highlighting, code completion, and error handling, using the IPython kernel for Jupyter.\"",
    "\"Generate Python code that reads and writes files in the Jupyter Notebook format, allowing users to create, edit, and share documents containing live code, equations, visualizations, and narrative text.\"",
    "\"Generate Python code that uses the `xmltodict` library to convert XML files into JSON-like dictionaries, allowing for easy parsing and manipulation of XML data using Python's built-in JSON tools.\"",
    "\"Generate Python code that imports the functools module and creates a decorator function deprecated that takes a message string and a replacement callable as arguments, and uses the functools.wraps function to wrap the original function or method with the decorator, while also marking it as deprecated in the docstring.\"",
    "\"Generate Python code that imports the portalocker module and creates a wrapper function for its recipe, allowing for easy usage and simplifying the process of locking and unlocking portals.\"",
    "\"Generate Python code that imports the necessary modules and creates sorted containers, including a sorted list, sorted dictionary, and sorted set, using the relevant module for each container type.\"",
    "\"Generate Python code that imports the markdown library and uses it to parse Markdown files, optionally applying plugins and renderers to modify the output.\"",
    "\"Generate Python code that imports the necessary modules for creating an interactive environment, such as `IPython`, `numpy`, `matplotlib`, and `pyzmq` to create a basic Jupyter notebook server.\"",
    "\"Generate Python code that implements an ultra-fast JSON encoder and decoder using the `json` module and the `speed_encode` and `speed_decode` functions from the `uwashington.edu` library, ensuring optimal performance by leveraging the `numpy` and `typeguard` libraries for numerical computations and type checking, respectively.\"",
    "\"Generate Python code that imports the MSAL library and uses it to authenticate a user with an AAD or MSA account via OAuth2 or OpenID Connect to access the Microsoft Cloud.\"",
    "\"Generate Python code that imports the ruamel.yaml library and uses it to parse and emit YAML documents with preserved comments, sequence/map flow style, and map key order.\"",
    "\"Generate Python code that uses the openpyxl library to read and manipulate data in Microsoft Excel (.xls) spreadsheets, allowing developers to extract and analyze data from various sheets and cells within the file.\"",
    "\"Generate Python code that imports the Elasticsearch API and performs CRUD operations on data in an Elasticsearch cluster, including searching, indexing, updating, and deleting documents.\"",
    "\"Generate Python code that uses the pytest-cov plugin to measure the coverage of a Python project, displaying the results in a readable format.\"",
    "\"Generate Python code that imports the necessary modules for creating command line tools, configuring the environment, and running tests.\"",
    "\"Generate Python code that implements a WebSocket client and server using the RFC 6455 and 7692 protocols, supporting both text and binary messages, with customizable subprotocols and error handling.\"",
    "\"Generate Python code that imports the necessary modules for interacting with an ODBC database, creates a connection to the database, and executes a query to retrieve data.\"",
    "\"Generate Python code that implements a pure-Python, bring-your-own-I/O implementation of HTTP/1.1 using the `http.client` module, allowing for sending HTTP requests and receiving responses with customizable request and response handlers.\"",
    "\"Generate Python code that creates a web-based notebook environment for interactive computing, allowing users to create and share documents that contain live code, equations, visualizations, and narrative text, with support for multiple programming languages and collaboration features like real-time collaboration, version control, and instant sharing.\"",
    "\"Generate Python code that implements a production-ready serving system for machine learning models using TensorFlow Serving API, allowing for flexible deployment of models, handling of requests and responses, and management of model versions and deployments.\"",
    "\"Generate Python code that defines a decorator `cache_property` that takes a function and returns a new function that caches the result of the original function when called on an object, using the object's `__dict__` attribute to store the cache.\"",
    "\"Generate Python code that imports the h5py library and uses it to read and write HDF5 files, similar to how it's done in this example: https://docs.h5py.org/en/latest/cookbook.html\"",
    "\"Generate Python code that imports the contextlib module and provides backports and enhancements for it, such as improved function annotation and easier context manager usage.\"",
    "\"Generate Python code that imports the required modules, creates an instance of the persistence class, and uses it to save data on disk, encrypted on Windows, macOS and Linux, using a file lock mechanism to coordinate concurrent data access.\"",
    "\"Generate Python code that imports the necessary libraries and creates a basic structure for a Pandoc filter, using the `pandoc` module to interact with the Pandoc document.\"",
    "\"Generate Python code that imports the necessary libraries and uses them to read and write large files from various storage services such as S3, HDFS, GCS, Azure Blob Storage, and compresses/decompresses files using gzip and bz2.\"",
    "\"Generate Python code that creates a password manager program that securely stores user passwords in an encrypted vault and allows users to easily retrieve and fill in their login credentials for recognized websites, using the popular cryptography library Cryptography and the GUI library Tkinter for a simple interface.\"",
    "\"Generate Python code that imports the ast module and creates an abstract syntax tree for a Python program, allowing for inference of types and expressions.\"",
    "\"Generate Python code that patches the asyncio module to enable nesting event loops by modifying the _run_once function to check for an existing loop running before starting a new one.\"",
    "\"Generate Python code that uses the `argparse` library to parse command-line arguments and create a parser object to handle user inputs.\"",
    "\"Generate Python code that imports the inspect module and uses its getsourcefile() function to determine the current file path, then checks if the file path contains \\u201casyncio\\u201d or \\u201casync\\u201d to detect if the code is running under an asynchronous environment.\"",
    "\"Generate Python code that sends a file to the trash natively under Mac OS X, Windows, and Linux:\\n```\\nimport os\\nos.system(\\\"move /Y %s %s\\\" % (file_path, trash_folder))\\n```\\nThis code uses the `os` module to run the command `move /Y %s %s` in the operating system's command shell, where `%s` is replaced by the path of the file to be moved and the path of the trash folder, respectively. The `/Y` option is used to prompt the user to confirm the move operation.\\n\\nAlternatively, you can use the `shutil` module which provides a more pythonic way to interact with files and directories.\\n```\\nimport shutil\\nshutil.move(file_path, trash_folder)\\n```\\nThis will perform the move operation without prompting the user for confirmation.\"",
    "\"Generate Python code that connects to Snowflake using the Snowflake Connector for Python, allowing you to execute SQL queries, fetch results, and interact with Snowflake tables and views.\"",
    "\"Generate Python code that implements type hints for function parameters, return types, and variable annotations, using the syntax proposed in PEP 484.\"",
    "\"Generate Python code that implements a lightweight library for converting complex data types to and from native Python data types, using efficient algorithms and minimizing dependencies.\"",
    "\"Generate Python code that uses the Swagger specification to create a client runtime for interacting with Azure services, utilizing the AutoRest tooling and the Azure-specific module.\"",
    "\"Generate Python code that creates a Pythonic argument parser that takes a list of command line arguments and returns a dictionary of parsed arguments with intuitive variable names, using the argparse library and defaulting to sane defaults for all optional arguments.\"",
    "\"Generate Python code that imports the necessary libraries and uses the FreeDesktop.org Secret Service API to interact with the system's secret storage, such as generating, storing, and retrieving secrets.\"",
    "\"Generate Python code that implements a Tornado websocket backend for the Xterm.js Javascript terminal emulator library, allowing users to access a terminal session from their web browser.\"",
    "\"Generate Python code that creates a convenient wrapper around the `multiprocessing` module, providing a simple and intuitive way to create and manage thread pools, similar to the `threadpoolctl` package.\"",
    "\"Generate Python code that creates a TensorFlow Estimator instance to train and evaluate a machine learning model using high-level APIs, including preprocessing input data, defining the model architecture, and training the model with hyperparameter tuning.\"",
    "\"Generate Python code that uses the `pycodestyle` library to perform static code analysis on a given Python script, checking for consistency in coding style and identifying potential errors or best practices violations.\"",
    "\"Generate Python code that imports the dbus library and creates a low-level DBus protocol wrapper using dbus.ProtocolIntrospectable to interact with the D-Bus bus.\"",
    "\"Generate Python code that creates a command line interface for interacting with Databricks using the Databricks API, allowing users to run SQL queries, create and manage databases, and perform other common database management tasks from the command line.\"",
    "\"Generate Python code that reads YAML files using ruamel.yaml and parses them into Python objects, then emits the modified objects back to YAML files.\"",
    "\"Generate Python code that imports the necessary modules and uses the Microsoft Azure Identity Library to authenticate with Azure Active Directory and obtain an access token for accessing Azure resources.\"",
    "\"Generate Python code that reads key-value pairs from a .env file and sets them as environment variables:\\n\\n```\\nwith open('.env') as f:\\n   for line in f:\\n       key, value = line.split('=')\\n       os.environ[key] = value\\n```\"",
    "\"Generate Python code that imports the necessary libraries for creating interactive widgets in Jupyter notebooks, such as `ipywidgets` or `plotly`, and creates a simple example of an interactive widget, such as a slider or dropdown menu, that can be used to explore data or visualizations interactively.\"",
    "\"Generate Python code that imports the necessary libraries and creates a simple interactive widget using Jupyter's ipywidgets library, such as a sliders widget for inputting numerical values, a dropdown menu for selecting from a list of options, or a checkbox for toggleing a boolean value; then, use these widgets to gather user input in a Jupyter Notebook.\"",
    "\"Generate Python code that imports the ast module and creates an AST tree from source code, allowing for manipulation and analysis of the code without depending on the underlying Python version.\"",
    "\"Generate Python code that imports the os and cryptography libraries to create TLS (SSL) sockets, generate keys, encrypt, decrypt, sign, verify and use KDFs without requiring a compiler and relying on the OS for patching, working on Windows, OS X and Linux/BSD.\"",
    "\"Generate Python code that imports the sentry module and creates a client object to interact with the Sentry API, allowing users to create and manage events, projects, and other resources.\"",
    "\"Generate Python code that imports the necessary modules and creates an instance of the AzureStorageClient class, allowing you to interact with Azure storage accounts and perform various operations such as creating containers, uploading files, and listing containers.\"",
    "\"Generate Python code that performs natural language processing tasks such as tokenization, stemming, lemmatization, parsing, and semantic reasoning using techniques such as word embeddings, recurrent neural networks, and support vector machines.\"",
    "\"Generate Python code that tests file existence, file content, directory existence, command execution, and environment variable settings using the `os` and `shutil` modules.\"",
    "\"Generate Python code that uses the `packaging` library to query metadata from sdists, bdists, and installed packages, such as version, license, author, and description.\"",
    "\"Generate Python code that imports the required libraries and provides a list of functions for various list processing tasks, such as filtering, mapping, reducing, and aggregating lists, as well as utility functions for working with lists, such as converting between list formats, manipulating list elements, and searching for specific elements within a list.\"",
    "\"Generate Python code that imports the typing module and uses its functions to inspect the runtime type of variables and expressions, including isinstance(), type(), and getattr().\"",
    "\"Generate Python code that imports the required libraries and creates a cryptographic library for Python, providing various encryption and decryption methods, such as AES, RSA, and hash functions, along with digital signatures and message authentication codes.\"",
    "\"Generate Python code that uses the argparse library to parse command-line arguments and implements bash tab completion for those arguments.\"",
    "\"Generate Python code that uses the Boto3 library to interface with AWS CloudWatch Logs, allowing users to search, filter, and analyze log data from various sources within their AWS environment.\"",
    "\"Generate Python code that opens a default editor using the `subprocess` module and captures the edited text using the `readline` function.\"",
    "\"Generate Python code that creates a high-level web framework that promotes rapid development and clean, pragmatic design by building a simple web application that handles HTTP requests and responses, uses a template engine for rendering HTML templates, and supports routing and middleware functionality.\"",
    "\"Generate Python code that uses the lex and yacc tools to create a compiler for a given grammar, allowing for the parsing and analysis of strings according to the defined rules.\"",
    "\"Generate Python code that validates a URI reference per RFC 3986 by checking if it matches the regex pattern r\\\"^[a-zA-Z0-9.-]+$\\\" and verifying that any required slashes are properly placed.\"",
    "\"Generate Python code that atomically writes a file using the `os` module's `atomic_write()` function, which takes the path to the file and the content to write as arguments, and returns the number of bytes written.\"",
    "\"Generate Python code that imports the retrying library and uses it to retry a function call with exponential backoff.\"",
    "\"Generate Python code that formats code with uncompromising strictness, using a configurable set of rules and layout conventions, to produce consistent and readable code.\"",
    "\"Generate Python code that imports the `multiprocessing` module and uses its `Lock` class to implement platform-independent file locking.\"",
    "\"Generate Python code that implements a password hashing function using the Argon2 algorithm, allowing for configuration of the hash size, iterations, and memory usage, and returns a securely generated password hash.\"",
    "\"Generate Python code that imports the necessary libraries and executes a notebook using the `nbconvert` module, similar to how the `ExecutePreprocessor` class from the `nbconvert` library works.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Stackdriver Logging API client object to interact with Google Cloud's logging service, allowing users to create, read, update, and delete log entries and logs.\"",
    "\"Generate Python code that imports the necessary libraries for schema and statistics, such as Pandas and NumPy, and uses them to create and manipulate data frames and perform statistical analysis.\"",
    "\"Generate Python code that imports the json module and uses it to serialize an arbitrary object graph into a JSON string, using recursive traversal of the objects and their attributes.\"",
    "\"Generate Python code that implements the SCRAM protocol for password-based authentication, supporting multiple hash functions and encryption methods, with customizable parameters and error handling.\"",
    "\"Generate Python code that imports and uses the `scipy` library to read and write a variety of file formats, including images, videos, scientific data, and volumetric data.\"",
    "\"Generate Python code that uses JupyterLab CSS variables to create a custom theme for Pygments, a syntax highlighting library, by defining a set of styles in a separate CSS file and then importing it into a Jupyter Notebook.\"",
    "\"Generate Python code that parses HTML documents according to the WHATWG HTML specification using a recursive descent parser.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Application Insights API to track metrics, log exceptions, and monitor performance in a Python web application.\"",
    "\"Generate Python code that uses the MLflow library to manage the end-to-end machine learning (ML) lifecycle, including developing, testing, training, and deploying ML models.\"",
    "\"Generate Python code that imports the Google Cloud Pub/Sub API client library and creates a client object to interact with the Google Cloud Pub/Sub service.\"",
    "\"Generate Python code that imports the distro package and uses its functions to retrieve information about the current operating system, such as the name of the distribution, version number, and architecture.\"",
    "\"Generate Python code that imports the os module, creates a class called Path, and defines methods for joining, separating, and normalizing paths.\"",
    "\"Generate Python code that creates an Azure namespace using the `azure.mgmt.namespace` module and sets its location, sku, and tags.\"",
    "\"Generate Python code that imports libraries such as Pandas, NumPy, Matplotlib, Scikit-image, and OpenCV, and performs data preprocessing steps like data cleaning, feature scaling, normalization, and data augmentation using techniques like flipping, rotating, cropping, and color jittering.\"",
    "\"Generate Python code that implements a gRPC status proto mapping using the `google-protobuf` library, allowing for efficient and standardized communication between gRPC clients and servers.\"",
    "\"Generate Python code that imports the mypy module and uses its functionality to add type hints to existing Python code, allowing for optional static typing.\"",
    "\"Generate Python code that creates a coroutine-based network library with functions for creating clients, servers, and routing requests between them.\"",
    "\"Generate Python code that imports the Google BigQuery connector for pandas and uses it to connect to a BigQuery dataset, retrieve data from a table, and convert it into a pandas DataFrame.\"",
    "\"Generate Python code that parses a query string using a nested dictionary structure, handling multiple levels of nesting and properly iterating through each key-value pair in the dict.\"",
    "\"Generate Python code that imports the `unidecode` module and replaces all Unicode characters in a given string with their corresponding ASCII equivalents, preserving the original string's length and content.\"",
    "\"Generate Python code that imports the necessary libraries and creates a vector space model using a sparse matrix representation, allowing for efficient computation and manipulation of large-scale datasets.\"",
    "\"Generate Python code that imports the openpyxl library and creates a new Excel XLSX file with a specified name, sheet name, and data to be written to the sheet.\"",
    "\"Generate Python code that imports the necessary libraries and sets up authentication with Google APIs using the `google-auth` and `google-auth-oauthlib` libraries, then uses the authentication credentials to authenticate to Google APIs such as Google Drive, Google Sheets, and Google Maps.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureResourceManagerClient class, which can be used to manage Azure resources and resource groups.\"",
    "\"Generate Python code that implements function signatures as described in PEP362 for Python versions 2.6, 2.7, and 3.2+ using the `inspect` module and the `funcsigs` library.\"",
    "\"Generate Python code that uses the Prometheus library to collect and export metrics from a Flask application, allowing for easy monitoring and analysis of app performance.\"",
    "\"Generate Python code that creates an asynchronous event loop using libuv, similar to asyncio, but with a faster implementation.\"",
    "\"Generate Python code that enhances the standard unittest package with features for testing asyncio libraries, allowing users to write asynchronous test cases and run them concurrently using async/await syntax, providing detailed error messages and improved performance.\"",
    "\"Generate Python code that imports the Boto3 library and creates an instance of the IAM client, allowing you to interact with AWS IAM resources using the IAM API.\"",
    "\"Generate Python code that imports the dataclasses module and uses it to define classes with attributes and methods, similar to how the dataclasses module works in Python 3.7 and later versions.\"",
    "\"Generate Python code that imports the IANA time zone data module and uses it to retrieve the current time in a specific location.\"",
    "\"Generate Python code that implements async generators and context managers for Python 3.5+ using the async/await syntax and the contextlib module.\"",
    "\"Generate Python code that imports the ast module and creates a concrete syntax tree with AST-like properties for Python 3.5, 3.6, 3.7, 3.8, 3.9, and 3.10 programs, using the ast.parse() function to parse source code strings and create an abstract syntax tree, and ast.dump() to dump the AST to a file.\"",
    "\"Generate Python code that creates an interactive Jupyter terminal console with syntax highlighting, code completion, and support for multiple languages.\"",
    "\"Generate Python code that imports the necessary modules, creates an AST from source code, and refactors the AST using various techniques such as renaming variables, moving definitions, and consolidating similar code.\"",
    "\"Generate Python code that uses the `unittest` module to write unit tests, and use the `nose` package to extend the functionality of `unittest` and make testing easier.\"",
    "\"Generate Python code that creates an interactive Qt console for working with Jupyter notebooks.\"",
    "\"Generate Python code that uses the `unicode` module to perform ASCII transliterations on Unicode text, allowing for easy conversion between different character encodings.\"",
    "\"Generate Python code that imports the requests and BeautifulSoup libraries, uses requests to fetch a URL, and then uses BeautifulSoup to parse the HTML content of the webpage and extract specific data such as titles, links, and descriptions.\"",
    "\"Generate Python code that imports the Slack SDK library and sets up a Web API client to send messages to a Slack channel, using the legacy RTM API.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an inline matplotlib backend for Jupyter notebooks, allowing for interactive plotting and visualization of data.\"",
    "\"Generate Python code that imports the necessary libraries for creating interactive data visualizations, such as Matplotlib, Seaborn, and Plotly, and sets up the necessary dependencies for an open-source, interactive data visualization library.\"",
    "\"Generate Python code that installs all Jupyter components at once:\\n```\\n!pip install jupyter\\n```\"",
    "\"Generate Python code that imports and uses the psycopg2 library to connect to a PostgreSQL database, execute SQL queries, and retrieve results.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client object for interacting with the Google Cloud BigQuery Storage API, allowing users to list, create, update, and delete datasets, tables, and other BigQuery resources.\"",
    "\"Generate Python code that creates a convenient filesystem interface over Google Cloud Storage (GCS) using the `google-cloud-storage` library, allowing users to interact with their GCS buckets and objects as if they were local files and directories.\"",
    "\"Generate Python code that imports TensorFlow and uses its tools for data preprocessing, such as normalization, feature scaling, and data augmentation, to prepare datasets for machine learning models.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an XGBoost classifier to train on a dataset, using the provided parameters for tree depth, maximum leaves, and learning rate.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Kubernetes client object to interact with a cluster, similar to the Kubernetes Python client package.\"",
    "\"Generate Python code that imports libraries such as matplotlib, seaborn, and pandas, and uses them to create statistical visualizations of data, such as line plots, scatter plots, bar charts, histograms, box plots, and heatmaps, while also allowing for customization of various aspects of the visualization, such as titles, labels, colors, and layout.\"",
    "\"Generate Python code that imports the necessary libraries and sets up AWS4 authentication for making requests to AWS services using the Requests library.\"",
    "\"Generate Python code that imports the required libraries and creates a Graphviz graph object to represent a directed graph with nodes and edges, allowing users to add, remove, and manipulate nodes and edges, and export the graph to various formats, including dot, PDF, and PNG.\"",
    "\"Generate Python code that imports the snowball module and creates a dictionary of stemmers for 28 languages, each stemmer being a function that takes a word as input and returns its stemmed version.\"",
    "\"Generate Python code that decorates a function with a backoff and retry mechanism using the `backoff` library, allowing for customizable retry strategies and exponential backoff intervals.\"",
    "\"Generate Python code that imports the necessary libraries from tfx_bsl to share functionality across multiple TensorFlow eXtended libraries and components.\"",
    "\"Generate Python code that imports the cryptography module and creates an AES encryptor and decryptor, a hash object, and an RSA key generator.\"",
    "\"Generate Python code that imports the necessary libraries and creates a simple interactive widget using Jupyter interactive widgets for JupyterLab, allowing users to input a message and display it in real-time.\"",
    "\"Generate Python code that imports the requests library and creates an instance of the HttpClient class, which inherits from the requests.Session class and adds additional functionality for handling HTTP requests, such as configuring the User-Agent header, automatically redirecting requests, and caching frequently requested resources.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Keras model with multiple backend support, allowing for seamless switching between different deep learning backends.\"",
    "\"Generate Python code that imports the necessary libraries for statistical computations and modeling, such as NumPy, SciPy, and scikit-learn, and performs various statistical analyses and modeling tasks, such as linear regression, hypothesis testing, and time series analysis.\"",
    "\"Generate Python code that imports the necessary libraries and creates an Amazon Athena connection using the provided AWS credentials, then executes a SQL query on the connected database and retrieves the results.\"",
    "\"Generate Python code that uses the Boto3 library to parse CloudFormation templates and identifies potential improvements in accordance with best practices and recommended guidelines.\"",
    "\"Generate Python code that imports the scandir module and uses its walk function to iterate over files and directories in a given path, providing detailed information about each file and directory such as name, absolute path, type, permissions, and size, while also allowing for filtering by filetype and skiping over symbolic links.\"",
    "\"Generate Python code that imports the PyWavelets library and performs a wavelet transform on an image using the 'haar' wavelet and displays the approximation and detail coefficients.\\n\\nHere is a sample code that you can use:\\n```\\nfrom pywt import WaveletTransform\\nimport numpy as np\\nimport matplotlib.pyplot as plt\\n\\n# Load an image\\nimage = np.array(Image.open('image.jpg'))\\n\\n# Perform a wavelet transform using the 'haar' wavelet\\nwt = WaveletTransform(image, 'haar')\\napproximation = wt.approximation\\ndetail = wt.detail\\n\\n# Display the approximation and detail coefficients\\nplt.imshow(approximation, cmap='gray')\\nplt.title('Approximation Coefficients')\\nplt.axis('off')\\nplt.show()\\n\\nplt.imshow(detail, cmap='gray')\\nplt.title('Detail Coefficients')\\nplt.axis('off')\\nplt.show()\\n```\"",
    "\"Generate Python code that creates a pipeline using Apache Beam SDK for Python, reads data from a variety of sources such as CSV files, BigQuery tables, and Kafka topics, applies transformations and aggregations on the data, and writes the results to different destinations such as GCS buckets, BigQuery tables, and PubSub topics.\"",
    "\"Generate Python code that imports the messaging library and sends a message to a recipient using the library's send_message function.\"",
    "\"Generate Python code that uses the `pydanny` library to scan through your project\\u2019s source code, identifying classes, functions, and other defining characteristics, and produces detailed documentation in multiple formats.\"",
    "\"Generate Python code that implements a human-friendly output interface for text-based applications, utilizing concise and readable formatters to provide clear and organized information to users.\"",
    "\"Generate Python code that implements an ASGI (Asynchronous Server Gateway Interface) specification, including helper functions and adapters for connecting to various web frameworks and databases.\"",
    "\"Generate Python code that imports the asyncio module and creates a file protocol using the async with statement.\"",
    "\"Generate Python code that imports the necessary modules and creates an AMQP connection to a RabbitMQ server using the Qpid Proton library, allowing for sending and receiving messages on a queue.\"",
    "\"Generate Python code that implements a file transport adapter for Requests, allowing for sending and receiving files in a streaming fashion, similar to how the requests library works, but without the need for expensive and heavyweight processes associated with the HTTP connection pool.\"",
    "\"Generate Python code that imports the required libraries and performs the same tasks as the given package description.\\n\\nFor example, if the package description is:\\n\\n\\\"The deprecated sklearn package is no longer maintained and has been replaced by scikit-learn. The sklearn package provided tools for machine learning model selection, data preprocessing, and feature engineering. It included algorithms such as linear regression, logistic regression, decision trees, random forests, clustering, and support vector machines.\\\"\\n\\nThen, the generated Python code could be:\\n\\n```python\\nimport numpy as np\\nimport pandas as pd\\nfrom sklearn.model_selection import train_test_split\\nfrom sklearn.linear_model import LinearRegression\\nfrom sklearn.logistic_regression import LogisticRegression\\nfrom sklearn.tree import DecisionTreeClassifier\\nfrom sklearn.ensemble import RandomForestClassifier\\nfrom sklearn.cluster import KMeans\\nfrom sklearn.svm import SVC\\n\\n# Load data\\ndata = pd.read_csv('data.csv')\\n\\n# Preprocess data\\nX = data.drop(columns=['target'])\\ny = data['target']\\n\\n\"",
    "\"Generate Python code that imports the necessary modules for creating a GUI application using the Qt binding of choice (PyQt5/6 or PySide2/6) and sets up a basic window with a widget layout.\"",
    "\"Generate Python code that imports the inspect module, defines a decorator singledispatch, and patches the built-in function len to use singledispatch for older Pythons using the same implementation as in functools.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureStorageClient class, allowing you to interact with Azure Storage accounts programmatically.\"",
    "\"Generate Python code that imports and wraps the OpenCV Python bindings, providing a convenient interface for common computer vision tasks such as image processing, object detection, and facial recognition.\"",
    "\"Generate Python code that imports the required modules and uses them to perform operations on iterables and asynchronous I/O, such as iterating over multiple iterables concurrently, creating an iterator that aggregates elements from multiple sources, and performing asynchronous I/O operations using the async variant of the built-in functions.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that takes a list of servers and a dictionary of actions as input, and then executes the actions on each server using Fabric.\"",
    "\"Generate Python code that parses a JSON document and extracts specific nodes using a library such as `json` or `ujson`.\"",
    "\"Generate Python code that imports the requests library and uses the disk cache provided by the httplib2 library to store responses, allowing subsequent requests to re-use previously retrieved data.\"",
    "\"Generate Python code that imports the MySQL Connector library and creates a connection to a MySQL database, allowing for querying and manipulating data within the database.\"",
    "\"Generate Python code that applies a Gaussian blur filter to an image using NumPy.\"",
    "\"Generate Python code that imports the pytz module and creates shims for its functions, allowing for easy deprecation and replacement with alternative time zone handling methods.\"",
    "\"Generate Python code that imports the Thrift module, creates a thrift_service class that defines a service with methods corresponding to the Thrift interface, and uses the Thrift module to create a server that listens on port 9092 and serves requests from clients.\"",
    "\"Generate Python code that parses, compares, and formats date and time strings using natural language syntax, such as \\\"2015-06-11\\\" or \\\"in 3 hours\\\", with support for durations, time zones, and automatic handling of daylight savings time.\"",
    "\"Generate Python code that imports the necessary libraries for manipulating and analyzing geometric objects, such as NumPy and Matplotlib, and performs operations like calculating distances, angles, and intersection points between shapes, as well as visualizing the results.\"",
    "\"Generate Python code that imports the requests library and creates a minimal low-level HTTP client that can send HTTP requests and receive responses, using the request method to specify the URL, headers, data, and cookies.\"",
    "\"Generate Python code that imports the required modules and implements the necessary functions to provide a backport of the standard library zoneinfo module, allowing for the manipulation and conversion of time zones and time zone information in Python.\"",
    "\"Generate Python code that calculates Julian dates from proleptic Gregorian and Julian calendars using the `datetime` module and the `julian_date()` function from the `astronomy` library, like this:\\n```\\nfrom datetime import date\\nimport astronomy\\n\\ndef julian_date(year, month, day, calendar='proleptic_gregorian'):\\n   if calendar == 'proleptic_gregorian':\\n       gdate = date(year, month, day)\\n       jd = astronomy.julian_date(gdate)\\n   elif calendar == 'julian':\\n       jd = astronomy.julian_date(date(year, month, day))\\n   return jd\\n```\"",
    "\"Generate Python code that imports the LightGBM library and uses it to train a gradient boosting model on a dataset, with options to tune hyperparameters and evaluate model performance.\"",
    "\"Generate Python code that implements the Debug Adapter Protocol for Python, allowing a debugger to communicate with a debuggee process over a socket connection, using the protocol defined in the Debug Adapter Protocol specification.\"",
    "\"Generate Python code that uses NumPy's `iensum` function to optimize matrix multiplication by automatically selecting the most efficient algorithm based on the input dimensions and data types.\"",
    "\"Generate Python code that implements a distributed task queue using a message broker such as RabbitMQ or Redis, allowing for efficient parallel processing of large workloads across multiple worker nodes.\"",
    "\"Generate Python code that imports the asyncio module and creates a function that takes in an event loop implementation and returns a high-level compatibility layer for multiple asynchronous event loops.\"",
    "\"Generate Python code that imports the necessary libraries and creates a connection to a Redshift database, allowing the user to execute SQL queries and interact with the database.\"",
    "\"Generate Python code that imports the functools module and creates a retry decorator function that takes a maximum number of attempts and a callback function, and decorates a given function with retries upon failure.\"",
    "\"Generate Python code that implements a parallel data processing system using the `concurrent.futures` module for task scheduling, similar to the `Parallel PyData with Task Scheduling` package.\"",
    "\"Generate Python code that implements an ECDSA cryptographic signature library, utilizing the elliptic curve digital signature algorithm for key generation, signing, and verification, all in pure Python.\"",
    "\"Generate Python code that uses the `ast` module to read an AST from a source file, rewrites it to modify certain nodes, and then writes the modified AST to a new source file.\"",
    "\"Generate Python code that implements a style-preserving TOML library by using a template engine like Jinja2 to render TOML documents with placeholders for values, and utilizing the `tomlkit` library to parse and validate the TOML files.\"",
    "\"Generate Python code that uses libraries such as fonttools, pyfont, or matplotlib to read and modify font files, including their metadata, glyphs, and outlines, and then save the modifications back to a new font file.\"",
    "\"Generate Python code that imports the datetime module and creates a datetime object for the current date and time, allowing you to easily work with dates and times in your Python programs.\"",
    "\"Generate Python code that implements a friendly face on SFTP by using the paramiko library to connect to an SFTP server, display a personalized message, and send a file to the remote user.\"",
    "\"Generate Python code that imports the avro library and uses it to read and write Avro files, similar to how it's done in the fastavro package.\"",
    "\"Generate Python code that imports the unittest module, creates a test class, and defines a method that uses the patch decorator from the mockk library to mock a request call to a specified URL.\"",
    "\"Generate Python code that uses the llvmlite library to compile Python code into LLVM IR and then executes it using the LLVM execution engine.\"",
    "\"Generate Python code that imports the multiprocessing module, creates a process pool with multiple workers, and uses it to execute a function in parallel, while also providing improvements and bugfixes over the standard multiprocessing implementation.\"",
    "\"Generate Python code that implements a reference implementation of a popular deep learning model, such as ResNet50 or BERT, using a library like TensorFlow or PyTorch.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Kafka client object to produce and consume messages in an Apache Kafka cluster.\"",
    "\"Generate Python code that imports a plugin module and its dependencies, loads the plugin's metadata, and registers the plugin with a Plugin Manager class.\"",
    "\"Generate Python code that implements a function to apply JSON-Patches (RFC 6902) to a given JSON document, using the `json` module and the `pydantic` library for parsing and generating JSON documents.\"",
    "\"Generate Python code that implements a backport of the `functools.lru_cache` function from Python 3.2+, which caches the results of expensive function calls so that they don't have to be recomputed every time they're called again.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure DevOps API client, allowing you to interact with Azure DevOps services such as Work Items, Git repositories, and Build definitions.\"",
    "\"Generate Python code that implements aInflector class with methods for pluralizing, singularizing, and camelizing words, similar to the functionality provided by the Ruby on Rails inflector module.\"",
    "\"Generate Python code that imports the socket module and creates a SOCKS4 proxy server listening on port 8080, allowing clients to connect through it and forwarding their requests to a target server using the SOCKS protocol.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Microsoft Azure Key Vault Management Client Library for Python to interact with Azure Key Vault, allowing users to create, read, update, and delete key vaults, secrets, and certificates.\"",
    "\"Generate Python code that implements an iterative JSON parser using the standard Python iterator interface, allowing for efficient parsing of large JSON files while consuming minimal memory.\"",
    "\"Generate Python code that imports the necessary libraries and implements fuzzy string matching using techniques such as Levenshtein distance, Jaccard similarity, and cosine similarity, providing options for customizing the match threshold and handling duplicate matches.\"",
    "\"Generate Python code that implements JOSE (JavaScript Object Signing and Encryption) using the `cryptography` library to sign and encrypt data, and the `requests` library to send HTTP requests.\"",
    "\"Generate Python code that imports the required libraries, sets up SSL context with verification options, and makes secure requests using the updated HTTPS client.\"",
    "\"Generate Python code that imports the requests library and uses it to perform various HTTP operations such as sending GET, POST, PUT, DELETE requests and handling responses, without requiring any specific web framework.\"",
    "\"Generate Python code that imports the required libraries and creates a basic Sphinx theme directory structure, including a configuration file and a template folder, using the `mkdir` and `open` functions.\"",
    "\"Generate Python code that creates an interactive visualization in TensorBoard for debugging and understanding machine learning models, allowing users to explore how different input changes affect model behavior.\"",
    "\"Generate Python code that imports the logging module and uses its default logger to log messages at various levels, such as debug, info, warning, error, and critical, and for each message, appends a colourised representation of the message to the console, using ANSI escape codes to change the text colour.\"",
    "\"Generate Python code that implements tensors and dynamic neural networks using NumPy and TensorFlow with strong GPU acceleration.\"",
    "\"Generate Python code that imports the pandoc library and wraps its functions in a thin layer of convenience functions, providing an easy-to-use interface for converting between different document formats.\"",
    "\"Generate Python code that imports the necessary libraries, loads the dataset, displays statistical summaries and visualizations of the data, and performs validation tests for machine learning models.\"",
    "\"Generate Python code that imports the mock package and creates a thin wrapper around it to make it easier to use with pytest.\"",
    "\"Generate Python code that wraps basic LLVM functionality, such as compiling source code, creating executables, and running them, in a lightweight manner using the `llvm` module.\"",
    "\"Generate Python code that uses the Pillow library to read an image file and extract its dimensions, supporting PNG, JPEG, JPEG-2000, and GIF formats.\"",
    "\"Generate Python code that connects to an AWS cloud-based pandas data cluster and performs data manipulation, analysis, and visualization tasks using pandas APIs.\"",
    "\"Generate Python code that implements a promise-based asynchronous programming model, allowing developers to create and manage promises, register callbacks, and handle errors in a straightforward and efficient manner.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureContainerRegistryClient class, which can be used to interact with an Azure container registry and perform various operations such as creating, updating, and deleting containers, images, and other resources.\"",
    "\"Generate Python code that uses the `subprocess` module to execute a Python script in a separate process, allowing for rapid deployment of multiple Python versions.\"",
    "\"Generate Python code that creates a virtual environment using `virtualenv` and runs tests using `nose` or `pytest`:\\n```python\\ntox.ini\\n```\\nThis will create a file named `tox.ini` in the current directory, which can be used to manage virtual environments and run tests for Python projects. The `tox` command can be used to activate the virtual environment and run tests.\"",
    "\"Generate Python code that implements a simple signaling mechanism for object-to-object and broadcast communication using a PubSub module like `pubsub` from the `twisted` library.\"",
    "\"Generate Python code that imports pandas and statsmodels libraries, defines statistical models, and creates design matrices using pandas DataFrame operations and statsmodels functions.\"",
    "\"Generate Python code that imports the Faker package and uses it to create a fake person object with name, email, and address attributes, and then prints out a greeting message to the person.\"",
    "\"Generate Python code that implements a JSONPath parser and evaluator that supports standard compliant syntax, arithmetic and binary comparison operators, and provides an abstract syntax tree for metaprogramming.\"",
    "\"Generate Python code that uses the pytest xdist plugin to distribute test runs across multiple CPUs:\\n```\\npytest --xdist\\n```\\nThis will run the tests in parallel across all available CPUs, allowing you to take advantage of multi-core processors and significantly speed up your testing process.\"",
    "\"Generate Python code that imports the unicodecsv library and uses it to read and write CSV files with Unicode support, similar to how the built-in csv module works, but with additional features such as supporting different encoding schemes and being able to handle malformed input.\"",
    "\"Generate Python code that creates an Azure Queue Storage client using the `azure.storage` module and authenticates with Azure Active Directory (AAD) credentials, then inserts a message into the queue and receives a message from the queue.\"",
    "\"Generate Python code that imports the necessary libraries and creates an ASCII table using tabulate, such as:\\n```\\nimport tabulate\\n\\ndata = [(\\\"Frodo\\\", \\\"Baggins\\\"), (\\\"Sam\\\", \\\"Gamgee\\\"), (\\\"Merry\\\", \\\"Brandybuck\\\")]\\nheaders = [\\\"Name\\\", \\\"Surname\\\"]\\ntable = tabulate.tabulate(data, headers=headers)\\nprint(table)\\n```\"",
    "\"Generate Python code that defines an enumeration field using the `marshmallow` library, like so:\\n```python\\nfrom marshmallow import fields\\n\\nclass MyModel(models.Model):\\n   MY_ENUM = fields.Enum([\\\"FOO\\\", \\\"BAR\\\", \\\"BAZ\\\"])\\n```\"",
    "\"Generate Python code that imports the Google Cloud Datastore API client library and creates a client object to interact with a Datastore database, including creating, reading, updating, and deleting entities.\"",
    "\"Generate Python code that implements a backend for building Python packages using Poetry, following the guidelines of PEP 517.\"",
    "\"Generate Python code that imports the Olson timezone database and converts a given timestamp from UTC to the corresponding local time in a specific timezone.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureAuthorizationManagementClient class, which can be used to manage Azure Active Directory (AAD) resources, including users, groups, applications, and permissions.\"",
    "\"Generate Python code that uses the Google Sheets API to read and write data to a spreadsheet, perform basic sheet management operations like adding, removing, and renaming sheets, and format cells and sheets with various attributes.\"",
    "\"Generate Python code that imports the necessary libraries and provides an interface for interacting with the Google Cloud Secret Manager API, including creating, reading, updating, and deleting secrets, as well as listing secrets and fetching their versions.\"",
    "\"Generate Python code that imports the necessary modules and creates an AMQP connection to a specified host and port, allowing for the sending and receiving of messages using the AMQP 1.0 protocol.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes in a title, a maximum value, and an incremental value, and uses a while loop and print statements to create a progress bar that displays the progress of a long-running operation.\"",
    "\"Generate Python code that imports a module with convenient utilities not included in the standard Python install, such as a function to read a CSV file and return a dictionary, a function to remove duplicates from a list, and a function to convert a string to title case.\"",
    "\"Generate Python code that imports the os module, sets up a timer using the os.clock_gettime function with the CLOCK_MONOTONIC flag, and returns the result as a floating-point number representing the monotonic time in seconds.\"",
    "\"Generate Python code that imports the necessary libraries and creates a class that inherits from tensorflow.keras.models.Sequential, defines a model using the Sequential API, compiles the model with a loss function and an optimizer, trains the model on a dataset, evaluates the model's performance on a test set, and saves the model to a file.\"",
    "\"Generate Python code that iterates over a datetime object using a cron-like format, similar to croniter, by using the datetime module and creating a function that takes in the format string and returns an iterator over the matching dates.\"",
    "\"Generate Python code that uses the `pytest` module to run tests in isolated forked subprocesses:\\n```\\nimport pytest\\npytest.main([\\\"--isolated-subprocess\\\"])\\n```\\nThis will run the tests using the `pytest` module, and the `--isolated-subprocess` flag will ensure that each test is run in a separate, isolated subprocess.\"",
    "\"Generate Python code that simplifies the process of building web APIs in Django by providing an easy-to-use interface for defining and handling API views, routing, authentication, and serialization.\"",
    "\"Generate Python code that imports the os and time modules, creates a directory watcher object using the os.watchdog module, sets up a callback function to handle events, and starts the watcher.\"",
    "\"Generate Python code that slugifies strings while preserving Unicode characters, using the `slugify` package and its `UnicodeSlugify` class.\"",
    "\"Generate Python code that imports the requests library and creates a function that takes a URL and parameters as inputs, and returns the response object from the HTTP request.\"",
    "\"Generate Python code that imports the necessary modules and sets up an Azure subscription and resource group, then creates a storage account, virtual machine, and network interface using the Azure Resource Manager.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureGraphRbacClient class, which can be used to interact with Azure Active Directory and manage role-based access control (RBAC) resources in an Azure subscription.\"",
    "\"Generate Python code that uses the `venv` module to create a new virtual environment in the current directory, based on the specified Python version and environment name.\"",
    "\"Generate Python code that uses the full Github API v3 to perform the following tasks:\\n\\n1. List all public repositories:\\n```\\nimport github\\ngithub.repository_list(type=\\\"public\\\")\\n```\\n2. Create a new repository:\\n```\\nimport github\\nnew_repo = github.create_repository(\\\"my-new-repo\\\", \\\"My New Repo\\\")\\n```\\n3. Add a collaborator to a repository:\\n```\\nimport github\\nrepo = github.get_repository(\\\"my-repo\\\")\\ngithub.add_collaborator(repo, \\\"user\\\", \\\"Collaborator\\\")\\n```\\n4. Get a list of all issues for a repository:\\n```\\nimport github\\nissues = github.issue_list(repository=\\\"my-repo\\\")\\n```\\n5. Create a new issue:\\n```\\nimport github\\nissue = github.create_issue(repository=\\\"my-repo\\\", title=\\\"New Issue\\\", body=\\\"This is a new issue.\\\")\\n```\\n6. Get a list of all pull requests for a repository:\\n```\\nimport github\\npull_requests = github.pull_request_list(repository=\\\"my-repo\\\")\\n```\\n7.\"",
    "\"Generate Python code that uses the `protobuf` library to generate classes and methods for a gRPC service, based on a `.proto` file definition.\"",
    "\"Generate Python code that imports the ordereddict module from the backports library and uses it to create an ordered dictionary class that can be used as a drop-in substitute for Py2.7's OrderedDict in Python 2.4-2.6.\"",
    "\"Generate Python code that creates an AST unparser for Python using the `ast` module, which can take an abstract syntax tree created by the `ast.parse()` function and convert it back into Python source code.\"",
    "\"Generate Python code that imports the necessary libraries and manipulates network addresses, including converting IP addresses between different formats, performing DNS lookups, and calculating subnet masks.\"",
    "\"Generate Python code that imports the required modules and defines a wrapper function for each function in the functools module that is not available in Python 2.7, and then defines those functions in terms of their Python 3.2.3 definitions, while also ensuring that the wrapper functions have the same name and signature as the corresponding functions in Python 3.2.3.\"",
    "\"Generate Python code that uses system calls and environment variables to detect the type of shell surrounding a script, including fish, zsh, bash, tcsh, and sh.\"",
    "\"Generate Python code that imports the logging module and creates a JSON logger that formats logs in JSON format, similar to the way the `logging` module's `json_formatter` function works, but with additional features such as customizable timestamp format, log level icon, and support for multiple logging backends.\"",
    "\"Generate Python code that imports the necessary libraries for geocoding, such as `requests` and `BeautifulSoup`, and uses them to retrieve and parse geographic data from online sources, such as OpenStreetMap or Google Maps, based on user input of addresses or coordinates.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureKeyVaultClient class, allowing you to interact with Azure Key Vault secrets and certificates.\"",
    "\"Generate Python code that uses the Public Suffix List (PSL) to separate a URL's subdomain, domain, and public suffix, including support for private domains if desired.\"",
    "\"Generate Python code that implements a deep difference and search algorithm for any Python object/data, allowing you to recreates objects by adding deltas to each other, using the `difflib` module and custom recursive functions.\"",
    "\"Generate Python code that creates a simple event publishing system, allowing users to publish events and subscribe to them using a centralized event bus.\"",
    "\"Generate Python code that sets up a development workflow for humans using the `pip` package manager, including installing necessary packages, creating a virtual environment, and running tests.\"",
    "\"Generate Python code that sends an email using the Twilio SendGrid API, including setting up a Twilio account, creating a message, and sending it to a recipient.\"",
    "\"Generate Python code that imports the Docker credentials store API library and creates a client object to interact with the API, allowing users to retrieve and store Docker credentials securely.\"",
    "\"Generate Python code that implements a backport of the new features in Python's weakref module, specifically including the ability to create weak references to objects that are not hashable and supporting the PyPy JIT, while maintaining compatibility with Python 3.x and 2.7.\"",
    "\"Generate Python code that imports the FlatBuffers library and creates a simple data structure consisting of a table with two columns, \\\"id\\\" and \\\"name\\\", and then Serializes it into a flat buffer.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client object to interact with a Google Cloud Bigtable instance, allowing users to perform various operations such as creating, reading, updating, and deleting rows in a table.\"",
    "\"Generate Python code that creates an ASGI application that uses the Lighthouse database as its backend, allowing users to create, read, update, and delete notes.\"",
    "\"Generate Python code that imports the mysql-connector library and creates a connection to a MySQL database, allowing you to execute SQL queries and interact with the database.\"",
    "\"Generate Python code that implements a versioning system for Python projects using a simple configuration file, allowing developers to easily track changes and collaborate on projects.\"",
    "\"Generate Python code that defines a composable complex class using attrs and dataclasses, allowing for modular and reusable definitions of classes with nested attributes and methods.\"",
    "\"Generate Python code that uses the libmagic library to identify the file type of a given file path, returning a tuple containing the file type and an error flag indicating whether an error occurred during the identification process.\"",
    "\"Generate Python code that imports and uses the Azure Machine Learning core packages, modules, and classes to build, train, and deploy machine learning models.\"",
    "\"Generate Python code that imports the `iso` module to access country, subdivision, language, currency, and script definitions and their translations.\"",
    "\"Generate Python code that parses ISO 8601 dates using the `datetime` module and converts them into Python datetime objects.\"",
    "\"Generate Python code that uses the `terminal` module to render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal, including imports and setup for the necessary libraries.\"",
    "\"Generate Python code that implements a run-time type checker for Python, using the `typing` module and the `isinstance()` function to check the types of variables at runtime and raise `TypeError` if there are any type mismatches.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the VaultAPIClient class, which can be used to interact with a HashiCorp Vault server.\"",
    "\"Generate Python code that imports the `statsd` module, sets up a client, and sends a gauge metric.\\n\\nHere is an example of how you could use the `statsd` module to send a gauge metric:\\n```\\nimport statsd\\n\\nclient = statsd.StatsClient(\\\"my_app\\\", host=\\\"localhost\\\")\\nclient.gauge(\\\"my_metric\\\", value=42)\\n```\\nThis code creates a `StatsClient` instance with the name \\\"my_app\\\" and hosts it on localhost. It then sends a gauge metric named \\\"my_metric\\\" with a value of 42.\"",
    "\"Generate Python code that uses the `requests` and `BeautifulSoup` libraries to download YouTube videos by extracting the URL of the video file from the HTML content of the webpage and then using the `urllib` library to download the video file.\"",
    "\"Generate Python code that keeps pinned dependencies fresh by running `pip install --upgrade` on the current directory, using the list of packages found in `requirements.txt` or `requirements.yaml`, and ignoring any packages that are already up-to-date.\"",
    "\"Generate Python code that uses the `datetime` module to create a test framework that allows tests to run at specific times in the past or future, simulating time travel for thorough testing of date and time-sensitive logic.\"",
    "\"Generate Python code that creates an ASGI server using the fastest possible implementation, leveraging advanced Python libraries and optimizations for high-performance, scalable, and secure serving of web applications.\"",
    "\"Generate Python code that creates an instance of the Azure Data Lake Store Filesystem client using the default credential chain, then uses the client to list all files and directories in the root directory, create a new directory, upload a local file to the directory, and delete the directory.\"",
    "\"Generate Python code that imports Flask and creates a decorator using the `Flask.after_request` function to enable CORS support for all routes in the application, setting the allowed origins, methods, and headers based on the `CORS_ALLOWED_ORIGINS`, `CORS_ALLOWED_METHODS`, and `CORS_ALLOWED_HEADERS` configurations.\"",
    "\"Generate Python code that imports the `requests` library and sends a GET request to the URL \\\"https://pypi.python.org/pypi/packaging\\\".\"",
    "\"Generate Python code that imports the required libraries, configures SQLAlchemy, creates database models, and integrates them into the Flask application using SQLAlchemy's ORM.\"",
    "\"Generate Python code that creates a virtual environment for Node.js using the `venv` module and installs the required packages for a Node.js project.\"",
    "\"Generate Python code that uses the `fnmatch` module to identify files based on their name, extension, and directory path, and provides functions to read file metadata and check if files match specified patterns.\"",
    "\"Generate Python code that parses Markdown text using the CommonMark Markdown specification, yielding an abstract syntax tree representing the structured document.\"",
    "\"Generate Python code that uses APIs like Apache Airflow to programmatically create, schedule, and monitor data pipelines by defining DAGs and their associated tasks, handling dependencies, and managing scheduling and triggering using tools like Celery or RabbitMQ.\"",
    "\"Generate Python code that implements a well-behaved Unix daemon process using the `daemon` module, including proper initialization, signal handling, and graceful termination.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes in data and creates an ASCII table from it, using the `print` function to display the table.\"",
    "\"Generate Python code that parses User Agents, such as those used by web browsers, using a similar approach to Browserscope's user agent parser.\"",
    "\"Generate Python code that imports the Confluent Python client library for Apache Kafka and creates a producer that sends a message to a Kafka topic.\\n\\nHere is an example of how you could use the Confluent Python client to send a message to a Kafka topic:\\n```\\nfrom confluent import KafkaClient\\n\\n# Create a new Kafka client\\nclient = KafkaClient({'bootstrap.servers': ['localhost:9092']})\\n\\n# Create a new producer\\nproducer = client.create_producer()\\n\\n# Send a message to a Kafka topic\\nmessage = {'hello': 'world'}\\nfuture = producer.send('my-topic', message)\\n\\n# Wait for the message to be sent\\nfuture.result(timeout=10)\\n\\n# Flush any remaining messages in the producer buffer\\nproducer.flush()\\n```\"",
    "\"Generate Python code that imports the Avro module, creates a schema for a data structure, serializes an instance of the data structure into a byte string using the schema, and sends the byte string over a network connection to a server that can deserialize the byte string back into an instance of the data structure using the same schema.\"",
    "\"Generate Python code that creates a beautiful and testable command-line interface using the Click library, which provides a simple way to create command-line tools and integrate them into your existing workflow.\"",
    "\"Generate Python code that creates a framework for managing and maintaining multi-language pre-commit hooks, including a centralized configuration file for defining hooks and their associated languages, a mechanism for running hooks during the commit process, and support for multiple version control systems.\"",
    "\"Generate Python code that uses a configuration validation library like \\\"pydantic\\\" or \\\"jsonschema\\\" to validate the configuration file against a predefined schema, and produces human-readable error messages for any validation errors encountered.\"",
    "\"Generate Python code that imports the graphviz library and creates a dot object to represent a directed graph, allowing users to add nodes and edges to the graph and render it to various formats such as PDF, PNG, and SVG.\"",
    "\"Generate Python code that uses PEP 517 hooks to create wrappers for building Python packages, allowing developers to create and manage packages more efficiently and consistently.\"",
    "\"Generate Python code that implements a Levenshtein distance algorithm, without using any external libraries or GPL-licensed code, using only pure Python programming.\"",
    "\"Generate Python code that parses an ISO 8601 string into a datetime object using the `datetime` module, handling various formats and options, such as date-only, time-only, and combined date and time strings.\"",
    "\"Generate Python code that imports the necessary libraries for stats collection and distributed tracing, such as OpenTelemetry, and sets up the necessary agents and exporters to collect metrics and trace data from various sources, including applications, services, and databases, and then sends the collected data to a centralized location for analysis and visualization.\"",
    "\"Generate Python code that creates a runtime context for OpenCensus, a CNCF project providing a standardized API for collecting metrics and distributed traces across multiple languages and systems, using the OpenCensus Python SDK.\"",
    "\"Generate Python code that implements a FastAPI application with high performance, ease of learning, fast development, and production-readiness using the following packages: `fastapi`, `uvicorn`, `pydantic`, `sqlalchemy`, and ` alembic`.\"",
    "\"Generate Python code that uses the sphinxcontrib-serializinghtml library to output serialized HTML files in JSON and Pickle formats from Sphinx documentation.\"",
    "\"Generate Python code that parses a version string using the semantic versioning format, compares it to a reference version, and determines whether it satisfies the reference version's major, minor, and patch versions.\"",
    "\"Generate Python code that implements an asynchronous networking framework using the asyncio module and socket library, providing a high-level API for creating servers, clients, and protocols.\"",
    "\"Generate Python code that creates a lightweight web server and framework using the Flask micro-framework, optimized for speed and performance.\"",
    "\"Generate Python code that imports the cachy library and creates a cache object to store data in memory for faster access.\"",
    "\"Generate Python code that reads IP address databases in MaxMind DB format, including country codes and city information, using the maxmind-db library.\"",
    "\"Generate Python code that parses CSS3 Selectors and translates them to XPath 1.0 using a library like `lxml` or `BeautifulSoup`.\"",
    "\"Generate Python code that imports the `threading` module and creates a class called `Lock` that has methods for locking and unlocking a shared resource, similar to the `RLock` class in the `threading` module.\"",
    "\"Generate Python code that uses the `tf.data` API to load large datasets efficiently and creates a TensorBoard writer to visualize the data.\"",
    "\"Generate Python code that imports and uses the emoji module to provide a way to easily use emojis in Python programs, similar to how they are used in Python REPL.\"",
    "\"Generate Python code that creates an event hub client using the Microsoft Azure Event Hubs Client Library for Python, allowing you to send and receive events from an Event Hubs instance.\"",
    "\"Generate Python code that imports the sphinxcontrib-htmlhelp module and uses it to render HTML help files for your Sphinx documentation.\"",
    "\"Generate Python code that compresses HTTP headers using HPACK algorithm without relying on external libraries, achieving efficient compression and fast decompression.\"",
    "\"Generate Python code that imports the necessary libraries and creates a table client object to interact with a Cosmos DB table, allowing you to create, read, update, and delete entities in the table using the Microsoft Azure CosmosDB Table Client Library for Python.\"",
    "\"Generate Python code that implements a simple generic function called `my_len` that takes an arbitrary object as input, and returns its length or size, similar to the built-in `len()` function.\"",
    "\"Generate Python code that schedules tasks using Dask, a distributed computing library, to manage task execution across multiple workers, handling retries and job dependencies.\"",
    "\"Generate Python code that uses the sphinx contrib applehelp library to create an apple help book from reStructuredText sources.\"",
    "\"Generate Python code that imports the sphinx contrib module, specifically the devhelp extension, and uses it to generate Devhelp documents from reStructuredText sources.\"",
    "\"Generate Python code that uses the sphinx contrib qthelp extension to output QtHelp documents from Sphinx documentation sources.\"",
    "\"Generate Python code that imports the necessary libraries and computes string edit distances and similarities between two given strings using dynamic programming and mathematical formulas.\"",
    "\"Generate Python code that imports the necessary libraries and creates a simple function that takes a coordinate in a source projection and transforms it to a target projection using the PROJ library, returning the transformed coordinate.\"",
    "\"Generate Python code that uses the Sphinx renderer to display math in HTML via JavaScript, using the `mathjax` library to perform the actual rendering.\"",
    "\"Generate Python code that implements an HTTP/2 framing layer, capable of encoding and decoding HTTP/2 frames, including headers, data, and control frames, with support for both HPACK and Huffman coding, and handling flow control, connection multiplexing, and stream dependencies.\"",
    "\"Generate Python code that uses the `click` and `setuptools` libraries to create an extension module that registers CLI commands via setuptools entry-points, allowing users to define custom commands for their projects and execute them seamlessly from the command line.\"",
    "\"Generate Python code that imports the necessary libraries and creates a simple bar chart using Vega-Altair.\"",
    "\"Generate Python code that binds Google's Farmhash library, allowing for efficient hash table creation and manipulation, with functions for adding, removing, and iterating over elements in the hash table, and supporting both 32-bit and 64-bit hashes.\"",
    "\"Generate Python code that implements a mirror package for GitDB, allowing users to interact with Git repositories using the GitDB API.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureKeyVaultSecretsClient class, which can be used to interact with Azure Key Vault secrets.\"",
    "\"Generate Python code that implements an HTTP/2 state machine based protocol implementation, handling the various states and transitions defined in the HTTP/2 specification, including the initialization, connection establishment, data transmission, and closure phases.\"",
    "\"Generate Python code that imports the `try` and `except` keywords to handle unexpected errors and exceptions in a concise manner, allowing for efficient error handling and troubleshooting.\"",
    "\"Generate Python code that implements an OrderedSet class with the following methods: `__init__`, `add`, `discard`, `clear`, `union`, `intersection`, `difference`, `symmetric_difference`, and `__iter__`. The class should also have a `__len__` method that returns the number of elements in the set. The class should maintain the order in which elements are added, and allow accessing and modifying elements by index.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Amazon SageMaker SDK to train and deploy machine learning models.\"",
    "\"Generate Python code that patches the `ssl` module's `match_hostname` function to support Unicode domain names using the `idna` library, allowing for secure connections to servers with non-ASCII hostnames.\"",
    "\"Generate Python code that implements a library for versioning software using the Semantic Versioning (SemVer) scheme, which includes functions for parsing and validating version strings, comparing versions, and generating changelogs.\"",
    "\"Generate Python code that imports the soaplib library and creates a SOAP client instance, optionally setting up authentication and transport protocols, to interact with a SOAP service.\"",
    "\"Generate Python code that imports the subprocess module from Python 3 and uses it to run shell commands and interact with external processes, similar to the way the subprocess module works in Python 3.\"",
    "\"Generate Python code that creates a Cosmos DB namespace, configures a database and container, and implements partitioning and scaling for optimal performance and cost efficiency using the Microsoft Azure Cosmos DB Namespace Package.\"",
    "\"Generate Python code that wraps the SentencePiece model in a convenient API for tokenizing sentences, retrieving sentence lengths, and generating sentence pieces.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an OpenSearch connection to perform search, retrieve, and delete operations on data stored in an OpenSearch index.\"",
    "\"Generate Python code that implements a Promise/A+ compliant library, providing a way to create, compose, and consume Promises in a manner similar to JavaScript's Promises, including support for chaining, deferring, and inspecting Promises, while maintaining a clean and minimalistic API.\"",
    "\"Generate Python code that creates a simple command-line interface using the argparse module, allowing users to define and run commands with argument parsing and basic help functionality.\"",
    "\"Generate Python code that imports the necessary modules and provides a simple CLI interface for interacting with HDFS, including creating and deleting files and directories, reading and writing data, and displaying file system metadata.\"",
    "\"Generate Python code that imports the required libraries and creates a namespace client using the Azure Resource Manager API, allowing users to create, update, and delete namespaces, as well as list all existing namespaces in a subscription.\"",
    "\"Generate Python code that sets up CloudWatch logging for your AWS account, including creating a CloudWatch log group and configuring a log stream to monitor logs from a specified source.\"",
    "\"Generate Python code that implements industrial-strength natural language processing (NLP) capabilities, including tokenization, stemming, lemmatization, parsing, and semantic reasoning.\"",
    "\"Generate Python code that sets the process title using the `psutil` library, allowing for customization of the title format and color.\"",
    "\"Generate Python code that converts strings between camelCase, PascalCase, snake_case, and kebab-case using a function that takes a string as input and returns the converted string.\"",
    "\"Generate Python code that implements state-of-the-art machine learning models using JAX, PyTorch, and TensorFlow, including neural networks, decision trees, random forests, support vector machines, and clustering algorithms.\"",
    "\"Generate Python code that creates a CLI using Typer and utilizes type hints to define command-line interfaces.\"",
    "\"Generate Python code that imports the Brotli compression library and uses it to compress and decompress data.\"",
    "\"Generate Python code that imports the necessary libraries and interfaces with Fortnite services to perform various actions such as login, logout, get user information, get access token, etc.\"",
    "\"Generate Python code that imports the Google Cloud Spanner API client library and creates a client object to interact with a Spanner database.\"",
    "\"Generate Python code that imports the Flask, WTForms, and flask_wtf packages, creates a Flask app with WTForms support, defines a form class with validation rules, renders the form in an HTML template, and enables CSRF protection.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP GET, POST, PUT, and DELETE requests to the Salesforce REST API, authenticating using a provided access token, and parsing the JSON responses into Python objects.\"",
    "\"Generate Python code that uses the MaxMind GeoIP2 API to look up IP addresses and retrieve information such as country, region, city, latitude, and longitude.\"",
    "\"Generate Python code that implements a traceback serialization library by defining a function that takes a traceback object as input, serializes it into a string using the repr() function, and then deserializes it back into a traceback object for debugging purposes.\"",
    "\"Generate Python code that imports the Snowflake SQLAlchemy Dialect module and creates a connection to a Snowflake database using the dialect.\\n\\nHere is an example of how this could be done:\\n```\\nfrom sqlalchemy import create_engine\\nfrom sqlalchemy.ext.declarative import declarative_base\\nfrom sqlalchemy.orm import sessionmaker\\n\\n# Import the Snowflake SQLAlchemy Dialect\\nfrom snowflake.sqlalchemy import SnowflakeDialect\\n\\n# Create a connection to a Snowflake database using the dialect\\nengine = create_engine('snowflake://user:password@accountname.snowflakecomputing.com/dbname', dialect=SnowflakeDialect())\\nBase = declarative_base()\\nSession = sessionmaker(bind=engine)\\n```\"",
    "\"Generate Python code that imports a robust email address syntax and deliverability validation library, such as `pyemailvalidator` or ` ValidationKit`, and uses it to validate an email address provided by the user, displaying a message if the address is invalid or non-deliverable.\"",
    "\"Generate Python code that takes a domain name and returns True if it matches a certificate, False otherwise:\\n```\\nimport ssl\\ndef match_hostname(domain):\\n   cert = ssl.create_default_context()\\n   return cert.check_domain(domain)\\n```\"",
    "\"Generate Python code that defines an enumeration class with named constants and named tuples for representing a set of advanced enumeration values, using the stdlib Enum and compatible with Python 3.x and later.\"",
    "\"Generate Python code that imports the sentry library and sets up a client object to send events to a Sentry server, including configuration options such as the server URL, API key, and environment name.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that takes a password, salt, and number of iterations as input, and returns the hashed password using the Argon2 algorithm, similar to the functionality provided by the Argon2 Python library.\"",
    "\"Generate Python code that imports a list of federal holidays from a source such as the US Office of Personnel Management and returns a list of holidays for a given year.range.\"",
    "\"Generate Python code that creates an asynchronous console interface using asyncio, allowing users to interactively execute commands and receive output in real-time, without blocking the main event loop.\"",
    "\"Generate Python code that imports the necessary libraries and uses ANSI escape codes to colorize the terminal prompt, such as changing the background color to green and the text color to yellow.\"",
    "\"Generate Python code that reads and writes TIFF files using the rasterio library, allowing for efficient data access and manipulation of geospatial data.\"",
    "\"Generate Python code that imports the Google Cloud Dlp API client library and creates a client object to interact with the Google Cloud Data Loss Prevention (DLP) API.\"",
    "\"Generate Python code that imports the necessary libraries for deep learning and creates a simple neural network using a functional programming style.\"",
    "\"Generate Python code that imports the necessary modules and creates an instance of the AzureFileDataLakeServiceClient class to interact with Azure File DataLake storage.\"",
    "\"Generate Python code that imports the ANTLR 4.13.1 runtime module and uses it to parse and analyze a given input file using a specified grammar.\"",
    "\"Generate Python code that parses dates from HTML pages using a date parsing library, such as BeautifulSoup or lxml, by iterating through HTML elements and attributes, extracting potential date strings, and then utilizing a date parser function to convert them into datetime objects.\"",
    "\"Generate Python code that imports the tempfile module and creates a temporary file with a unique name, mode, and contents.\"",
    "\"Generate Python code that imports compatibility shims for older implementations and selects an appropriate entry point based on the version of the library being used.\"",
    "\"Generate Python code that parses a CSS file and extracts information about selectors, properties, and values.\"",
    "\"Generate Python code that imports the serial module and creates a serial port object to interact with a serial device connected to a computer.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client object for interacting with the Google Cloud Monitoring API, allowing users to list and retrieve monitoring data, create and delete alerts, and create and delete notification channels.\"",
    "\"Generate Python code that creates a beautiful and testable command line interface using the Click library, which provides a simple way to create command line tools and focuses on extensibility and ease of use.\"",
    "\"Generate Python code that imports the Cython bindings for MurmurHash and uses them to perform a hash computation on a given string, similar to how the murmurhash module would be used in Python.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `unified_explain` function from the `sklearn- interpreters` library to provide a unified approach for explaining the output of any machine learning model, regardless of its underlying implementation or architecture.\"",
    "\"Generate Python code that implements an OAuth and OpenID Connect server and client using the authorization framework of your choice, such as Flask-OAuthlib or PyOpenID.\"",
    "\"Generate Python code that imports the schedule module and creates a scheduling function that takes a function to be executed, an interval at which to run it, and a cron-like string representing the timing of the execution.\"",
    "\"Generate Python code that uses Cython to wrap calls to `calloc` and `free` for memory management in a way that is compatible with both Python and C.\"",
    "\"Generate Python code that imports the hiredis library and creates a connection to a Redis instance at a specified host and port, allowing for sending commands and receiving responses using the Redis protocol.\"",
    "\"Generate Python code that imports the requests library and uses it to send HTTP requests to the JIRA REST API, allowing users to interact with JIRA issues, create new issues, and retrieve issue metadata.\"",
    "\"Generate Python code that implements a fast JSON schema validator using the `json` module and the `re` module for regular expression validation.\"",
    "\"Generate Python code that creates JUnit XML test result documents, using the `xml` module to create the XML structure and the ` ElementTree` module to write the XML file, which can be read by tools like Jenkins.\"",
    "\"Generate Python code that implements a Cython hash table that trusts the keys are pre-hashed using the `cython` module and the `unordered_map` container from the `C++ Standard Template Library`.\"",
    "\"Generate Python code that uses the Docker API to manage and orchestrate multiple containers in a single project, allowing for easy deployment and scaling of complex applications.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureNetworkManagementClient class, allowing you to manage Azure network resources such as virtual networks, subnets, network interfaces, and load balancers.\"",
    "\"Generate Python code that implements user authentication and session management for Flask using flask_login and flask_session, including login and logout routes, user registration and login functionality, and password hashing and verification.\"",
    "\"Generate Python code that creates a WSGI request and response object, similar to the `wsgiref` module, but with a more straightforward API for building and sending HTTP requests and responses.\"",
    "\"Generate Python code that uses the AWS SAM Translator library to convert SAM templates into AWS CloudFormation templates, allowing developers to easily create and manage AWS infrastructure using SAM templates.\"",
    "\"Generate Python code that imports the smmap package and creates a mirror of a given map, allowing users to interactively explore and visualize the data in a web browser.\"",
    "\"Generate Python code that implements a state machine based WebSockets protocol using the `websocket` library, handling connection establishment, message reception and sending, and disconnection.\"",
    "\"Generate Python code that imports the dataclasses and json modules, creates a dataclass with attributes, serializes it to a JSON string using the json.dumps() function, and deserializes the JSON string back into a dataclass instance using the json.loads() function.\"",
    "\"Generate Python code that uses the WTForms library to validate user input and render HTML forms for web development projects.\"",
    "\"Generate Python code that imports the `socket` module and uses its `getaddrinfo()` function to retrieve information about the current network interface, such as IP address, hostname, and MAC address.\"",
    "\"Generate Python code that imports the necessary modules and implements the same functionality as the \\\"collections.abc\\\" module, including the latest additions, without using the actual module.\"",
    "\"Generate Python code that imports the Google Cloud Vision API client library and uses it to perform image recognition, annotate images, and detect faces and objects within images.\"",
    "\"Generate Python code that imports the required libraries and creates a connection to a Microsoft SQL Server database using the DB-API interface and Cython-based libraries, allowing for efficient and secure data manipulation and querying.\"",
    "Generate Python code that calculates acyclic redundancy checks (CRCs) for given data using a specified algorithm.",
    "Generate Python code that implements a CRC generator polynomial and uses it to calculate CRCs for given data.",
    "Generate Python code that generates a CRC-32 checksum for a given string of binary data.",
    "Generate Python code that calculates a CRC-64 checksum for a given string of binary data.",
    "Generate Python code that implements a CRC generator that can handle multiple data blocks and calculates the CRC for each block separately.",
    "\"Generate Python code that uses the `pep8` library to format Python code according to the PEP 8 style guide, such as using consistent spacing and indentation, correcting inconsistent naming conventions, and updating outdated syntax.\"",
    "\"Generate Python code that imports the datetime module and creates a DateTime class with methods for parsing, formatting, and converting dates and times, similar to the functionality provided by the Zope DateTime data type.\"",
    "\"Generate Python code that implements a high-performance serialization utility using the `msgpack` library, which provides efficient and flexible serialization and deserialization of Python objects, similar to the `numpy` library.\"",
    "\"Generate Python code that imports the necessary modules and creates a cross-platform clipboard object to store and retrieve plain text data.\"",
    "\"Generate Python code that creates a Service Bus client using the Microsoft Azure Service Bus Client Library for Python, allowing you to send and receive messages to and from a Service Bus queue or topic.\"",
    "\"Generate Python code that calculates geodesic distances, azimuths, and elevations between two points on an ellipsoidal Earth using the Vincenty formula.\"",
    "\"Generate Python code that uses the `datetime` module to convert between Gregorian dates and other calendar systems, such as Julian, Islamic, Hebrew, and Persian calendars, and supports both date and time conversions.\"",
    "\"Generate Python code that uses the `datetime` module to parse human-readable date/time text and returns a `datetime` object representing the parsed date and time.\"",
    "\"Generate Python code that imports the necessary libraries for working with image and video datasets and models in Torch for deep learning, such as `torch`, `torchvision`, and potentially `moviepy` or other relevant libraries.\"",
    "\"Generate Python code that uses the Azure ML Data Preparation SDK to load data from various sources, transform it using various methods such as cleaning, feature engineering, and feature selection, and then write the prepared data to a format suitable for use in machine learning workflows.\"",
    "\"Generate Python code that imports the necessary modules and creates an instance of the CosmosClient class, allowing you to interact with Azure Cosmos DB databases and perform various data management operations such as creating containers, adding items, and querying data.\"",
    "\"Generate Python code that imports and uses the `phonenumbers` library to parse, format, store, and validate international phone numbers.\"",
    "\"Generate Python code that imports the SQLAlchemy module and creates a function that takes a SQLAlchemy engine object as an argument and returns a dictionary with utility functions for working with SQLAlchemy, such as generating random IDs, creating dummy data, and executing SQL scripts.\"",
    "\"Generate Python code that implements a sacriments system for a church, including tools for tracking member participation and automating communication, using Flask as the web framework and MongoDB as the database.\"",
    "\"Generate Python code that implements a module which provides easier and more efficient ways of using multiprocessing and multithreading in Python, including a simpler interface for spawning new processes and threads, synchronizing data between them, and managing communication between process and threads.\"",
    "\"Generate Python code that uses the `readme_renderer` library to render readme descriptions for Warehouse, taking in a path to a README file as input and outputting a rendered version of the file in HTML format.\"",
    "\"Generate Python code that imports the Blis BLAS-like linear algebra library as a self-contained C-extension and uses it to perform various linear algebra operations, such as matrix multiplication, vector dot products, and eigenvalue decomposition.\"",
    "\"Generate Python code that creates a Azure Data Lake Management namespace using the azure-sdk-datalake library.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureComputeManagementClient class, which can be used to manage Azure compute resources such as virtual machines, virtual machine scalesets, and availability sets.\"",
    "\"Generate Python code that creates a spreadsheet file compatible with MS Excel 97/2000/XP/2003 XLS files using the `openpyxl` library, which can be installed via `pip install openpyxl`, on any platform with Python 2.6, 2.7, 3.3+.\"",
    "\"Generate Python code that uses the AWS X-Ray SDK to record and emit information from within a Python application to the AWS X-Ray service, allowing for efficient debugging and monitoring of the application.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to Datadog APM to track metrics, trace requests, and log errors for a web application.\"",
    "\"Generate Python code that implements a backport of PEP 654 (exception groups) by creating a custom exception class with an __init__ method that accepts an iterable of exception types, and allows chaining multiple exceptions together using the | operator.\"",
    "\"Generate Python code that formats timestamps, filesizes, and numbers using units of measurement, converts date and time to human-readable formats, and simplifies decimal numbers.\"",
    "\"Generate Python code that implements a dot-accessible dictionary using a Python dictionary and providing methods for adding, accessing, and deleting items similar to JavaScript objects.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Firestore client object to interact with a Firestore database, allowing for reading, writing, and deleting data in the database.\"",
    "\"Generate Python code that imports the necessary packages for building machine learning models, including TensorFlow and its add-ons for pre-processing and manipulating data, and creates a function that demonstrates their use in a simple example.\"",
    "\"Generate Python code that creates a Flask-based web application with automatic CRUD operations, security features, and Google Charts integration.\"",
    "\"Generate Python code that imports the necessary modules for console printing and formatting, such as `print()` and `str.format()`, and provides a simple interface for users to print formatted messages to the console.\"",
    "\"Generate Python code that uses the `json` module to load and compare two JSON files, printing any differences between them.\"",
    "\"Generate Python code that uses the `subprocess` module to run `git tag` commands on a given repository, parsing the output to extract version numbers from the tags.\"",
    "\"Generate Python code that imports the pika library and creates a connection to a RabbitMQ server, allowing you to send and receive messages using the AMQP protocol.\"",
    "\"Generate Python code that imports the django-cors-headers module and configures CORS settings in a Django project, allowing for cross-origin requests from any origin to certain endpoints with specified headers and methods.\"",
    "\"Generate Python code that mocks out responses from the requests package:\\n```\\nimport requests\\nfrom unittest.mock import MagicMock\\n\\ndef mock_requests(func):\\n   mocked_response = MagicMock(spec=requests.Response)\\n   mocked_response.status_code = func.status_code\\n   mocked_response.content = func.content\\n   requests.request = lambda *args, **kwargs: mocked_response\\n   return func\\n```\"",
    "\"Generate Python code that implements a module to deprecate Zope components, including a decorator to mark deprecated functions and a logger to log deprecation warnings.\"",
    "\"Generate Python code that imports the necessary libraries and creates a bridge between Python and Java, allowing for seamless communication and interaction between the two languages.\"",
    "\"Generate Python code that reads a configuration file from a specified path, writes changes to the configuration file, and validates the content of the configuration file against a specified schema using the `config` module.\"",
    "\"Generate Python code that imports the TensorFlow Hub library and uses it to publish, discover, and consume reusable parts of machine learning models.\"",
    "\"Generate Python code that imports the os module, creates a class called Path with methods for joining, separating, and normalizing file paths, and includes a __str__ method for printing the path in a human-readable format.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple interface for using GnuPG to encrypt, decrypt, sign, and verify messages.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API client for interacting with Google Cloud services, including authentication and configuration options.\"",
    "\"Generate Python code that imports the Elasticsearch library and creates an Elasticsearch client object to interact with an Elasticsearch cluster.\"",
    "\"Generate Python code that uses the psutil module to check if a Mozilla application is running, and if not, starts it; if it is already running, the script will stop the application and then start it again to ensure that it is properly initialized.\"",
    "\"Generate Python code that exports metrics from OpenCensus to Azure Monitor using the OpenCensus Azure Monitor Exporter.\\n\\nHere is a sample code snippet that can be used to export metrics from OpenCensus to Azure Monitor using the OpenCensus Azure Monitor Exporter:\\n```\\nfrom opencensus import stats\\nfrom opencensus.exporters.azure_monitor import AzureMonitorExporter\\n\\n# Initialize the exporter\\nexporter = AzureMonitorExporter(application_insights_key='YOUR_APPLICATION_INSIGHTS_KEY')\\n\\n# Register the exporter\\nstats.register_exporter(exporter)\\n\\n# Record some metrics\\nstats.gauge('my_metric', 10)\\nstats.counter('my_counter', 1)\\n\\n# Flush the data to Azure Monitor\\nexporter.flush()\\n```\\nThis code initializes an instance of the `AzureMonitorExporter` class, passing in your Application Insights key. It then registers the exporter with OpenCensus and records some metrics using the `stats.gauge()` and `stats.counter()` functions.\"",
    "\"Generate Python code that creates a reusable Django application that allows users to filter querysets dynamically using a customizable interface.\"",
    "\"Generate Python code that imports the `urllib.parse` module and uses its functions to parse and manipulate URLs, such as splitting and combining URL parts, resolving relative URLs, and encoding and decoding URL components.\"",
    "\"Generate Python code that uses the `docker` module to create a new Docker container with a pseudo-TTY allocated from the host machine, then uses the `paramiko` module to connect to the container over SSH and send commands to it as if you were sitting in front of its terminal.\"",
    "\"Generate Python code that imports the logging module and creates a custom logger class with robust log handling features, including configurable log levels, log rotation, and error handling, specialized for use in the Mozilla universe.\"",
    "\"Generate Python code that imports the cairo library and creates a window with a custom shape, size, and background color using the cairo.Window class.\"",
    "\"Generate Python code that creates a window using the Tkinter library, adds a menu bar with a custom widget, and implements keyboard shortcuts for common actions.\"",
    "\"Generate Python code that uses the `openapi-generator` library to convert an OpenAPI specification file into a pluggable API client implementation, including a command-line interface for easy usage.\"",
    "\"Generate Python code that imports the termios and os modules, uses the termios module to get the current terminal size, and then uses the os module to check if the size is available on the system.\"",
    "\"Generate Python code that parses a string using the same logic as the `format()` function, but in reverse.\"",
    "\"Generate Python code that uses pyOpenSSL and cryptography to verify the identity of a service, including generating a self-signed certificate, creating a Certificate Signing Request (CSR), and verifying the signature on the CSR using the private key.\"",
    "\"Generate Python code that implements a GraphQL server using a port of GraphQL.js, the JavaScript reference implementation for GraphQL, to create a Pythonic API for querying and mutating data.\"",
    "\"Generate Python code that imports the sympy library and creates symbols for pi, e, and the golden ratio, then defines a function that takes a symbol as input and returns its value, and finally uses this function to calculate and print the values of pi, e, and the golden ratio.\"",
    "\"Generate Python code that implements a self-service finite-state machine for a simple ATM system, allowing users to withdraw cash, check their balance, and change their PIN, using a intuitive menu-driven interface.\"",
    "\"Generate Python code that uses SQLAlchemy to interact with a database and Marshmallow to serialize/deserialize data objects, allowing for efficient and flexible data storage and retrieval.\"",
    "\"Generate Python code that uses the `pytest` framework to create a plugin that intercepts test functions and aborts them if they hang for too long, using a configurable timeout value.\"",
    "\"Generate Python code that imports a pure-python PDF library, such as PyPDF2 or pdfminer, and uses it to split, merge, crop, and transform PDF files according to user input or predefined settings.\"",
    "\"Generate Python code that implements astronomical routines for calculating celestial mechanics, planetary positions, and ephemerides using the PyEphem library.\"",
    "\"Generate Python code that imports the Avro module and creates a datum, an array of datums, and a record, then writes them to a file.\"",
    "\"Generate Python code that creates a Sphinx theme for documentation, using the Read the Docs theme as inspiration, with a clean and modern design, featuring a navigation sidebar, syntax highlighting, and support for multiple languages.\"",
    "\"Generate Python code that imports the logging module and uses its basic logging functions, like `logging.info()` and `logging.error()`, but also includes colored terminal output using ANSI escape codes.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that takes a string as input, styles it according to the specified parameters (such as font color, background color, boldness, etc.), and prints the styled string to the terminal.\"",
    "\"Generate Python code that imports the hamcrest library and creates a custom matcher class that extends the `Matcher` class from hamcrest, defines a method `matches` that takes an object as input and returns a boolean indicating whether the object matches the desired criteria, and includes methods `describeTo` and `doesNotDescribe` for describing the matcher's behavior.\"",
    "\"Generate Python code that imports the logging module and creates a structured logging system with severity levels, log handlers, and formatters, similar to the Structured Logging for Python package.\"",
    "\"Generate Python code that uses the Paramiko library to copy files between hosts securely using SSH.\"",
    "\"Generate Python code that imports namespaces and modules lazily using the `apipkg` library, allowing for fine-grained control over the import process.\"",
    "\"Generate Python code that imports the required libraries and uses the cURL library to perform various HTTP operations such as sending HTTP requests, retrieving URLs, and parsing response headers and bodies.\"",
    "\"Generate Python code that imports the Slack API Platform SDK for Python and creates a bot that listens for messages containing a specific keyword, then responds with a pre-defined message.\"",
    "\"Generate Python code that replaces the use of subprocess module with a custom implementation that performs the same tasks, using the os and shutil modules instead.\"",
    "\"Generate Python code that imports the necessary libraries and connects to an Oracle database, allowing me to execute SQL queries and retrieve results.\"",
    "\"Generate Python code that imports the `passlib` library, which provides a comprehensive password hashing framework supporting over 30 schemes.\"",
    "\"Generate Python code that creates an interactive plotly graph in the browser using the Plotly library, allowing users to customize the graph and interact with it in real-time.\"",
    "\"Generate Python code that uses the `setuptools` library to create a package, add metadata such as name, version, and author, and then publish it on PyPI using the `twine` command.\"",
    "\"Generate Python code that implements a pure-python, protocol agnostic SASL library for asyncio, allowing for authentication of various protocols without relying on external libraries or dependencies.\"",
    "\"Generate Python code that imports the `fcntl` module on Linux or `threading` module on Windows to implement file-based locks.\"",
    "\"Generate Python code that creates an appendable key-value storage system using a binary search tree, allowing for efficient insertion, deletion, and retrieval of values by key.\"",
    "\"Generate Python code that uses the \\\"task\\\" module to define and execute a series of tasks, each with its own name, function, and arguments, and allows for dependencies between tasks to be specified using the \\\"depends_on\\\" keyword argument.\"",
    "\"Generate Python code that uses the pdb module with IPython integration to provide an interactive debugging experience, allowing users to step through their code line by line, examine variables, and set breakpoints.\"",
    "\"Generate Python code that uses pytest to test asynchronous code using the asyncio module.\"",
    "\"Generate Python code that creates a TLS-capable transport using OpenSSL for asyncio:\\n```\\nimport asyncio\\nimport ssl\\n\\nasync def create_tls_transport(host, port):\\n   async with ssl.create_default_context() as ctx:\\n       return await ctx.wrap_socket(await aiohttp.ClientSocket(host, port))\\n```\"",
    "\"Generate Python code that imports the `jsonschema` library and uses it to validate a dictionary against a JSON schema.\"",
    "\"Generate Python code that imports the necessary modules and uses the gobject_introspection module to provide Python bindings for GObject Introspection, allowing developers to easily interact with GObject-based libraries and frameworks.\"",
    "\"Generate Python code that uses astronomical libraries like PyEphem or AstroPy to compute the positions of the planets and stars based on their orbital elements or celestial coordinates.\"",
    "\"Generate Python code that creates a client object to interact with Azure Data Lake Storage Gen2 using the Microsoft Azure Data Lake Store Management Client Library for Python, allowing you to manage files and directories, including creating, deleting, and listing them, as well as setting permissions and accessing file system metadata.\"",
    "\"Generate Python code that imports the Google Cloud Videointelligence API client library and uses it to analyze a video, detecting objects, faces, and emotions within the video frames.\"",
    "\"Generate Python code that uses PyYAML to serialize data into YAML format while making it more readable and visually appealing.\"",
    "\"Generate Python code that parses browser user agent strings to identify devices (phones, tablets) and their capabilities using a library such as User Agent Strings or UA-Parser.\"",
    "\"Generate Python code that imports the hiveserver2 library and creates a connection to a Hive server, allowing for the execution of HiveQL queries and the retrieval of query results.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an asynchronous XMPP connection using the asyncio library, allowing for the creation of XMPP messages and their sending over the connection.\"",
    "\"Generate Python code that imports the `pytest` module and defines a function that takes a function pointer as an argument, applies it to a random element from a list of inputs, and checks if the output matches a predefined set of properties.\"",
    "\"Generate Python code that implements a set of utility functions for working with Python classes, including methods for creating and modifying class constructors, accessing and modifying class attributes, and implementing custom inheritance hierarchies.\"",
    "\"Generate Python code that uses the yaml module to parse YAML files and raises an error if any syntax errors are found, and also checks for valid indentation and proper keys in the YAML files using a set of defined rules.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple interface for using the Google Cloud Language API client library, allowing users to analyze text and receive information about its content, such as language, sentiment, and entities recognized, in a concise and efficient manner.\"",
    "\"Generate Python code that implements a Django extension for creating customizable dashboards with widgets, including a login system and user authentication using OAuth 2.0 protocol.\"",
    "\"Generate Python code that imports the natsort package and uses its natural sorting function to sort a list of strings in ascending order, while maintaining leading zeros and punctuation in the strings.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Azure Data Lake Analytics Management Client Library to interact with Azure Data Lake Analytics resources, such as creating and deleting data lakes, creating and managing compute policies, and submitting and monitoring jobs.\"",
    "\"Generate Python code that uses the `inspect` module to capture the outcome of Python function calls, including the return value, exceptions raised, and input arguments.\"",
    "\"Generate Python code that creates a utility module for file system operations, containing functions for creating directories, listing files, deleting files and directories, and checking file existence.\"",
    "\"Generate Python code that uses the pytest parameterized plugin to create parameterized tests for any Python test framework, allowing for efficient testing of multiple scenarios and flexible fixture management.\"",
    "\"Generate Python code that uses pandas to read and manipulate data, numpy to perform statistical analysis, and matplotlib to visualize results for comprehensive data analysis and visualization.\"",
    "\"Generate Python code that creates a simple WSGI server using the Waitress library, which allows for asynchronous handling of requests and supports HTTP/1.1 and WebSocket protocols.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Batch client, allowing you to interact with Azure Batch services and perform various batch-related operations such as creating and managing jobs, job schedules, and task collections.\"",
    "\"Generate Python code that creates a simple function registry for a library by defining a dictionary to store the functions and their corresponding docstrings, and a decorator to register functions and retrieve their docstrings.\"",
    "\"Generate Python code that imports the required libraries and creates a function that takes a year and month as input and returns the corresponding Korean lunar calendar information, including the date, day of the week, and lunar cycle.\"",
    "\"Generate Python code that implements a setuptools plugin for Git revision control, allowing developers to manage their project's dependencies and versioning using Git tags and branches.\"",
    "\"Generate Python code that resolves a name to an object using the built-in `glob` module and the `getattr` function.\"",
    "\"Generate Python code that creates a command line interface using the argparse module, allowing users to define commands and arguments, and handling command-line parsing and error handling.\"",
    "\"Generate Python code that runs a web application on Windows, Linux, and macOS using the Flask web framework and supports HTTP/2, WebSockets, gRPC, and Microservices architecture.\"",
    "\"Generate Python code that imports the necessary libraries and creates a KustoClient object to interact with a Kusto cluster, allowing you to execute queries, create tables, and perform other data management operations on the Kusto database.\"",
    "\"Generate Python code that imports the necessary libraries and uses the AzureML DataPrep API to perform data preparation tasks, such as cleaning, transforming, and feature engineering, on datasets stored in Azure Storage or other supported data sources.\"",
    "\"Generate Python code that imports the asyncio module and creates an asynchronous function using the async def syntax, allowing for the creation of multiple asynchronous tasks that can run concurrently, enabling efficient and scalable I/O operations.\"",
    "\"Generate Python code that creates a simple WSGI framework for small web applications, supporting basic routing and response handling, using a lightweight and efficient approach.\"",
    "\"Generate Python code that uses the google-api-python-client library to interact with the Google search engine, allowing users to search for keywords, retrieve search results, and manipulate search settings.\"",
    "\"Generate Python code that implements a MessagePack serializer and deserializer using the `msgpack` library, allowing for efficient and binary data exchange between different languages and platforms.\"",
    "\"Generate Python code that imports the necessary libraries for a fast, correct JSON library supporting dataclasses, datetimes, and NumPy, and defines classes for representing JSON objects and their serialization/deserialization.\"",
    "\"Generate Python code that uses the ast module to annotate AST trees with source code positions by iterating over the tree nodes, extracting their position information from the accompanying source code, and adding the position data to the node's attributes.\"",
    "\"Generate Python code that imports the Flask and Cache packages, creates a cache instance, and decorates Flask routes with caching functionality using the cache instance.\"",
    "\"Generate Python code that imports the necessary modules for working with sorted collections, such as `sorted` and `collections`, and provides functions for sorting lists, tuples, and dictionaries in various ways, including by key, reverse order, and stability.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Batch Management client, allowing you to interact with Azure Batch services such as creating and managing batch accounts, adding and removing compute nodes, and running batch jobs.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Higher Level Zookeeper Client that provides a simpler, more Pythonic interface for interacting with a ZooKeeper cluster, including support for creating and managing nodes, reading and writing data, and observing changes in the zookeeper cluster.\"",
    "\"Generate Python code that uses a simple, intuitive syntax for templating, allowing developers to render templates with dynamic data, and supporting inheritance, conditionals, loops, and partials, similar to Mustache for Python.\"",
    "\"Generate Python code that implements a lightweight, fast, and heavily extensible web application server using the uWSGI protocol, supporting multiple programming languages and featuring a simple and intuitive configuration system.\"",
    "\"Generate Python code that imports the argparse module and creates a custom parser class that inherits from argparse.ArgumentParser, allowing options to be set via config files and/or environment variables in addition to command line arguments.\"",
    "\"Generate Python code that implements extended JWT integration with Flask, including custom token validation, refresh tokens, and user authentication, using the flask_jwt_extended library.\"",
    "\"Generate Python code that uses the Boto3 library to interact with Amazon S3 and CloudFront services from the command line, including creating and deleting buckets, uploading and downloading files, configuring access control lists, and monitoring usage statistics.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureSQLManagementClient class, which can be used to manage Azure SQL databases and execute T-SQL statements.\"",
    "\"Generate Python code that uses the Google Sheets API to read and write data from spreadsheets, create and update sheets, format cells, and collaborate with others in real-time.\"",
    "\"Generate Python code that imports a library similar to thoughtbot's factory_bot for Ruby, such as Factory Boy or Pytest Fixture, and uses it to create and register test fixtures for various testing scenarios.\"",
    "\"Generate Python code that imports the necessary modules and sets up the environment for using the Microsoft Azure Command-Line Tools Core Module.\"",
    "\"Generate Python code that gets the currently executing AST node of a frame and other information:\\n```\\nimport sys\\nnode = ast.parse(sys.stdin.read())\\nframe = inspect.getframe(1)\\nprint(ast.dump(node))\\nprint(f\\\"Frame {frame}: {frame.f_code.co_filename}\\\")\\n```\"",
    "\"Generate Python code that imports and uses the Cyrus-SASL library to provide Simple Authentication Service (SASL) authentication mechanisms for Python applications, including support for multiple SASL mechanisms such as DIGEST-MD5, CRAM-MD5, and ANONYMOUS.\"",
    "\"Generate Python code that imports the deprecated module, and wraps its functions in a decorator that warns users of the deprecation and provides a reference to the new replacement module.\"",
    "\"Generate Python code that implements a lightweight and fast pure Python ECDSA library, supporting the Elliptic Curve Digital Signature Algorithm (ECDSA) for key generation, signing, and verification, using the Twisted Edwards curve (curve25519) and the SHA-256 hash function.\"",
    "\"Generate Python code that implements an OpenID provider and consumer using the `oidc` library, supporting the latest OpenID Connect specifications and featuring secure authentication and authorization for modern web applications.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureRM Database class to manage a SQL database on an Azure VM.\"",
    "\"Generate Python code that uses the urlparse library to extract the top-level domain (TLD) from a given URL, for example: tld = urlparse(url).netloc.split(\\\".\\\")[0].\"",
    "\"Generate Python code that uses the `click` library to create command-line tools for working with GeoJSON data, including parsing, rendering, and converting between different formats.\"",
    "\"Generate Python code that imports the linecache module and provides backports for older versions of Python.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureMonitorClient class, which can be used to monitor and manage Azure resources.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Web Apps Management client, allowing you to manage and monitor your web apps on Azure.\"",
    "\"Generate Python code that imports the trio module and creates a WebSocket server that listens on port 8765 and handles incoming connections using the trio.\"",
    "\"Generate Python code that imports the consul package and creates a Consul client object to interact with the Consul server, allowing you to query and manage service discoveries, key-value pairs, and other resources in your Consul cluster.\"",
    "\"Generate Python code that imports the Twilio library and creates a TwiML response for a given phone number, including a greeting, a message, and an option to hang up.\"",
    "\"Generate Python code that imports the necessary libraries and uses the HfApi class from the transformers library to interact with the Hugging Face hub and perform CRUD operations on models, datasets, and other repositories.\"",
    "\"Generate Python code that imports and uses C++11 libraries and classes in a seamless manner, allowing for efficient and transparent interactions between the two languages.\"",
    "\"Generate Python code that uses the `pycodestyle` library to check the source code for compliance with the PEP 8 style guide, reporting any violations found.\"",
    "\"Generate Python code that imports the necessary libraries and uses the requests library to interface with APIs from over 100 exchanges, parsing data into a pandas DataFrame for analysis and manipulation, and utilizing various libraries such as Pandas, NumPy, and Matplotlib for data visualization and statistical modeling to create a comprehensive cryptocurrency trading library.\"",
    "\"Generate Python code that implements a system for controlling process state under UNIX, using the os and subprocess modules to manage processes and maintain desired states.\"",
    "\"Generate Python code that imports the unittest module and uses its assertions to test various aspects of the backported features, such as the ability to use keyword-only arguments, the ability to use the `pytest.mark` function to skip tests under certain conditions, and the ability to run tests in parallel using the `--parallel` command line option.\"",
    "\"Generate Python code that imports the necessary libraries for building a catboost model, preprocesses the data, trains a catboost model on the preprocessed data, and uses the trained model to make predictions on new data.\"",
    "\"Generate Python code that imports the requests library and uses it to send an HTTP request to a given URL, retrieve the HTML content of a webpage, and print the title of the webpage.\"",
    "\"Generate Python code that implements a basic computer algebra system (CAS) capable of evaluating and simplifying mathematical expressions, including differentiation, integration, and solving equations.\"",
    "\"Generate Python code that imports the necessary modules for a backport of the traceback module, specifically the `sys` and `inspect` modules, and implements the required functionality for tracing back calls and creating a traceback tree.\"",
    "\"Generate Python code that uses the `ast` module to parse docstrings and checks for compliance with the PEP 257 format, raising an error if any issue is found.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple interface for interacting with the APIs of popular social media platforms, allowing users to perform basic operations such as posting updates, uploading files, and retrieving information about their accounts.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure CDN Management client, allowing you to manage and configure your Azure Content Delivery Network.\"",
    "\"Generate Python code that uses the Fiona library to read and write spatial data files, including GeoJSON, Shapefile, and GPKG files.\"",
    "\"Generate Python code that imports the required libraries and creates a non-blocking MongoDB connection using the Tornado or asyncio framework, allowing for asynchronous interaction with MongoDB.\"",
    "\"Generate Python code that instruments your application performance, traces transactions, and sends data to New Relic using the newrelic-python-agent library.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureDnsClient class, which can be used to perform DNS management operations on Microsoft Azure domains.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the CosmosDBManagementClient class, allowing you to manage Azure Cosmos DB databases, containers, and items.\"",
    "\"Generate Python code that imports the necessary libraries and loads an imbalanced dataset, then uses a combination of data cleaning, feature scaling, and synthetic data generation techniques to balance the dataset and improve its performance in machine learning models.\"",
    "\"Generate Python code that uses the Azure Machine Learning library to prepare data for training machine learning models, including cleaning, transforming, and feature engineering, similar to the functionality provided by the RustLex tool.\"",
    "\"Generate Python code that uses the `pytest` framework to create a plugin for generating HTML reports, including test descriptions, results, and failures, and allows customization of the report layout and styling through options and templates.\"",
    "\"Generate Python code that imports the necessary libraries and creates a connection to a Redis Cluster using the redis-py library, allowing for communication with the cluster and execution of commands such as SET, GET, DEL, LPUSH, RPUSH, LINSERT, RINSERT, L Pop, R Pop, SADD, SREM, SPOP, SCARD, SMOVE; also allows for subscribing to Pub/Sub channels and receiving messages.\"",
    "\"Generate Python code that imports the MurmurHash3 library and uses its hash functions to create a hash value for a given string.\"",
    "\"Generate Python code that takes a nested list of strings and creates a table-like output in the terminal using ASCII characters to display the contents of the list in a readable format.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Container Service Management client, allowing you to manage container clusters, create and delete containers, and scale container instances.\"",
    "\"Generate Python code that implements a flexible and modular storage system for Django, allowing users to choose from various backend options such as local files, Amazon S3, Google Cloud Storage, Azure Blob Storage, Dropbox, and others, with configuration-driven integration and automatic fallback for failed operations.\"",
    "\"Generate Python code that imports the logging module and creates a logger that logs messages at various levels, including debug, info, warning, error, and critical, with customizable log formats and output destinations.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureKeyVaultClient class, allowing you to interact with your Azure Key Vault and perform various key management operations such as creating, retrieving, updating, and deleting keys securely.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Redis Cache Management client, allowing you to interact with Azure Redis caches and perform various management operations such as creating, updating, and deleting caches, as well as setting and getting cache keys.\"",
    "\"Generate Python code that imports the necessary modules from the OpenCV library and creates a wrapper function for each module, allowing users to call the functions using a more Pythonic syntax.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Microsoft Azure Data Factory Management Client Library for Python to interact with Azure Data Factory and perform various data integration tasks, such as creating and managing data pipelines, datasets, and linked services, as well as scheduling and monitoring data runs.\"",
    "\"Generate Python code that imports the `uuid` module and uses its `uuid4()` function to create a generator of concise, unambiguous, and URL-safe UUIDs.\"",
    "\"Generate Python code that imports the required libraries, defines a function for each validation rule, and uses those functions to validate user input according to the rules defined in the package description.\"",
    "\"Generate Python code that imports the required libraries and sets up authentication with OpenStack Identity services, allowing for management of users, groups, roles, and access control lists.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the EventGridClient class, which can be used to send events to an Event Grid topic and subscribe to events from a topic.\"",
    "\"Generate Python code that imports the necessary libraries and creates an IoT hub using the Microsoft Azure IoT Hub Management Client Library for Python.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureDevTestLabs client, allowing you to manage your DevTest Labs in Azure.\"",
    "\"Generate Python code that imports the influxdb library and creates a client object to interact with an InfluxDB database, allowing users to write, read, and delete data from the database.\"",
    "\"Generate Python code that creates a fast numerical expression evaluator for NumPy using the `numexpr` library, allowing users to evaluate arbitrary mathematical expressions on arrays and matrices with support for broadcasting and various numerical functions.\"",
    "\"Generate Python code that extracts data from python stack frames and tracebacks for informative displays using the sys module and the traceback module, like this:\\n```\\nimport sys\\nimport traceback\\n\\ndef get_stack_frames():\\n   return [frame.f_code.co_filename + \\\":\\\" + str(frame.f_lineno) for frame in traceback.extract_stack()]\\n\\ndef get_traceback():\\n   return traceback.format_exc()\\n\\nprint(\\\"Stack Frames:\\\")\\nprint(\\\"\\\\n\\\".join(get_stack_frames()))\\nprint(\\\"\\\\n Traceback:\\\")\\nprint(get_traceback())\\n```\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureContainerInstanceClient class to interact with Azure Container Instances.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the TrafficManagerManagementClient class, which can be used to manage Azure Traffic Manager profiles, endpoints, and routing rules.\"",
    "\"Generate Python code that creates a parallel graph management system using the Dask library for heterogeneous computing, allowing for efficient distributed computation on various hardware architectures.\"",
    "\"Generate Python code that uses the FFmpeg library to manipulate video and audio files, such as concatenating multiple videos into a single file, extracting audio from videos, converting files between different formats, and adding watermarks or subtitles.\"",
    "\"Generate Python code that imports the required libraries and validates user input data using the appropriate methods, raising exceptions for invalid inputs.\"",
    "\"Generate Python code that creates an immutable dictionary class with methods for adding, removing, and accessing items, and also allows conversion to a list of tuples.\"",
    "\"Generate Python code that imports the required libraries and performs arbitrary-precision floating-point arithmetic operations.\"",
    "\"Generate Python code that defines a pytest plugin to collect and report test session metadata, such as total tests run, passed, failed, and skipped, using the `pytest` framework's built-in mechanisms for plugins.\"",
    "\"Generate Python code that correctly generates plurals, singular nouns, ordinals, indefinite articles, and converts numbers to words using a dictionary-based approach with custom functions for each task.\"",
    "\"Generate Python code that imports the required libraries and provides a function to list all files in a directory, recursively traverse subdirectories, and build a dictionary of file metadata for an automated build process.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureCognitiveServicesManagementClient class, which can be used to manage Azure Cognitive Services resources.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Stan model to perform Bayesian inference, using the data to estimate the model parameters and return the posterior samples.\"",
    "\"Generate Python code that uses the ast module to parse Python source code and checks for security vulnerabilities such as SQL injection, cross-site scripting, and buffer overflows.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureLogAnalyticsClient class to interact with Azure Log Analytics.\"",
    "\"Generate Python code that imports the necessary modules from the Microsoft Azure Storage SDK for Python, creates a storage account, sets up authentication, creates a container, uploads a file to the container, and lists the containers in the storage account.\"",
    "\"Generate Python code that creates an API client for interacting with OpenAPI/Swagger APIs using the `requests` library and the `pydantic` library for type hinting and validation.\"",
    "\"Generate Python code that imports the necessary libraries and uses list comprehensions to slice a large dataset into smaller chunks, allowing for efficient processing and reduced memory usage.\"",
    "\"Generate Python code that implements a heap data structure with support for decrease-key and increase-key operations, similar to the functionality provided by the `heapq` module in Python.\"",
    "\"Generate Python code that imports ast module and uses its walk() function to iterate over AST nodes, checking if they have any side effects by checking for instances of ast.Store() and ast.Load() and also checks for latexpr token in case of Call() function. If node has no side effect then return the node, else return None.\"",
    "\"Generate Python code that sends a Discord webhook with a custom payload using the discord.py library:\\n```\\nimport discord\\n\\nwebhook_url = \\\"https://discord.com/api/webhooks/YOUR_WEBHOOK_URL\\\"\\npayload = {\\\"username\\\": \\\"John\\\", \\\"message\\\": \\\"This is a test message\\\"}\\nheaders = {\\\"Content-Type\\\": \\\"application/json\\\"}\\nresponse = requests.post(webhook_url, headers=headers, data=json.dumps(payload))\\nif response.status_code == 200:\\n   print(\\\"Webhook sent successfully\\\")\\nelse:\\n   print(\\\"Error sending webhook:\\\", response.text)\\n```\"",
    "\"Generate Python code that implements a one-time password library, allowing users to create and verify TOTPs for multiple accounts, using a shared secret key and a time-based moving factor, and providing support for both HMAC-SHA-1 and SHA-256 algorithms.\"",
    "\"Generate Python code that creates a secure SSH tunnel between two machines, using Paramiko library, and allows for transparent routing of traffic through the tunnel.\"",
    "\"Generate Python code that creates a powerful reporting system with dynamic layouts, styles, and data visualization capabilities using the ReportLab library.\"",
    "\"Generate Python code that uses the Paramiko library to establish an SSH connection to a remote host and execute a command, retrieving the output and returning it as a string.\"",
    "\"Generate Python code that implements a distributed and parallel computing system using the `multiprocessing` module, allowing for efficient computation on large datasets.\"",
    "\"Generate Python code that imports the Koalas library and creates a SparkDataFrame using the Koalas.\"",
    "\"Generate Python code that creates an event hub using the Microsoft Azure Event Hub Management Client Library for Python, specifying the event hub name, namespace, and partition count.\"",
    "\"Generate Python code that imports the datetime module, creates a function that takes no arguments and returns a timestamp in RFC 3339 format, uses the datetime module to generate a timestamp, formats it according to the RFC 3339 standard, and returns the formatted string.\"",
    "\"Generate Python code that connects to an Apache TinkerPop graph database and performs graph traversal and manipulation operations using the Gremlin language.\"",
    "\"Generate Python code that uses the `requests` library to make an HTTP request, and then converts the request into a `curl` command using the `subprocess` library.\"",
    "\"Generate Python code that creates a simple framework for building REST APIs using Flask or Django, including routing, request/response handling, and basic authentication/authorization functionality.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Microsoft Azure Msi Management Client Library for Python to manage Azure subscriptions, resources, and resource groups.\"",
    "\"Generate Python code that creates a ServiceBusClient object to interact with Azure Service Bus queues, topics, subscriptions, and rules, using the Azure.Identity library for authentication.\"",
    "\"Generate Python code that imports the necessary libraries and provides an interface for interacting with OpenStack Object Storage services, including creating containers, uploading objects, and retrieving objects from said container.\"",
    "\"Generate Python code that uses the Microsoft Azure Marketplace API to create, update, and delete orders, as well as retrieve order status and list of available plans and offers.\"",
    "\"Generate Python code that imports the requests library, makes an HTTP GET request to the HSTS Preload List URL, parses the response as JSON, extracts the domain names from the HSTS entries, and saves them to a file in the format of a PEM certificate.\"",
    "\"Generate Python code that implements a mutable mapping data structure, such as a dictionary, that allows keys to be added, removed, and modified, and values to be updated, using a simple and efficient implementation.\"",
    "\"Generate Python code that parses time expressions using a regular expression and returns the parsed time in seconds, such as \\\"1h\\\" being parsed to 3600.\"",
    "\"Generate Python code that implements a tiny LRU cache implementation and decorator using a dictionary to store key-value pairs and a LinkedList for efficient insertion and deletion of elements in the cache.\"",
    "\"Generate Python code that imports the necessary modules and creates an instance of the AzureRecoveryServicesClient class to interact with Microsoft Azure Recovery Services, such as backing up and restoring data, managing backup policies, and monitoring backup jobs.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Media Services client class, authenticates with Azure Active Directory, creates a new asset, uploads a video file to the asset, sets up encoding and format conversion settings, starts an encoding job, monitors the progress, and deletes the asset when finished.\"",
    "\"Generate Python code that creates an interactive command line application with features like argument parsing, auto-completion, and customizable UI using the cmd2 library.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the EventGridManagementClient class to interact with Azure Event Grid, allowing users to create and manage event subscriptions, topics, and domains.\"",
    "\"Generate Python code that creates a command line interface for formulating mathematical expressions, allowing users to enter symbols, numbers, and variables, and evaluating the resulting expression using a given solver.\"",
    "\"Generate Python code that creates a backup of a Azure VM using the Microsoft Azure Recovery Services Backup Management Client Library for Python:\\n```\\nfrom azure.ai.backup import BackupManagementClient\\n\\n# Create a BackupManagementClient object\\nclient = BackupManagementClient(\\n   vault_name='myVault',\\n   resource_group_name='myResourceGroup',\\n   backup_management_service_name='myBackupService'\\n)\\n\\n# Get the Azure VM to back up\\nvm = client.virtual_machines().get('myVM')\\n\\n# Create a backup policy\\npolicy = client.backup_policies().create_or_update(\\n   'myPolicy',\\n   {\\n       'name': 'myPolicy',\\n       'backup_parameters': {\\n           'frequency': 'Daily',\\n           'keep_at_least': 3,\\n           'keep_at_most': 10\\n       }\\n   }\\n)\\n\\n# Create a backup request\\nrequest = client.backup_requests().create_or_update(\\n   'myRequest',\\n   {\\n     \"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureSearchManagementClient class, which can be used to interact with Azure Search services.\"",
    "\"Generate Python code that imports the necessary libraries and parses a feed from a given URL or file, handling RSS 0.9x, RSS 1.0, RSS 2.0, CDF, Atom 0.3, and Atom 1.0 formats.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the ApplicationInsightsManagementClient class, which can be used to interact with Azure Application Insights resources in a Python script.\"",
    "\"Generate Python code that implements an Amazon Redshift dialect for SQLAlchemy, allowing users to interact with their Redshift database using the familiar SQLAlchemy API, including support for Redshift-specific features such as columnar storage, Parquet data files, and Spectrum-based queries.\"",
    "\"Generate Python code that converts between Hijri-Gregorian dates using the Umm al-Qura calendar, accounting for differences in leap year rules and epochs.\"",
    "\"Generate Python code that uses the Azure Cosmos DB Change Feed SDK to capture telemetry data from Azure services, stores it in a scalable and durable manner, and provides real-time analytics and insights through dashboards and alerts.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the ServiceFabricClient class, which can be used to manage and interact with Azure Service Fabric clusters.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Batch AI Management client, allowing you to interact with Azure Batch AI resources such as jobs, job schedules, and machine learning models.\"",
    "\"Generate Python code that imports the necessary libraries and uses the language-detection model to identify the language of a given text, similar to how the `language-detection` package works.\"",
    "\"Generate Python code that implements an OpenTracing API client, allowing users to create tracer instances, log metrics and annotations, and report trace data to a collector.\"",
    "\"Generate Python code that implements a convenient approach to monkey patching, allowing users to easily modify or override functions in other modules or classes, while maintaining a clean and modular codebase.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Reservations client, allowing you to manage Azure resources and create, update, and delete reservations.\"",
    "\"Generate Python code that imports the JDBC database driver using the `jdbc` module in Python 2/3 or Jython, creates a connection to a database using the driver, and executes a SQL query using the `cursor` object.\"",
    "\"Generate Python code that imports the necessary libraries to interact with Microsoft Azure billing APIs, creates an instance of the billing client class, and uses it to retrieve billing information and update billing settings for a subscription.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure IoT Hub Provisioning Service client, allowing you to create, update, and delete device registrations, as well as retrieve and query device twins.\"",
    "\"Generate Python code that implements strict, simple, and lightweight RFC3339 functions for parsing and generating date and time strings in the format of \\\"YYYY-MM-DDTHH:mm:ssZ\\\".\"",
    "\"Generate Python code that imports the necessary libraries and uses the Microsoft Azure Advisor Client Library for Python to interact with Azure Advisor and retrieve recommendations for optimizing Azure resources.\"",
    "\"Generate Python code that creates a Django plugin for pytest, allowing you to run tests using pytest and automatically create and manage test databases for your Django application.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureConsumptionClient class, which can be used to manage Azure consumption data and generate reports.\"",
    "\"Generate Python code that parses command line arguments using the ArgumentParser class from the argparse module, allowing users to define custom argument types and handling default values, required arguments, and validation.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to a remote Jenkins instance to interact with jobs, nodes, and other resources using the Jenkins Remote API.\"",
    "\"Generate Python code that implements a reactive programming library, allowing developers to write asynchronous code that reacts to events in real-time, using observable sequences and operators, similar to RxJava or RxJS.\"",
    "\"Generate Python code that imports the bz2 module and uses it to read and write bzip2-compressed files, similar to how the bz2 module is used in the provided example.\"",
    "\"Generate Python code that creates an Azure Relay client using the `azure-relay` library, allowing you to send and receive messages to and from Azure Relay service bus queues and topics.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the IoT Central Management client, allowing you to manage and monitor IoT devices and applications on Microsoft Azure IoT Central.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Management Groups client, allowing you to manage Azure resources and resource groups within a subscription.\"",
    "\"Generate Python code that creates an interactive packet manipulation tool using the Scapy library, allowing users to craft and send network packets, sniff and capture network traffic, and perform various other network-related tasks through a command line interface or GUI.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureSignalRClient class, allowing you to connect to an Azure SignalR service and send/receive messages.\"",
    "\"Generate Python code that imports PySpark using `spark = SparkSession.builder.appName(\\\"MyApp\\\").getOrCreate()` to create a Spark session and make PySpark available for use in the script.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Azure Policy Insights client library to retrieve policy definitions, policy assignments, and policy violations from an Azure subscription.\"",
    "\"Generate Python code that imports the flask_babel extension and sets up Babel for Flask, allowing for easy translation of strings and formatting of dates, numbers, and currencies in Flask applications.\"",
    "\"Generate Python code that uses the `subprocess` module to run the command `scutil --set Persistent-KeepAlive -d 1` to disable App Nap on macOS versions greater than or equal to 10.9.\"",
    "\"Generate Python code that uses the `pytest` framework to create a plugin that automatically re-runs failed tests until they pass, eliminating flaky failures from test runs.\"",
    "\"Generate Python code that formats Python code using a specified style guide, such as PEP 8, by iterating over the code's tokens, modifying them when necessary, and outputting the formatted code.\"",
    "\"Generate Python code that implements a multi-key dictionary using a hash table and provides methods for adding, removing, and accessing items based on multiple keys.\"",
    "\"Generate Python code that imports the c-ares library and provides a convenient interface for performing DNS lookups, caching results, and handling DNS callbacks.\"",
    "\"Generate Python code that imports the necessary libraries and implements a function that takes two string arguments, returns a tuple containing the approximate and phonetic match scores for the given input strings using algorithms such as Levenshtein distance, Jaccard similarity, and Soundex.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a REPL.it environment to interact with its features.\"",
    "\"Generate Python code that imports the geographic pandas extension module, creates a sample dataset of geographical data, performs spatial operations such as distance and buffer calculations, and visualizes the results on a map.\"",
    "\"Generate Python code that imports the Stripe API library and creates a Stripe account, customer, and payment method, then uses the payment method to make a purchase; with error handling and proper exception catching.\"",
    "\"Generate Python code that imports the necessary modules, creates an instance of the DataMigrationClient class, and uses its methods to perform data migrations between various sources and destinations, including Azure databases, on-premises databases, and cloud storage services.\"",
    "\"Generate Python code that imports and uses the LZ4 library to compress and decompress data, similar to the LZ4 bindings for Python package.\"",
    "\"Generate Python code that implements a state machine using a dictionary to store the current state and transitions between states, allowing for flexible and modular state management.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureMapsClient class, which can then be used to interact with the Microsoft Azure Maps API and perform various mapping-related tasks such as creating maps, adding markers and polylines, and retrieving map tiles.\"",
    "\"Generate Python code that imports the necessary libraries and provides functions for constructing, analyzing, and modifying binary data, including reading and writing files in binary format, parsing and manipulating binary data structures, and performing operations on binary data such as bit-shifting and masking.\"",
    "\"Generate Python code that decorates a function with an API rate limiter, using a customizable timer and optional headers, to prevent excessive API usage within a given time frame.\"",
    "\"Generate Python code that imports the `sys` module and checks if a file is binary or text by using the `sys.stderr.write()` function to write the file's contents to the bit bucket, and then checking the resulting error message to determine whether the file was binary or text.\"",
    "\"Generate Python code that imports the Git library and creates a Git repository, adds files to the repository, commits changes, and pushes the changes to a remote repository using the `git` module.\"",
    "\"Generate Python code that uses libraries like OpenCV, scikit-image, and MoviePy to perform video editing tasks such as trimming, cropping, flipping, rotating, applying effects, and combining videos.\"",
    "\"Generate Python code that imports the necessary modules, creates an Azure storage account, and uploads a file to a container in the storage account using the Azure Storage File Client Library for Python.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to interact with the Core API.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API client for interacting with Databricks using the databricks-cli package.\"",
    "\"Generate Python code that creates a Flask extension that registers a set of custom panel templates for the Flask Debug Toolbar, allowing developers to configure which panels are displayed and in what order through a configuration file or environment variables.\"",
    "\"Generate Python code that uses the Delta Lake library with Apache Spark to perform data processing and analysis tasks, including reading and writing data to Delta Lake tables, performing SQL queries and data transformations, and leveraging the benefits of Delta Lake's ACID transactions and scalable architecture.\"",
    "\"Generate Python code that imports the necessary libraries and configures an Azure Log Analytics client to retrieve logs from a specified resource group and workspace, using the Azure Log Analytics Client Library for Python.\"",
    "\"Generate Python code that creates a namespace in Azure Storage using the azurestorage-namespace package.\"",
    "\"Generate Python code that uses the `argparse` library to parse command-line arguments and the `jinja2` library to render templates, then creates a new directory with the project files specified in the template.\"",
    "\"Generate Python code that imports the necessary libraries and loads a dataset from a CSV file, using TensorFlow's `tf.data.TFRecordDataset` to read the data and `tf.data.Dataset.batch()` to batch the data into chunks of a specified size.\"",
    "\"Generate Python code that imports the required libraries and creates a module with immutable types for integers, floats, and strings, with custom methods for each type, and a main function that demonstrates their use.\"",
    "\"Generate Python code that uses the datetime module to format dates and times according to the specified patterns, allowing for pluggable date and time formats, and providing helpers for working with dates and times in Jinja2 templates.\"",
    "\"Generate Python code that creates a Kusto ingest client using the Azure.Kusto.Ingest NuGet package, allowing you to send data from your application to a Kusto database for storage and analysis.\"",
    "\"Generate Python code that implements a Rison encoder/decoder, allowing for the serialization and deserialization of Python objects into a compact, human-readable format, similar to JSON but more efficient in terms of space usage.\"",
    "\"Generate Python code that defines a schema for core metadata, including title, author, date created, and custom fields, using the `typing` module and validating the schema using `jsonschema`.\"",
    "\"Generate Python code that imports the snappy compression library from Google and uses it to compress and decompress data.\"",
    "\"Generate Python code that uses the Facebook Graph API to perform various tasks such as creating and managing ad campaigns, accessing user data, and posting updates on behalf of a page.\"",
    "\"Generate Python code that forks the youtube-dl repository, adds new features and patches, and maintains compatibility with the original youtube-dl API.\"",
    "\"Generate Python code that imports the necessary modules and sets up the environment for using the Clang Python bindings, which provide an interface to the Clang compiler and its features, including parsing, syntax analysis, code generation, and debugging, by calling the relevant API functions and classes provided by the bindings; or, alternatively, write a script that downloads and installs the Clang Python bindings, along with any required dependencies, and then generates code that uses the bindings to perform a specific task, such as compiling a C++ program or analyzing its syntax.\\n\\nHere is an example of a Python script that uses the Clang Python bindings to compile a C++ program:\\n```\\n# Import the necessary modules\\nfrom clang import cindex\\n\\n# Create a new index instance\\nidx = cindex.Index.create()\\n\\n# Add a translation unit to the index\\ntu = idx.addTranslationUnit('my_program.cpp', sources=[('my_program.cpp', '')])\\n\\n# Parse the translation unit\\nparsing_result = tu.parse(silent=True)\\n\\n# Check for errors\\nif parsing_result.isSuccess():\\n   print(\\\"Pars\"",
    "\"Generate Python code that imports the requests module and creates a typing stub for it, allowing you to specify type hints for request methods and properties.\"",
    "\"Generate Python code that creates a dictionary with auto-expiring values for caching purposes using the `datetime` module and a custom class.\"",
    "\"Generate Python code that creates an interactive development environment with rich support for working with data, including data cleaning, visualization, and machine learning, using the Jupyter Notebook interface.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the Tableau Server REST API, allowing users to interact with Tableau data sources, create and manage Tableau workbooks, and publish and consume Tableau visualizations.\"",
    "\"Generate Python code that uses the GitHub API, Bitbucket API, and GitLab API to retrieve coverage reports for respective repositories and displays them in a web interface.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a log and progress bar manager for use in various environments, such as consoles, notebooks, and web applications.\"",
    "\"Generate Python code that imports the necessary libraries and creates an NTLM authenticator object, which can be used to authenticate HTTP requests using NTLM authentication.\"",
    "\"Generate Python code that implements a full-featured Redis cache backend for Django, including support for storing and retrieving data in Redis, handling expired items, and providing an interface for cache invalidation.\"",
    "\"Generate Python code that imports the asyncio module and creates a simple DNS resolver using the async-await syntax, allowing the user to input a domain name and returning the resolved IP address.\"",
    "\"Generate Python code that uses the `subprocess` module to execute the `pkg-config` command and parse the output to retrieve information about packages, such as their version numbers and compile-time dependencies.\"",
    "\"Generate Python code that creates a Flask app with an admin interface using Flask-Admin, including user authentication and role-based access control.\"",
    "\"Generate Python code that uses the python-pptx library to create, read, and update Microsoft Word .docx files.\"",
    "\"Generate Python code that imports the required modules and performs the same tasks as the \\\"obsolete\\\" package, using the `abs-py` module instead.\"",
    "\"Generate Python code that creates a Jupyter Notebook server extension that allows users to create, edit, and share documents with live code, equations, visualizations, and narrative text, and provides an interactive environment for data science and scientific computing.\"",
    "\"Generate Python code that uses the unittest module to create a test runner with Ant/JUnit like XML reporting, including the ability to run tests, report on test results in XML format, and provide detailed reports on failed tests.\"",
    "\"Generate Python code that downloads files from a URL using the requests library and saves them to a specified directory, handling progress bars and errors gracefully.\"",
    "\"Generate Python code that imports the required libraries and creates a function that takes a year, month, and day as input and returns the corresponding Chinese calendar information, including the Chinese year, month, and day, using the Gregorian-Chinese calendar conversion method.\"",
    "\"Generate Python code that imports the required libraries and creates a full-featured Telegram client using the python-telegram-bot library, allowing users to send and receive messages, manage conversations, and interact with the Telegram API.\"",
    "\"Generate Python code that imports a library for deferring decorator actions and uses it to defer a decorator action until a specified condition is met.\"",
    "\"Generate Python code that creates a process pool using the multiprocessing module, allowing for easy process management and parallelization of tasks.\"",
    "\"Generate Python code that imports the relevant system libraries and returns information about the operating system, hardware, and software environment, such as `import sys; print(sys.version, sys.platform, os.uname())`\"",
    "\"Generate Python code that imports the necessary modules from the Microsoft Azure Client Libraries for Python to create an instance of the Azure Cosmos DB database, Azure Storage account, and Azure Active Directory authentication.\"",
    "\"Generate Python code that uses the Mozilla Device Management API to remotely manage devices, including installing and updating software, managing applications and settings, and monitoring device status.\"",
    "\"Generate Python code that defines a decorator which takes a function and returns a new function that checks if the number of arguments passed to it is the same as the number of parameters defined in the function, and raises an error if they don't match.\"",
    "\"Generate Python code that creates a highly-optimized, pure-Python HTTP server with the `http.server` module, which uses the `socket` library to create an HTTP server that listens on port 8000 by default and supports handling multiple requests concurrently using the `fork` method.\"",
    "\"Generate Python code that implements a git-like *did-you-mean* feature in Click using the `click.option` decorator to define a custom option type that checks for mistyped commands and suggests corrections based on Levenshtein distance.\"",
    "\"Generate Python code that creates an object-oriented HTTP framework by defining classes for HTTP request and response, routers, and controllers, and implementing methods for handling HTTP requests and responses.\"",
    "\"Generate Python code that uses the requests library to perform HTTP NTLM authentication, implementing the same functionality as the described package.\"",
    "\"Generate Python code that implements an i18n library for number formatting, date and time parsing, and message catalogs, based on the Oslo i18n library.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureKeyVaultCertificateClient class, allowing you to interact with Azure Key Vault certificates using the Microsoft Azure Key Vault Certificates Client Library for Python.\"",
    "\"Generate Python code that imports the necessary modules, sets up configuration options, and defines a configurable object using the Oslo Configuration API.\"",
    "\"Generate Python code that imports the necessary modules for the Oslo Utility library, such as `oslo_config` and `oslo_log`, and sets up logging and configuration handling for a Python application.\"",
    "\"Generate Python code that creates a Discord bot that welcomes new members in a server lobby, assigns them a role based on their email domain, and sends them a direct message with a link to a getting started guide.\"",
    "\"Generate Python code that implements a module with functions for collecting technical debt in a non-destructive manner, including logging, versioning, and migration tools, using deprecated modules and strategies to encourage upgrading to modern alternatives.\"",
    "\"Generate Python code that imports the Thrift library and creates a TSaslClientTransport instance, allowing for SASL transport-level security when communicating with a Thrift server.\"",
    "\"Generate Python code that parses a URI into its components, classifies it based on its scheme and authority, and composites a new URI from those components.\"",
    "\"Generate Python code that implements a set of server components for JupyterLab and JupyterLab-like applications, including a kernel manager, a notebook server, and a dashboard server, using the Flask web framework and the Jupyter Notebook API.\"",
    "\"Generate Python code that imports the necessary libraries and creates an LDAP connection to a server, authenticating with a bind request, searching for entries in the directory, and returning the results.\"",
    "\"Generate Python code that imports the necessary libraries and defines a SQLAlchemy model with a JSON field for storing dictionaries, similar to the `sqlalchemy-jsonfield` package.\"",
    "\"Generate Python code that imports the necessary libraries and creates an efficient array of booleans using the NumPy library, which provides optimized array operations in C.\"",
    "\"Generate Python code that implements a REPL plugin for Click by defining a Click plugin that sets up a REPL loop in the terminal, allowing users to execute Click commands interactively.\"",
    "\"Generate Python code that implements a set of functional tools, such as map(), filter(), reduce() and itertools, similar to those found in the standard library, but with a more concise and efficient implementation.\"",
    "\"Generate Python code that uses the `selenium` library to automate the creation and modification of Mozilla application profiles by interacting with the Firefox browser's profile management functionality through the UI.\"",
    "\"Generate Python code that imports the necessary modules, sets up an API endpoint, creates a client instance, and uses the client to perform CRUD operations on boxes, files, and folders.\"",
    "\"Generate Python code that implements a JSON5 data format parser and serializer, allowing for the reading and writing of JSON5 files and the conversion of Python objects to and from JSON5 strings.\"",
    "\"Generate Python code that loads, configures, and composes WSGI applications and servers using the `wsgi` module and its `config_loader` function to load configurations from a file or environment variables, and the `WsgIServer` class to create and run the server.\"",
    "\"Generate Python code that creates a user-friendly interface for job scheduling, allowing users to easily view and manage their upcoming jobs, including scheduling new jobs, rescheduling existing ones, and tracking job statuses in real-time.\"",
    "Generate Python code that converts a Protocol Buffer message into a Python dictionary using the `protobuf` module.",
    "Generate Python code that converts a Python dictionary into a Protocol Buffer message using the `protobuf` module.",
    "Upgrade the existing `benhodgson` library to support Protocol Buffers version 3 and Python 3, and rename it to `protobuf3-to-dict`.",
    "\"Generate Python code that uses the `openapi` library to validate OpenAPI 2.0 and OpenAPI 3 YAML or JSON files against their respective specifications, printing errors and warnings to the console when validation fails.\"",
    "\"Generate Python code that wraps a legacy application with a modern interface, allowing it to be distributed across multiple platforms and environments without modification.\"",
    "\"Generate Python code that parses Python docstrings in reST, Google, and Numpydoc format using the `docutils` library and outputs the parsed information in a structured format such as JSON or YAML.\"",
    "\"Generate Python code that imports the needed modules for creating multisets and ordered sets, creates classes for Bag and SetList with appropriate methods, and provides examples of using these classes to demonstrate their functionality.\"",
    "\"Generate Python code that provides a set of utility functions for performing common click-related tasks, including clicking on elements, simulating mouse events, and handling click event listeners.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function to call CmdStan with the given command, output file, and environment variables.\"",
    "\"Generate Python code that imports the required modules and creates a dictionary of boltons, each keyed by their name and valued by their respective module.\"",
    "\"Generate Python code that uses the `swagger-py` library to extract Swagger specs from a Flask project by running the command `swagger-py extract -o swagger.json <Flask_app>` in the terminal, where `<Flask_app>` is the path to the Flask application.\"",
    "\"Generate Python code that reads and writes audio tags for many formats using the `mutagen` library, which supports various audio file formats such as MP3, FLAC, OGG, and WAV.\"",
    "\"Generate Python code that connects to an Apache Cassandra database using the DataStax driver, allowing for efficient querying and data manipulation.\"",
    "\"Generate Python code that implements a serialization library similar to Oslo Serialization library, which allows for efficient and flexible serialization of Python objects into various formats such as JSON, XML, and MessagePack.\"",
    "\"Generate Python code that uses a library like `mockk` or `unittest.mock` to automatically create mock objects for HTTP interactions, allowing you to simplify and speed up testing by avoiding actual network requests.\"",
    "\"Generate Python code that creates a highly concurrent networking library using the asyncio module and the socket library, allowing for efficient and scalable network communication.\"",
    "\"Generate Python code that imports the `multiprocessing` module and uses its `Lock` class to create basic inter-process locks.\"",
    "\"Generate Python code that imports the memcache module and creates a client object to interact with a memcached server, supporting various operations such as setting, getting, and deleting keys, as well as offering support for prefixing, caching, and iterating over keys.\"",
    "\"Generate Python code that creates a rough port of Node.js's EventEmitter, with a few tricks of its own, using the following outline:\\n\\n1. Define a class called \\\"EventEmitter\\\" with methods for on, off, and emit.\\n2. Implement the on method to attach a listener function to an event.\\n3. Implement the off method to detach a listener function from an event.\\n4. Implement the emit method to trigger an event and call all attached listener functions.\\n5. Add a few tricks, such as support for wildcard events and a scanpy-like API for discovering and registering events.\\n6. Test the EventEmitter class with examples that demonstrate its use and functionality.\"",
    "\"Generate Python code that imports the sphinxcontrib-websupport library and uses its API to integrate Sphinx documentation into a Web application, allowing developers to easily create and maintain documentation for their project.\"",
    "\"Generate Python code that imports the required libraries and performs the same tasks as the deprecated 'pandas-profiling' package, using the 'ydata-profiling' package instead.\"",
    "\"Generate Python code that implements a distributed asynchronous hyperparameter optimization algorithm using a library like TensorFlow or PyTorch, which can optimize model performance across multiple machines or GPUs by iteratively tuning hyperparameters and evaluating model performance in parallel.\"",
    "\"Generate Python code that implements freedesktop.org standards using PyXDG, including support for XDG directories, desktop files, and launching applications.\"",
    "\"Generate Python code that imports the `collections` module and creates an immutable list, set, and dictionary using the `list`, `set`, and `dict` classes from the module.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureLegacyServiceManagementClient class, which can be used to manage Azure services such as virtual machines, storage accounts, and networks.\"",
    "\"Generate Python code that imports a library such as `fake-useragent` or `User Agent Switcher` to create a simple user agent faker with a real-world database of user agents.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a basic environment for reinforcement learning using the Gym library, similar to the following package description:\\n\\n\\\"Gym is a universal API for reinforcement learning environments. It provides a simple, standardized way of interacting with RL environments, making it easy to train agents on a wide range of problems. With Gym, you can train your agent on a variety of environments, including classic problems like mountain car and acrobot, as well as more complex problems like robotics and game playing.\\\"\\n\\nHere is an example of Python code that could accomplish this task:\\n```\\nimport gym\\n\\n# Set up the environment\\nenv = gym.make('MountainCar-v2')\\n\\n# Define the agent's policy\\ndef policy(state):\\n   # Return a list of actions to take in the current state\\n   return [0, 0, 0, 1]\\n\\n# Train the agent using Q-learning\\nq_learner = gym.QLEarner(env, policy)\\nq_learner.learn(episodes=1000)\\n\\n# Test the agent\"",
    "\"Generate Python code that uses the `boto3` library to convert AWS CloudFormation templates between JSON and YAML formats, using the `json` and `yaml` modules to handle the data serialization.\"",
    "\"Generate Python code that imports the TensorFlow library and creates a text-related op, module, or subgraph using the TF.Text library.\"",
    "\"Generate Python code that uses `setuptools` to create a `setup.py` file for building and distributing a Python package.\"",
    "\"Generate Python code that imports the pathlib module and creates subclasses for local and cloud bucket storage, with methods for resolving paths, creating directories, and reading and writing files.\"",
    "\"Generate Python code that parses ISO8601 dates and times using a fast C-implemented library, providing efficient date and time parsing capabilities for Python applications.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Jikan API to retrieve information about anime, manga, and users, and perform various operations such as searching, filtering, and sorting.\"",
    "\"Generate Python code that parses a HOCON configuration file into a Python dictionary using the `configparser` module and returns the parsed data in a dictionary format, while ensuring proper handling of nested structures and comments.\"",
    "\"Generate Python code that imports the required libraries and creates a basic web crawler that can fetch and parse HTML pages, extract data using regular expressions or BeautifulSoup, and store the extracted data in a structured format such as CSV or JSON.\"",
    "\"Generate Python code that imports the required libraries and creates an editable interval tree data structure, allowing for efficient insertion, deletion, and querying of intervals.\"",
    "\"Generate Python code that implements a JSON type with nested change tracking for SQLAlchemy, using the `sqlalchemy` and `jsons` libraries, like this:\\n```python\\nfrom sqlalchemy import Column, Integer, String\\nfrom sqlalchemy.ext.declarative import declarative_base\\nfrom sqlalchemy.orm import relationship\\nfrom jsons import JsonType\\n\\nclass Base(object):\\n   def __init__(self, **kwargs):\\n       self.id = kwargs.get('id')\\n       self.data = {}\\n\\nclass Node(Base):\\n   name = Column(String)\\n   children = relationship(\\\"Node\\\", backref=\\\"parent\\\")\\n\\nclass Document(Base):\\n   title = Column(String)\\n   nodes = relationship(\\\"Node\\\", backref=\\\"document\\\")\\n\\nBase.metadata.create_all(bind=engine)\\n\\n# usage:\\ndoc = Document(title=\\\"Example\\\")\\nnode1 = Node(name=\\\"Node 1\\\", document=doc)\\nnode2 = Node(name=\\\"Node 2\\\", document=doc)\\nprint(JsonType(doc)) # prints {\\\"title\\\": \\\"Example\"",
    "\"Generate Python code that creates a simple WSGI application that serves static files from a directory, using the `wsgiref` module to handle HTTP requests and the `os` module to read file contents.\"",
    "\"Generate Python code that imports the MySQL Connector library and creates a connection to a MySQL database, allowing you to execute SQL queries and interact with the database.\"",
    "\"Generate Python code that implements the AES block-cipher and common modes of operation using pure Python, without any external libraries or dependencies.\"",
    "\"Generate Python code that uses the google-api-python-client library to interact with Google APIs, including the Google Drive API, Google Sheets API, Google Slides API, and Google Calendar API, by setting up OAuth 2.0 credentials, making API requests, and parsing response data, with support for authorization and error handling.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureResourceManagerClient class, allowing you to interact with Azure resources and create, update, and delete resources in your Azure subscription.\"",
    "\"Generate Python code that defines legacy registered functions for spaCy backwards compatibility, including the `spacy.lexeme_to_word` function, the `spacy.word_to_lexeme` function, and the `spacy.lexemes` function, which behave identically to their spaCy 2 counterparts but are designed to work seamlessly with spaCy 3.\"",
    "\"Generate Python code that imports the plumbum library and uses its shell combinators to create a pipeline of commands, similar to how Unix pipes work, allowing for the composition of multiple commands into a single command, improving the readability and flexibility of complex workflows.\"",
    "\"Generate Python code that imports the WebRTC VAD library from binary wheels and uses it to detect voice activity in real-time audio data.\"",
    "\"Generate Python code that imports the blessings module and creates terminal abstractions using its functions, such as `bless` and `curse`, to manipulate the terminal settings and create custom commands for managing the terminal environment.\"",
    "\"Generate Python code that imports the datetime module and creates a class called Tempora with methods for calculating elapsed time, converting between date formats, and determining the current time.\"",
    "\"Generate Python code that imports the `yaml` module, creates a dictionary to store YAML data, and uses the `yaml.dump()` function to write the data to a file named \\\"data.yml\\\".\"",
    "\"Generate Python code that imports the tensorflow/datasets library and loads a dataset using the `tfds.load()` function, such as `generatemnli` or `cifar10`.\"",
    "\"Generate Python code that configures debug rules for an SMDebug session, allowing you to specify which rules to enable or disable, and customize the behavior of certain rules.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that takes a Gregorian date as input and returns the corresponding Hebrew date, accounting for differences in leap years and weekdays.\"",
    "\"Generate Python code that imports the necessary libraries and uses John Snow Labs Spark NLP to perform natural language processing tasks, such as tokenization, part-of-speech tagging, named entity recognition, and sentiment analysis, on a given text dataset, scaling the annotations to handle large datasets in a distributed environment using Apache Spark ML.\"",
    "\"Generate Python code that imports Flask, Alembic, and SQLAlchemy, creates a database model, defines a migration script, and updates the database schema using Alembic's revision control.\"",
    "\"Generate Python code that defines a dictionary class called Addict, which allows setting items using both attribute and item syntax, and supports the usual dictionary methods such as iteration, indexing, and slicing.\"",
    "\"Generate Python code that imports the required libraries and provides a simple interface for interacting with GitLab APIs, including creating and managing projects, repositories, and users, as well as performing various Git operations such as committing and pushing changes.\"",
    "\"Generate Python code that simplifies building parse types based on the parse module by using the `typing` module to define custom type hints for parsing functions and their return types, and using the `parse` module to implement the parsing logic.\"",
    "\"Generate Python code that imports the Google Cloud App Engine Logging API client library and uses it to retrieve logs from a specified application and time range, then parse and print out the log entries.\"",
    "\"Generate Python code that creates a Celery task with a decorator that takes a function and a list of workers, and returns a new function that applies the original function to each worker in parallel using Celery's async mode.\"",
    "\"Generate Python code that imports the necessary libraries to interact with OLE2 files, such as `pyole2` or `pymssql`, and then use those libraries to parse, read, and write OLE2 files.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Google Cloud PubSub Lite API client object, allowing you to interact with the PubSub Lite service and perform various operations such as creating topics, subscriptions, and publishing messages.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the LogicAppsManagementClient class to interact with Microsoft Azure Logic Apps.\"",
    "\"Generate Python code that imports the required libraries and sets up an OpenStack Identity authentication session using the keystoneclient library, allowing access to OpenStack services such as Nova, Swift, and Cinder.\"",
    "\"Generate Python code that imports the os and shutil modules, and uses them to perform various file and directory operations such as creating, moving, copying, and removing files and directories, as well as checking their existence and contents, for use in Mozilla testing.\"",
    "\"Generate Python code that imports the necessary modules and sets up an Azure CLI namespace using the `azure.cli` module, similar to the Microsoft Azure CLI Namespace Package.\"",
    "\"Generate Python code that imports necessary libraries and creates a function that takes a year and month as inputs, and returns a list of lunar and solar holidays for that month, including Chinese New Year, Lantern Festival, Qingming Festival, Dragon Boat Festival, and Mid-Autumn Festival.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Service Fabric client class, allowing you to interact with Service Fabric clusters and execute various operations such as creating applications, deploying application packages, and querying cluster status.\"",
    "\"Generate Python code that reads and writes data from/to Parquet files using the PyArrow library, which provides efficient and flexible access to the Parquet file format.\"",
    "\"Generate Python code that parses an SSH public key file and extracts the key details, such as the fingerprint, algorithm, and public key value.\"",
    "\"Generate Python code that implements an automatic forecasting procedure using historical data and machine learning algorithms to predict future values for a given time series.\"",
    "\"Generate Python code that uses the argparse module to parse command-line arguments in a natural way, while also providing a simple and intuitive API for defining and manipulating arguments.\"",
    "\"Generate Python code that uses the `xml.etree.ElementTree` module to convert a dictionary or other native data type into a valid XML string, with the option to customize the root element name and attribute names.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureSubscriptionClient class, which can be used to manage Azure subscriptions and resources.\"",
    "\"Generate Python code that uses the ONNX Runtime library to accelerate machine learning model inference on various hardware platforms, including CPU, GPU, and specialized accelerators.\"",
    "\"Generate Python code that implements a multicast DNS service discovery system, utilizing the Python library named \\\"mdns\\\" to send and receive DNS messages over multicast networks, allowing for the discovery of services on a local network without relying on a centralized DNS server.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureSchedulerClient class, which can be used to manage Azure Scheduler jobs and job schedules.\"",
    "\"Generate Python code that uses the 'html2text' library to convert HTML files to Markdown-formatted text, preserving the structure and content of the original HTML elements.\"",
    "\"Generate Python code that creates a tracer using the OpenTelemetry API, sets up span exporters for Jaeger and Prometheus, instruments various parts of a Python application, and collects metrics and traces from the application.\"",
    "\"Generate Python code that imports the necessary libraries and uses regular expressions to detect and fix mojibake and other Unicode issues in strings, using theunicodefoundation library for advanced Unicode processing.\"",
    "\"Generate Python code that imports the necessary libraries and uses the IMDbPY API to retrieve information about movies, actors, and directors, and then stores the data in a local database for offline access.\"",
    "\"Generate Python code that uses the `lxml` library to parse HTML and XML files, and utilizes XPath and CSS selectors to extract desired data elements.\"",
    "\"Generate Python code that uses the `socket` library to scan a range of TCP ports on a target host and print the open ports and their corresponding IP addresses.\"",
    "\"Generate Python code that creates a tracer using the OpenTelemetry Python API, sets a trace context, and logs an event with metadata using the ` Otel.Tracer` class.\"",
    "\"Generate Python code that implements an AWS signature version 4 signing process for the python-requests module, allowing users to sign HTTP requests using their AWS access key and secret key, and automatically adding the signed headers to the request.\"",
    "\"Generate Python code that implements a core routing component for Sanic, allowing for flexible and efficient routing of HTTP requests within a web application.\"",
    "\"Generate Python code that uses the ctypes library and py3 to interact with the PAM (Pluggable Authentication Module) system, allowing for authentication and authorization of users and applications.\"",
    "\"Generate Python code that implements a backport of the PEP 567 API for reproducible builds, including a custom build backend for reproducible builds and a hook for adding reproduceable build information to wheel files.\"",
    "\"Generate Python code that parses and analyzes PDF files using PyPDF2 and Pandas, extracting relevant information such as text, layout, and metadata, and outputting the results in a structured format for further analysis.\"",
    "\"Generate Python code that imports the necessary libraries and creates an asynchronous HTTP client that allows users to send HTTP requests and receive responses in a human-readable format, using the aiohttp library to handle the async functionality.\"",
    "\"Generate Python code that implements a JSON merge patch library, following the specification outlined in RFC 7386, allowing for the application of patch operations to JSON documents.\"",
    "\"Generate Python code that imports the queue module and creates a persistent queue using the queue.Queue class, and also creates a non-persistent queue using the queue.LifoQueue class.\"",
    "\"Generate Python code that imports the Slack API library and creates a bot that listens for messages containing a specific keyword, then responds with a pre-defined message.\"",
    "\"Generate Python code that imports the requests library and uses it to make API calls to the Random Stuff API, allowing users to easily interact with the API's features.\"",
    "\"Generate Python code that implements a multi-producer multi-consumer in-memory signal dispatch system, allowing producers to send signals to consumers through a shared memory queue, utilizing multiprocessing and threading techniques for efficient communication between processes.\"",
    "\"Generate Python code that creates a dictionary-based filesystem, allowing you to interact with dictionaries as if they were files and directories, including creating, reading, updating, and deleting them, using a path-like syntax.\"",
    "\"Generate Python code that implements a polyfill package for Flake8 plugins by defining a set of functions that mimic the behavior of the missing plugins, allowing Flake8 to run without errors when encountering plugins that are not installed.\"",
    "\"Generate Python code that decorates a function with a timeout, such that if the function does not complete within a specified time limit, it will raise a `TimeoutError`.\"",
    "\"Generate Python code that imports the necessary libraries and loads a neural network from an ONNX file using the openonnx library, then performs inference on input data using the loaded model.\"",
    "\"Generate Python code that implements OpenID support for Flask by using the `flask_openid` library, which provides a simple and secure way to authenticate users using OpenID.\"",
    "\"Generate Python code that uses the flask_compression package to compress responses in a Flask app with gzip, deflate, or brotli.\"",
    "\"Generate Python code that implements a GraphQL framework with features such as schema definition, query and mutation parsing, validation, and execution.\"",
    "\"Generate Python code that imports the `soaplib` library and creates a lightweight SOAP client using Jurko's fork, allowing for easy sending of SOAP requests and receiving of responses.\"",
    "\"Generate Python code that imports the necessary libraries and creates a class wrapper for the NVIDIA Management Library, providing a Pythonic interface for accessing and manipulating NVIDIA GPUs, CUDA devices, and other related hardware components.\"",
    "\"Generate Python code that imports the subprocess module and creates a subprocess interface for executing commands, providing a simple way to run shell commands from Python.\"",
    "\"Generate Python code that imports the best available JSON implementation, such as `json` or `ujson`, and wraps its functions in a custom interface with a consistent API, using a tool like `python-Future` or `modernize` to ensure compatibility with different versions of Python.\"",
    "\"Generate Python code that implements a reference implementation of PEP 3156 by creating a package called `pep3156` with a single module `__init__.py` containing a class `PEP3156` that provides a basic implementation of the specification described in the PEP, including methods for computing the hash of a file and comparing it against a given hash, as well as a function for reading and writing files securely.\"",
    "\"Generate Python code that imports a module providing basic functions for parsing mime-type names and matching them against a list of media-ranges, and uses these functions to parse and match mime-type names and media-ranges.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Notification Hubs Management Client, allowing you to interact with your notification hubs in Azure.\"",
    "\"Generate Python code that uses the `xmltodict` and `yaml` modules to process YAML/XML documents and perform operations similar to those of the `jq` command-line tool, such as filtering, sorting, and modifying data in the documents.\"",
    "\"Generate Python code that imports the necessary libraries for audio manipulation, such as librosa, and creates a user-friendly interface for loading, playing, and modifying audio files using intuitive functions like `play_audio()` and `modify_pitch()`.\"",
    "\"Generate Python code that creates a set of wrapper classes for event broadcast and task management using either Python threads or Asyncio, allowing for efficient and organized management of concurrent tasks and events.\"",
    "\"Generate Python code that imports the Google Cloud Audit Protos library and uses it to audit and monitor events in a Google Cloud Platform project, including creating and managing audit logs, configuring audit log sinks, and analyzing audit data.\"",
    "\"Generate Python code that uses ElementTree to parse an HTML document and selects elements based on their CSS selectors, such as class names, tag names, and attribute values.\"",
    "\"Generate Python code that uses the `google-auth` and `grpc` libraries to implement authentication and communication with Google Cloud Platform services via gRPC.\"",
    "\"Generate Python code that uses regular expressions to collect and extract URLs from given text, such as BeautifulSoup or NLTK libraries.\"",
    "\"Generate Python code that converts a date from one calendar system to another, such as converting a Gregorian calendar date to a Julian calendar date or vice versa, using the datetime module and conditional statements to account for differences in leap year rules and daylight saving time.\"",
    "\"Generate Python code that imports the MQTT version 5.0/3.1.1 client class and creates an instance of the class to connect to an MQTT broker and publish a message to a topic.\"",
    "\"Generate Python code that imports the pylibmc library and creates a memcached client object to interact with a memcached server, allowing you to store and retrieve data in the form of key-value pairs.\"",
    "\"Generate Python code that implements an asynchronous Redis client using the asyncio module, allowing for non-blocking interactions with Redis servers.\"",
    "\"Generate Python code that uses the cChardet library to detect the character encoding of a given string, handling various encodings including ASCII, Latin1, UTF-8, and EUC-JP.\"",
    "\"Generate Python code that creates a SQL query builder API using Python by importing the necessary libraries, defining a class for building queries, and implementing methods for adding select statements, where clauses, group by statements, having clauses, joins, and other elements of a SQL query.\"",
    "\"Generate Python code that creates an Azure service principal and uses it to authenticate to Azure CLI using the azure-cli-python library, allowing you to manage Azure resources from the command line.\"",
    "\"Generate Python code that implements a relay library for GraphQL Core, allowing for efficient and scalable data fetching and caching, with support for incremental loading and automatic handling of errors.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Google Cloud KMS client, allowing you to create, manage, and use encryption keys for your cloud resources.\"",
    "\"Generate Python code that imports the necessary modules, creates an instance of the AzureCommerceClient class, and uses it to list the customer's subscriptions, retrieve a specific subscription, update a subscription, and delete a subscription using the Microsoft Azure Commerce Client Library for Python.\"",
    "\"Generate Python code that uses a library like Pillow or PyQRCode to create a QR code image from a given string or number, customizable with colors, sizes, and other options.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Management Partner Management client, allowing you to manage Azure partnerships and subscriptions programmatically.\"",
    "\"Generate Python code that imports and implements the same API interface for a collection of cache libraries, such as Redis, Memcached, and SQLite, to provide a unified caching solution for various use cases.\"",
    "\"Generate Python code that uses the Microsoft Azure Power BI Embedded Management Client Library to create, manage, and deploy Power BI reports and dashboards in an embedded environment.\"",
    "\"Generate Python code that imports a format-agnostic tabular data library, such as Pandas, and uses it to read and write tabular data in various formats, including XLS, JSON, YAML, CSV, and others, while ensuring seamless interaction between different file formats and maintaining data integrity and consistency across all operations.\"",
    "\"Generate Python code that uses the Microsoft Azure SAP Hana on Azure Management Client Library for Python to manage SAP Hana deployments on Azure, including creating, updating, and deleting deployments, as well as retrieving deployment status and logs.\"",
    "\"Generate Python code that imports the required libraries and creates a GraphFrame object from a CSV file, allowing for graph manipulation and analysis using DataFrame-like operations.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Machine Learning Compute Management client, allowing you to manage compute resources and execute machine learning experiments on the Microsoft Azure platform.\"",
    "\"Generate Python code that uses the `geopy` library to convert between different geospatial data formats, such as converting coordinates from degrees-minutes-seconds to decimal degrees, or transforming shapefiles to GeoJSON format.\"",
    "\"Generate Python code that imports the necessary libraries and creates a trace client object to interact with the Google Cloud Trace API, allowing users to create, update, and retrieve traces, as well as list trace spans and annotations.\"",
    "\"Generate Python code that imports the requests library and uses the Google Translate API to translate text between various languages, without any cost or usage limits.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Google Ads client object to interact with Google Ads API, allowing users to manage campaigns, ad groups, ads, and other aspects of their Google Ads account.\"",
    "\"Generate Python code that imports the necessary modules and defines stub functions for the urllib3 module, similar to how it is done in the `unittest` module, so that the stubs can be used to mock out HTTP requests in unit tests.\"",
    "\"Generate Python code that checks PEP-8 naming conventions using a plugin for flake8:\\n```\\nimport flake8_pep8\\n```\\nThis line of code imports the `flake8_pep8` plugin, which provides a set of rules for checking PEP-8 naming conventions in Python code. The plugin is designed to work with the `flake8` tool, which is a popular linter for Python code. By importing this plugin, you can enable PEP-8 naming convention checking in your `flake8` linter.\"",
    "\"Generate Python code that imports the necessary modules for coordinating dependencies within AzureML packages, such as `azureml-sdk` and `azure-devices`, and defines a function or class to manage the dependencies using a configuration file or environment variables.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a basic terminal app with colored text, keyboard input, and positioning capabilities using the `colors` module, `keyboard` module, and `termios` module.\"",
    "\"Generate Python code that parses a streaming multipart message, handling boundaries and part headers correctly, using a generator-based approach for efficient processing.\"",
    "\"Generate Python code that imports the necessary libraries and utilizes the `socket` module to iterate over all available network interfaces and print their corresponding IP addresses, including the loopback interface.\"",
    "\"Generate Python code that uses the ` PackageKit` library to resolve abstract dependencies into concrete ones by calling the `get_package_dependency_spec()` function on each abstract dependency and then using the resulting spec to fetch the required packages.\"",
    "\"Generate Python code that implements a generic automation framework for acceptance testing and robotic process automation (RPA) using a modular architecture, allowing users to define custom workflows and integrations with various systems and technologies.\"",
    "\"Generate Python code that uses the requests library to make HTTP requests to the Weights & Biases API, handling authentication and pagination, and providing a simple interface for accessing various resources such as models, experiments, and runs.\"",
    "\"Generate Python code that imports the `parsing` module and uses its functionality to parse strings and convert them into data structures such as lists, dictionaries, and nested data structures.\"",
    "\"Generate Python code that imports the necessary modules for working with Aliyun services, such as boto3 for AWS and aliyun-python-sdk for Aliyun services, and sets up the credentials and configuration for accessing these services.\"",
    "\"Generate Python code that imports the necessary modules for i18n support in Repoze and Pyramid, sets up the translation infrastructure, and provides utilities for working with translations in Python.\"",
    "\"Generate Python code that imports the necessary libraries and creates a DynamoDB client for interacting with a DynamoDB database, providing a convenient and Pythonic interface for executing operations such as creating tables, inserting data, updating items, and querying data.\"",
    "\"Generate Python code that uses the Azure Machine Learning SDK to create and train machine learning models, implement data preprocessing and feature engineering, and deploy models as web services on Azure.\"",
    "\"Generate Python code that imports the `typing` and `json` modules, defines a class `DataClassFromDict` with a constructor that takes a dictionary as an argument, uses `typing.get_type_hints()` to get type hints for the keys in the dictionary, and sets the attributes of the object using the type-hinted values.\"",
    "\"Generate Python code that imports the necessary libraries and creates a graph data structure to represent a network, allowing users to add, remove, and traverse nodes and edges.\"",
    "\"Generate Python code that imports a collection of helpers and mock objects for unit tests and doc tests, such as `unittest` and `mockk`.\"",
    "\"Generate Python code that imports a library such as `color` or `colour` and uses its functions to convert and manipulate colors in various representations, including HSL, RGB, Web, X11, etc.\"",
    "\"Generate Python code that implements a custom logging module with configuration, log level, and message formatting features.\"",
    "\"Generate Python code that implements high-performance functional utilities using Cython, including map, filter, reduce, and aggregate functions, with optimized memory management and support for parallelism.\"",
    "\"Generate Python code that imports the necessary libraries and initializes an instance of the Application Insights client, allowing you to send telemetry data to Azure Application Insights for monitoring and analytics purposes.\"",
    "\"Generate Python code that imports the mysql-connector library and creates a connection to a MySQL database, allowing for querying and manipulation of data within the database.\"",
    "\"Generate Python code that imports the necessary libraries and creates a simple neural network using PyTorch Lightning, scaling the model to fit on a GPU device if available.\"",
    "\"Generate Python code that imports the necessary libraries, sets up a basic configuration file, and uses a combination of loops and conditionals to automate repetitive tasks, such as file management and user account manipulation, on a Linux system.\"",
    "\"Generate Python code that implements a topological sort algorithm, taking in a directed acyclic graph represented as a dictionary of vertices with edges between them, and returning a list of vertices sorted in a way that no vertex comes before its dependencies.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureDevSpacesClient class, authenticates with Azure Dev Spaces using an Azure CLI authentication token, and then uses the client object to create, update, and delete Kubernetes resources in a dev space.\"",
    "\"Generate Python code that imports the necessary CFFI modules and creates a Python wrapper around the Cairo API, allowing users to create graphics and perform various drawing operations using the Cairo library.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a system for collecting telemetry data, such as log messages, metrics, events, and activity messages, and sends them to a designated destination for analysis and monitoring.\"",
    "\"Generate Python code that implements a mechanism to ensure an application is always online and accessible via HTTPS requests.\"",
    "\"Generate Python code that imports the necessary libraries for cryptography and creates typing stubs for common cryptographic functions, such as hashes, digital signatures, and encryption/decryption methods.\"",
    "\"Generate Python code that creates a class named `ConfigDefaults` that contains default configuration values for an app, and provides methods for accessing, updating, and resetting those values.\"",
    "\"Generate Python code that imports the dictdiffer library and uses it todiff and patch two dictionaries, original and updated, and print the difference between them.\\n\\nHere's an example of how this could be done:\\n```\\nfrom dictdiffer import diff, patch\\noriginal = {'a': 1, 'b': 2, 'c': 3}\\nupdated = {'a': 4, 'b': 5, 'c': 6}\\ndiff = diff(original, updated)\\nprint(diff)\\npatch(original, updated)\\n```\\nThis will output the differences between the two dictionaries, and then update the original dictionary with the changes from the updated dictionary.\"",
    "\"Generate Python code that builds, optimizes, and manages machine learning workflows using popular libraries like TensorFlow, PyTorch, Scikit-Learn, and XGBoost.\"",
    "\"Generate Python code that imports the necessary modules and creates a script that can interact with VMware vSphere servers, including creating, modifying, and deleting virtual machines, networks, and other resources using the API provided by the vSphere SDK.\"",
    "\"Generate Python code that imports the django.urls module and defines a URL pattern for handling database queries, using the format \\\"django://username:password@host:port/database\\\" for the database URL.\"",
    "\"Generate Python code that imports the django-12factor package and sets up a Django application with 12factor-inspired environment variables for configuration.\"",
    "\"Generate Python code that imports the requests and json modules, makes a GET request to a package repository API, parses the response as JSON, compares the version of the installed package to the version in the repository, and prints a message indicating whether an update is available.\"",
    "\"Generate Python code that imports the TensorFlow library and creates a simple neural network for handwritten digit recognition using the MNIST dataset.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types for the boto3 library version 1.34.18 using mypy-boto3-builder version 7.23.1, like so:\\n```python\\nfrom typing import *\\nfrom botocore.client import Boto3Client\\nfrom botocore.waiter import Waiter\\n\\nBoto3 = Boto3Client(\\n   service=\\\"ec2\\\",\\n   region=\\\"us-west-2\\\"\\n)\\n\\nWaiter = Waiter(\\n   client=Boto3,\\n   poll_interval=10\\n)\\n```\"",
    "\"Generate Python code that creates a web application using the Pyramid Web Framework by importing the necessary modules, defining routes, and rendering templates.\"",
    "\"Generate Python code that imports the csv module and uses it to read and write CSV files, including support for quoted fields and escape characters, similar to the Python 3 csv module.\"",
    "\"Generate Python code that imports the necessary libraries to implement the xxHash algorithm and provides a function to calculate the hash value of a given string, similar to the `xxhash` package.\"",
    "\"Generate Python code that imports the unittest module, creates a TestCase class for testing WSGI applications, defines test methods for various scenarios, and uses the client module to send requests to the application and check the responses.\"",
    "\"Generate Python code that imports and uses the `ldap` module to connect to an LDAP server and perform common tasks such as searching, binding, and retrieving data.\"",
    "\"Generate Python code that imports the necessary libraries and creates an asynchronous wrapper for the BenBot API using the async-await syntax, allowing for non-blocking requests to the API while maintaining a simple and readable syntax.\"",
    "\"Generate Python code that imports the Google Cloud Translate API client library and uses it to translate text from one language to another, handling authentication and errors gracefully.\"",
    "\"Generate Python code that creates a pipeline using the Kubeflow Pipelines SDK, defining a sequence of steps that execute containerized tasks on Kubernetes, including step-wise dependencies, argument passing, and error handling.\"",
    "\"Generate Python code that imports the Redis module and creates a client object to interact with a Redis database for testing purposes.\"",
    "\"Generate Python code that creates an ordered multivalue dictionary from a list of lists, where each element in the list corresponds to a key-value pair, and the order of the elements in the list defines the order of the keys in the dictionary.\"",
    "\"Generate Python code that imports the required libraries, loads the data, preprocesses it, and trains a machine learning model using the Estimator class from scikit-learn library.\"",
    "\"Generate Python code that parses SGML documents, supports XML, and provides an easy-to-use API for parsing and manipulating SGML/XML documents.\"",
    "\"Generate Python code that uses the `setuptools` library to create a setup script for building, testing, and packaging software on multiple platforms, including Windows, macOS, and Linux.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client object to interact with the Google Maps Platform APIs, allowing users to perform various tasks such as geocoding, mapping, and retrieving location information.\"",
    "\"Generate Python code that implements an integrated process monitor for developing and reloading daemons using the `psutil` library to retrieve information about running processes, the `watchdog` library to watch for file changes, and the `subprocess` library to manage the daemon processes.\"",
    "\"Generate Python code that imports the necessary libraries and defines a class with methods that wrap the FUSE API functions, allowing users to create and manage file systems in a simple and intuitive way.\"",
    "\"Generate Python code that imports the ordered yaml library and uses it to load a yaml file, preserve the order of the dictionary keys, and print the loaded dictionary.\\n\\nHow does this sound?\\n```\\nfrom ordered_yaml import Load\\n\\nwith open('example.yaml', 'r') as f:\\n   data = Load(f)\\n\\nprint(data)\\n```\\nIs there anything else I can help you with?\"",
    "\"Generate Python code that imports the necessary libraries for data analysis, such as Pandas and Matplotlib, and creates a user-friendly interface for data manipulation and visualization, using intuitive function names and documentation to make it easy for humans to use and understand.\"",
    "\"Generate Python code that creates an interactive dashboard using Plotly to visualize tensors and their transformations during the training process, similar to TensorBoardX, but without requiring TensorFlow.\"",
    "\"Generate Python code that uses the Cairo library to convert SVG files into various formats such as PNG, PDF, and PS.\"",
    "\"Generate Python code that imports the necessary libraries and uses the OSQP solver to solve a quadratic program (QP) optimization problem by splitting the operator into two parts, solving for the first part using a Schur complement approximation, and then solving for the second part using a simplified QP solver.\"",
    "\"Generate Python code that imports the markdown-it library and uses it to parse a Markdown string, returning a parsed tree representation of the input.\"",
    "\"Generate Python code that uses the `lxml` library to parse an XML file and extract specific data elements using XPath expressions, including support for XPath 1.0, 2.0, 3.0, and 3.1 syntax.\"",
    "\"Generate Python code that imports the necessary modules and uses the CRFsuite library to perform conditional random field parsing, feature extraction, and inference for NLP tasks such as part-of-speech tagging and named entity recognition.\"",
    "\"Generate Python code that imports the required libraries, defines custom rules and functions for detecting likely bugs and design problems, and integrates with flake8 to report violations;\"",
    "\"Generate Python code that imports the necessary libraries and provides an interface to interact with the Google Cloud Error Reporting API, allowing users to report errors and retrieve error statistics.\"",
    "\"Generate Python code that imports the necessary libraries and uses efficient algorithms to resample signals at a higher or lower sampling rate, while preserving the original signal's characteristics and minimizing aliasing and artifacts.\"",
    "\"Generate Python code that imports the necessary libraries and creates a pandas DataFrame with sample data for demonstrating SQL system data types using BigQuery and Spanner.\"",
    "\"Generate Python code that parses and applies unified diffs using the `difflib` module and supports various diff formats, including context diffs, inline diffs, and side-by-side diffs.\"",
    "\"Generate Python code that implements multiple dispatch by defining a function with multiple methods, each with a different number of arguments, and uses the *args and **kwargs syntax to handle variable length argument lists.\"",
    "\"Generate Python code that takes a JSON object as input and formats it into a human-readable log message, with the ability to specify a custom template for the output format.\"",
    "\"Generate Python code that imports the geohash library and creates a geohash object from a string representation of a geohash, allowing you to perform various operations such as calculating the distance between two geohashes, determining whether a geohash is within a certain radius of a given location, and encoding/decoding geohashes for use in URLs or other data structures.\"",
    "\"Generate Python code that creates a dictionary class with dot notation access, allowing for nested dictionaries and chainable method calls.\"",
    "\"Generate Python code that creates a class called `LabeledArray` that takes in a numpy array and a list of labels, and provides methods for accessing and manipulating the data and labels.\"",
    "\"Generate Python code that creates a simple build system with a focus on speed, using the Ninja package, by running the command `ninja -C` in a terminal and passing the name of the build target as an argument.\"",
    "\"Generate Python code that parses and validates URIs and IRIs using the `urllib.parse` module, specifically the `urllib.parse.urlparse()` function for parsing and the `urllib.parse.validate_uri()` function for validation, both of which are specified in RFC 3986 and RFC 3987.\"",
    "\"Generate Python code that creates a pipeline using Kubeflow Pipelines API, defining a sequence of steps including data ingestion, preprocessing, training, and deploying a machine learning model.\"",
    "\"Generate Python code that imports the necessary libraries and defines a configurable machine learning workflow using Azure Machine Learning pipelines.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a headless Chrome instance for automation using the unofficial port of Puppeteer.\"",
    "\"Generate Python code that uses the django-rest-swagger library to automatically generate Swagger/OpenAPI 2.0 schemas from Django Rest Framework code.\"",
    "\"Generate Python code that uses the `ast` module to parse Python source code, remove type hints, and rewrite the modified source code back to disk.\"",
    "\"Generate Python code that imports the geocoding library and uses it to convert addresses into latitude and longitude coordinates.\"",
    "\"Generate Python code that creates a line chart using matplotlib, given a dataset of two columns of numbers representing the closing price of a stock over time, with customizable title, labels, and legend.\"",
    "\"Generate Python code that imports the SocketIO and Flask libraries, sets up a Flask app with SocketIO support, and creates a route for handling websocket connections.\"",
    "\"Generate Python code that imports a CSS Cascading Style Sheets library, such as PyCSS, and uses it to parse and manipulate CSS stylesheets.\"",
    "\"Generate Python code that creates a jQuery-like library for Python, allowing for seamless DOM manipulation and event handling, using efficient and concise syntax.\"",
    "\"Generate Python code that uses the geopy library to find the timezone of any point on earth (given by coordinates) offline by calling geopy.timezone.TimeZone.from_coords and passing in the latitude, longitude, and altitude of the point, then returns the name of the resulting timezone.\"",
    "\"Generate Python code that imports the necessary libraries, defines a function for computing derivatives, and applies that function to a given numerical computation expressed as a NumPy expression.\"",
    "\"Generate Python code that calculates the distance between two points on Earth using the Haversine formula and returns the result in kilometers.\"",
    "\"Generate Python code that imports the Zstandard library and provides a class for compressing and decompressing data using zstd algorithms, allowing users to compress and decompress files and streams in memory, and also supporting parallel compression and decompression.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for Xvfb, Xephyr, and Xvnc, providing a unified interface for interacting with virtual framesbuffers, windows, and desktop environments.\"",
    "\"Generate Python code that implements server-side session support for Flask by creating a custom sessions module that uses a database or other data store to store session data, and modifies Flask's request and response objects to use the session data.\"",
    "\"Generate Python code that uses the `elf` and `dwarf` modules to analyze ELF files and extract information from DWARF debugging information.\"",
    "\"Generate Python code that uses the dbt library to build and run SQL queries on a database, allowing data analysts and engineers to collaborate on building and maintaining analytics infrastructure in a version-controlled manner.\"",
    "\"Generate Python code that creates a game window with a grid of buttons, handles user input to move a character around the grid, and implements collision detection to prevent the character from moving outside the grid or into other objects.\"",
    "\"Generate Python code that imports TensorFlow and uses its probabilistic modeling and statistical inference capabilities to perform Bayesian linear regression, Gaussian mixture models, and KL divergence calculation.\"",
    "\"Generate Python code that uses the `behave` library to implement behavior-driven development for a given project, including defining test cases and steps, running tests, and reporting on test results.\"",
    "\"Generate Python code that creates a caching front-end using the Dogpile lock to manage concurrent access to a shared cache, ensuring thread safety and improving performance by reducing contention between threads.\"",
    "\"Generate Python code that uses a library like scikit-learn or TensorFlow to perform automated machine learning model selection and hyperparameter tuning, such as RandomizedSearchCV or GridSearchCV, to find the best performing model and parameters for a given dataset.\"",
    "\"Generate Python code that imports the MongoEngine module and creates a document model with fields for title, author, and content using the Meta class.\"",
    "\"Generate Python code that uses the `subprocess` module to interact with the system crontab file, allowing users to add, remove, list, and edit cron jobs, and also handle time and date conversions for scheduling jobs at specific times or intervals.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API client object to interact with the Qubole Data Service API, including configuration options for the API endpoint, username, and password.\"",
    "\"Generate Python code that uses the htmlmin library to read an HTML file, minify it using the default settings, and write the minified HTML to a new file.\"",
    "\"Generate Python code that imports the necessary modules and reads a JSON lines file, parses each line into a dictionary, and then writes the dictionaries to a new JSON file.\"",
    "\"I cannot provide a prompt that would generate Python code to bypass Cloudflare's anti-bot page as it goes against ethical and legal standards. It is important to respect the security measures put in place by websites and not attempt to bypass them without explicit permission. Attempting to bypass security measures can be considered hacking and may result in legal consequences.\\n\\nInstead, I suggest focusing on ways to improve your own website's security measures to protect against bots and other malicious actors. There are many legitimate ways to prevent bots from accessing your website, such as using CAPTCHA, implementing rate limiting, and using machine learning algorithms to detect and block suspicious traffic.\\n\\nAdditionally, it's important to note that attempting to bypass security measures can also harm the website you are trying to access. Bypassing security measures can lead to vulnerabilities that can be exploited by malicious actors, putting the website and its users at risk.\\n\\nIn summary, I strongly advise against attempting to bypass security measures put in place by websites, and instead recommend focusing on improving your own website's security measures and respecting the security of others.\"",
    "\"Generate Python code that implements a Marshmallow multiplexing schema using the `marshmallow` library, including a schema for defining the metadata of a dataset and serializing it into a JSON file.\"",
    "\"Generate Python code that uses the Tesseract-OCR engine to perform optical character recognition on images and extract text from them.\"",
    "\"Generate Python code that imports the `psutil` module, uses its `cpu_info()` function to get information about the CPU, and prints the clock speed and number of cores for each CPU in the system.\"",
    "\"Generate Python code that imports the necessary libraries and sets up the authentication credentials to use the Stackdriver Logging API, then uses the GAPIC library to fetch logs from Google Cloud Platform projects and perform operations on them such as filtering, aggregation, and exporting to BigQuery.\"",
    "\"Generate Python code that imports the improved version of the glob module, named `fglob`, and uses it to search for files and directories matching pattern '/**/*.txt' in the current directory and its subdirectories:\\n```\\nimport fglob\\nfiles_and_dirs = list(fglob.iglob('**/*.txt'))\\n```\"",
    "\"Generate Python code that uses the `lxml` library to validate an XML file against an XSD schema and decode the XML data into a Python object.\"",
    "\"Generate Python code that imports the required libraries, creates a Flask app, defines a user model with a password hashed using bcrypt, and provides routes for registering and logging in users.\"",
    "\"Generate Python code that imports the necessary libraries for hyperparameter optimization, such as NumPy, SciPy, and Optimize, and creates a function that takes in a model, a dataset, and a set of hyperparameters to optimize, and returns the optimized model parameters.\"",
    "\"Generate Python code that uses BeautifulSoup and Requests libraries to search for YouTube videos, channels, and playlists, and extracts video information from the links without using YouTube Data API v3.\"",
    "\"Generate Python code that creates a flexible configuration library with a simple API for setting and retrieving values, supporting multiple data sources such as environment variables, command line arguments, and files, with support for inheritance and caching for efficient lookups.\"",
    "\"Generate Python code that imports the required libraries, creates an Asyncio event loop, establishes a connection to a PostgreSQL database using asyncpg, creates a cursor object to execute queries, and uses the await keyword to wait for the query execution to complete before closing the connection.\"",
    "\"Generate Python code that implements a simple templating system for rendering templates with placeholders for dynamic values, similar to the unmaintained templating system used by old versions of Supervisor.\"",
    "\"Generate Python code that imports and uses the geojson library to read and write GeoJSON data, including parsing and generating GeoJSON strings, creating and manipulating geometric objects, and converting between different spatial reference systems.\"",
    "\"Generate Python code that implements a machine learning library with extensions for deep learning, natural language processing, and computer vision.\"",
    "\"Generate Python code that implements the ACME protocol for registering and managing domain names, including support for DNS validation, TXT record creation, and certificate issuance.\"",
    "\"Generate Python code that defines an Azure Machine Learning pipeline component using the `azure.ai.ml` library, which represents a unit of computation in Azure ML pipeline.\"",
    "\"Generate Python code that creates a TextUI color scheme generator, similar to the `text-ui-colors` package, using the `termcolor` library to display a palette of color options for the user to choose from.\"",
    "\"Generate Python code that implements a component-based architecture for building web applications, using a combination of classes, modules, and interfaces to define components and their relationships.\"",
    "\"Generate Python code that implements a loader using the PasteDeploy syntax for plaster, allowing users to define and load application configurations from INI files or command-line arguments.\"",
    "\"Generate Python code that imports the diskcache module, creates a disk cache object with a specified expiration time, sets a key-value pair in the cache, and retrieves the value from the cache.\"",
    "\"Generate Python code that implements the Atlassian Service to Service Authentication specification, allowing for the creation and verification of signed JSON Web Tokens between service applications.\"",
    "\"Generate Python code that implements a loader interface for multiple config file formats using the `config` module, `os` module, and `yaml`, `json`, and `ini` libraries.\"",
    "\"Generate Python code that displays an interactive API documentation interface using Swagger UI, based on a Swagger document in YAML format, and allows users to explore and test the API endpoints.\"",
    "\"Generate Python code that implements a pytest plugin which displays failures instantly using the `pytest` framework and the `unittest` module.\"",
    "\"Generate Python code that implements an image hashing library using a suitable hash function, such as SHA-256 or MD5, to produce a unique fixed-size hash value for each input image, and optionally compare the similarity between two images based on their corresponding hash values.\"",
    "\"Generate Python code that imports the required modules, sets up CORS support for aiohttp, and handles HTTP requests with CORS headers.\"",
    "\"Generate Python code that implements a collection of plugins for markdown-it-py, including a plugin to add GitHub flavored emoji, a plugin to create tables, a plugin to create footnotes, and a plugin to create citations in various citation styles.\"",
    "\"Generate Python code that imports the Ray library and creates a ray.init() function to initialize the Ray cluster.\"",
    "\"Generate Python code that imports the necessary modules, configures an HTTP provider, and uses it to send an HTTP request to a specified URL.\"",
    "\"Generate Python code that implements an elegant, modern, and asynchronous Telegram MTProto API framework for users and bots using the asyncio library and the protobuf module.\"",
    "\"Generate Python code that uses the `pandas` library to read and write Google Sheets spreadsheets using the `gspread` library, allowing for seamless interaction between pandas DataFrames and Google Sheets.\"",
    "\"Generate Python code that imports the necessary libraries and defines a set of metrics for evaluating machine learning models using PyTorch, including accuracy, precision, recall, F1 score, mean squared error, mean absolute error, R-squared value, and AUC ROC.\"",
    "\"Generate Python code that uses the unittest module to write unit tests for other modules and packages, including test cases for basic assertions, exception handling, and mock objects.\"",
    "\"Generate Python code that imports the docker module and creates a client object to interact with Docker APIs, allowing users to perform various container-related operations such as creating, starting, stopping, and removing containers, as well as managing images and networks.\"",
    "\"Generate Python code that imports the `graphql-tag` library and uses it to define a GraphQL schema, create a client, and execute a query.\"",
    "\"Generate Python code that uses the `poetry` library to export dependencies to various formats, such as JSON, YAML, and CSV, using the `export` function and specifying the desired format and output file path.\"",
    "\"Generate Python code that implements a rapid fuzzy string matching algorithm, such as the Levenshtein distance or Jaro-Winkler distance, to compare two strings and return a measure of their similarity.\"",
    "\"Generate Python code that imports the necessary modules and classes from the `apache-airflow-providers-cncf-kubernetes` package to create a Kubernetes provider for use in an Airflow DAG.\"",
    "\"Generate Python code that imports the necessary modules, creates an instance of the XMLSecurityLibrary class, and uses its methods to validate a digital signature in an XML document against a known public key.\"",
    "\"Generate Python code that imports the necessary modules from the kitchen sink library and uses them to perform various functional programming tasks, such as mapping, filtering, and reducing lists, as well as creating and manipulating sets and dictionaries, in a concise and efficient manner.\"",
    "\"Generate Python code that creates a Firebase project, sets up authentication and authorization, stores data in Realtime Database, Cloud Firestore, or Cloud Storage, and sends notifications using Firebase Cloud Messaging.\"",
    "\"Generate Python code that imports the necessary modules, creates test cases for data-related operations, and runs the tests using the unittest module.\"",
    "\"Generate Python code that imports the necessary libraries and creates a hierarchical dataset structure, similar to a tree, where each node represents a data point and edges represent the relationships between them, using classes and dictionaries to store the data and recursively traverse the tree to perform operations on the data points and their relationships.\"",
    "\"Generate Python code that creates a set of reusable Django model mixins and utilities for common data validation, filtering, and manipulation tasks, such as timestamped models, soft deletion, and related entity handling.\"",
    "\"Generate Python code that imports the validate_email module and uses its validate() function to check if a given email address is valid and really exists, returning a boolean value indicating whether the email address is valid or not.\"",
    "\"Generate Python code that implements a shim layer for notebook traits and config by defining a set of classes that mimic the behavior of the original traits and config modules, but with modified functionality to support the notebook environment.\"",
    "\"Generate Python code that uses the `coveralls` library to upload coverage data to Coveralls.io and display the coverage statistics online.\"",
    "\"Generate Python code that implements a lightweight Covariance Matrix Adaptation Evolution Strategy (CMA-ES) algorithm for solving optimization problems, using a minimal number of lines of code and without relying on external libraries.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureDataTableClient class, allowing you to interact with Azure Table Storage.\"",
    "\"Generate Python code that imports the sqldf library and uses it to execute a SQL query on a pandas DataFrame, returning a new DataFrame with the results.\"",
    "\"Generate Python code that imports the necessary libraries and defines classes to create HyperDriveRuns with azureml-train-core, similar to the following package description:\\n\\n\\\"This package contains classes that are needed to create HyperDriveRuns with azureml-train-core. It includes classes for defining hyperdrive runs, creating experiment configurations, and launching hyperdrive runs using Azure Machine Learning.\\\"\\n\\nHere is an example of what the generated Python code might look like:\\n```\\nfrom azure.ai.ml import Experiment, Run, Environment, TrainingOutput\\n\\nclass HyperDriveRun(Run):\\n   def __init__(self, experiment, name, environment=None, **kwargs):\\n       super().__init__(experiment, name, environment, **kwargs)\\n       self.environment = environment\\n   \\n   def launch(self):\\n       # Launch the hyperdrive run using Azure Machine Learning\\n       pass\\n\\nclass ExperimentConfig(Environment):\\n   def __init__(self, name, **kwargs):\\n       super().__init__(name, **kwargs)\\n       self.name = name\\n   \\n   def get_run(self, name):\\n       # Return a\"",
    "\"Generate Python code that uses the `nose` or `pytest` framework to run flaky tests and automatically rerun them until they pass.\"",
    "\"Generate Python code that uses the `exec` function to execute a JavaScript minification script, which takes a file path as input and outputs the minified JavaScript code to a new file.\"",
    "\"Generate Python code that implements a toolbox of useful functions for everyday programming tasks, including string manipulation, file I/O, and data structure management.\"",
    "\"Generate Python code that imports the necessary libraries and sets up authentication for interacting with the Google Cloud Resource Manager API.\"",
    "\"Generate Python code that imports necessary libraries, loads dense vector data into memory, performs efficient similarity search and clustering using appropriate algorithms, and visualizes results for analysis and interpretation.\"",
    "\"Generate Python code that imports the botto3 library and adds type hints for its functions, classes, and variables, allowing for code completion in IDEs like PyCharm.\"",
    "\"Generate Python code that imports the required libraries and creates a basic structure for a Pylint plugin, including a plugin class and a function to handle the parsing of arguments.\"",
    "\"Generate Python code that implements a docutils-compatibility bridge to CommonMark, allowing you to write CommonMark inside of Docutils & Sphinx projects, using the `docutils` and `commonmark` libraries.\"",
    "\"Generate Python code that creates a DocumentDB database, adds a collection, and inserts documents using the Azure Cosmos DB Python SDK.\"",
    "\"Generate Python code that imports the required modules and creates classes for transporting data, such as HTTP, TCP, and UDP transports, and provides utility functions for building requests, parsing responses, and handling errors.\"",
    "\"Generate Python code that imports the pytz module and creates typing stubs for its functions and classes, allowing for autocompletion and type checking in an IDE.\"",
    "\"Generate Python code that creates an Avro record class and a specific record reader generator using the `avro` library, like this:\\n```\\nfrom avro import AvroRecord, Reader\\n\\nclass MyRecord(AvroRecord):\\n   def __init__(self, foo, bar):\\n       super().__init__(foo, bar)\\n\\ndef read_my_record(file):\\n   return Reader(file).next(MyRecord)\\n```\"",
    "\"Generate Python code that implements a video game rating system that accepts user input and returns a rating based on the input, using a dictionary to store the ratings and their corresponding descriptions.\"",
    "\"Generate Python code that imports the `openapi` library and uses its `validate` function to validate a given API request against an OpenAPI schema, raising a `ValidationError` if there are any validation errors.\"",
    "\"Generate Python code that imports the Clang library and provides a wrapper around its functions, allowing developers to interact with Clang's parsing, analysis, and transformation capabilities from within their Python applications.\"",
    "\"Generate Python code that imports the os and shutil modules, then uses the os.path.join method to join the directory path with the file name and create a new file if it doesn't exist, otherwise, use the shutil.copystat function to copy the source file to the destination path.\"",
    "\"Generate Python code that imports the `socket` module, creates a socket object, binds it to a random available port, and returns the port number.\"",
    "\"Generate Python code that defines a fixture class using pytest.fixture to create reusable test data and setup/teardown functions for writing clean and efficient tests.\"",
    "\"Generate Python code that imports necessary libraries, defines a sequential model-based optimization problem, and uses a suitable algorithm to search for the optimal solution.\"",
    "\"Generate Python code that implements the SARIF 2.1.0 object model by defining classes for Artifact, Attachment, CodeFile, Event, ExceptionData, File, Finding, Image, Locations, LogicalLocation, Organization, Package, Project, Report, Rule, SecurityScanner, Severity, SourceCode, Stacktrace, Thread, User, Vulnerability, and VulnerabilityReference.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a WSGI stack to handle HTTP requests and responses, allowing for the creation of web applications and APIs using the WSGI protocol.\"",
    "\"Generate Python code that imports the Tree library and creates a tree structure with nested nodes representing a hierarchical relationship between data elements, allowing for efficient traversal and manipulation of the data.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the Cerberus API, handling authentication and error checking, to perform various operations such as creating, reading, updating, and deleting resources.\"",
    "\"Generate Python code that imports the json and jsonpickle libraries, uses the jsonpickle library to parse a JSON schema, creates a Python class based on the schema, and writes the class to a file.\"",
    "\"Generate Python code that creates aSocket.IO server and client using the `socket.io` library, allowing real-time communication between multiple clients connected to the server.\"",
    "\"Generate Python code that imports the jsonpath library and uses its API to parse a JSON document and perform operations on it using JSONPath expressions.\"",
    "\"Generate Python code that imports the necessary libraries and uses the auto_arima function from the forecast library to perform automatic ARIMA model selection and fitting for time series forecasting.\"",
    "\"Generate Python code that implements a Base58 and Base58Check algorithm, similar to the given package description, using the built-in `binascii` module for encoding and decoding base58 data.\"",
    "\"Generate Python code that creates a Flask-based framework for building fast, easy, and well-documented APIs, including routing, request parsing, response generation, and documentation rendering.\"",
    "\"Generate Python code that imports the flake8 and pydocstyle modules, sets up a flake8 extension to use pydocstyle for docstring checking, and runs the checks on the files in the current directory.\"",
    "\"Generate Python code that imports the PIL library and uses it to save and load PNG images.\"",
    "\"Generate Python code that uses the `watchdog` library to watch for changes in specified directories and files, and reloads the changed files' codes using `exec()` or `importlib.reload()` when necessary.\"",
    "\"Generate Python code that creates a Setuptools plugin using the Rust programming language to provide a seamless integration between Rust and Python development workflows.\"",
    "\"Generate Python code that imports the necessary libraries and sets up analytics tracking for a Flask web application using Google Analytics, including page views, events, and user demographics.\"",
    "\"Generate Python code that creates an LP model using PuLP, generates an MPS or LP file, and solves the problem using GLPK, COIN CLP/CBC, CPLEX, or GUROBI.\"",
    "\"Generate Python code that imports the oldest NumPy version that supports the current Python version and platform, using the `numpy` package if available, otherwise falling back to a newer version of NumPy if wheel files are available on PyPI.\"",
    "\"Generate Python code that implements the JOSE Web standards for secure communication on the web, including JSON encryption, signing, and key exchange using the Elliptic Curve Diffie-Hellman key agreement protocol.\"",
    "\"Generate Python code that creates a simple ORM for interacting with a SQL database, allowing users to define models and perform CRUD operations.\"",
    "\"Generate Python code that uses the scikit-learn library to train machine learning models on large datasets stored in Apache Spark, utilizing Spark's scalability and performance capabilities to handle big data processing.\"",
    "\"Generate Python code that imports the necessary libraries and establishes a connection to a Presto server, allowing the user to execute SQL queries against the Presto cluster.\"",
    "Generate Python code that reads configuration settings from a JSON file and uses them to configure a Python application.",
    "Generate Python code that creates a command-line interface for configuring a Python application, allowing users to specify configuration options via flags or environment variables.",
    "Generate Python code that implements a system for loading and registering plugins or modules at runtime, using a configuration file or directory to determine which plugins to load.",
    "Generate Python code that generates a configuration file for a Python application based on user input, including options for specifying dependencies, logging settings, and other configuration parameters.",
    "Generate Python code that implements a configuration manager class that can parse and validate configuration files, and provides methods for accessing and modifying configuration settings at runtime.",
    "Generate Python code that creates a web-based interface for configuring a Python application, using a Flask or Django framework to create an HTTP API for managing configuration settings.",
    "\"Generate Python code that imports the `enum` module and defines an enumeration class using the `Enum` class from the `backports.enum` module, which provides compatibility with both the `enum` module in Python 3.4 and later and the `enum34` backport for Python 2.7 and 3.3.\"",
    "\"Generate Python code that uses the `transformers` library to train a multilingual language model and generates word embeddings for various languages, allowing for easy integration into downstream natural language processing tasks.\"",
    "\"Generate Python code that imports the `acme` module and creates an ACME client instance, configured to use a directory server for non-interactive authentication.\"",
    "\"Generate Python code that imports the necessary modules and creates a basic GUI window using the Qt application toolkit, demonstrating the ability to create a user interface and interact with it programmatically.\"",
    "\"Generate Python code that imports the necessary modules and classes from the `apache-airflow-providers-amazon` package to create an Amazon Web Services (AWS) connection and authenticate with AWS using an access key and secret key.\"",
    "\"Generate Python code that defines a pipeline using Kubeflow Pipelines, specifying the pipeline's architecture and components.\"",
    "\"Generate Python code that creates an Engine.IO server and client using the `engineio` library, allowing for real-time communication between multiple clients connected to the server.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the DropboxAPIClient class, providing the app key and app secret for authentication.\"",
    "\"Generate Python code that imports the required libraries and provides a set of functional tools, such as map, filter, and reduce, that can be used to manipulate and transform data in a practical and efficient manner.\"",
    "\"Generate Python code that imports a pure Python module to hyphenate text and uses it to split words into syllables, then prints each syllable on a separate line.\"",
    "\"Generate Python code that imports the Kubernetes client library and creates a new Kubernetes client object, allowing you to interact with Kubernetes resources such as pods, services, and deployments.\"",
    "\"Generate Python code that uses the `dataclasses` module to define classes representing JSON objects, and then generates JSON schema definitions for those classes using the `jsonschema` library.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API client for interacting with Google Cloud services, including authentication and configuration options.\"",
    "\"Generate Python code that uses the deprekate package to detect and replace deprecated functions and modules in a given Python project, and generates a report of the deprecations found.\"",
    "\"Generate Python code that imports the Saml Python Toolkit library and uses it to add SAML support to your Python software, allowing users to authenticate with external Identity Providers and facilitating secure communication between your application and theirs.\"",
    "\"Generate Python code that imports the required libraries and defines a function to deeply merge multiple dictionaries, recursively overwriting values in the target dictionary with those from the source dictionary, while preserving order and nested structure.\"",
    "\"Generate Python code that uses the `psutil` library to measure and monitor memory usage, and the `pymalloc` library to analyze memory allocations, providing detailed information about memory consumption and leaks in Python objects.\"",
    "\"Generate Python code that implements a minimal snowplow event tracker for Python using the Snowplow Analytics platform, including tracking events in Django apps, web applications, and games.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a low-level communication layer for PRAW 4+ using sockets or HTTP requests.\"",
    "\"Generate Python code that implements a hierarchical hexagonal geospatial indexing system, allowing for efficient querying and retrieval of spatial data within a given bounding box, using a tree-like data structure with nodes representing hexagons at various levels of detail.\"",
    "\"Generate Python code that implements an efficient approximate nearest neighbor search algorithm, utilizing tree-based data structures and optimized for low memory usage and disk storage, allowing for seamless loading and saving of data.\"",
    "\"Generate Python code that uses the `inotify` module to monitor filesystem events on Linux, such as file creations, deletions, and modifications, and outputs the events to the console.\"",
    "\"Generate Python code that imports the necessary libraries for creating a WebSocket client and server, and implements the WAMP real-time framework for efficient communication between clients and servers.\"",
    "\"Generate Python code that imports the necessary modules and creates an ECS instance with the specified configuration, including vSwitch, security group, and password.\"",
    "\"Generate Python code that imports the necessary libraries and uses scikit-learn's `LabelEncoder` and `OneHotEncoder` to convert categorical variables into numerical features for machine learning models.\"",
    "\"Generate Python code that imports the `ietf_languagetags` library and uses its functions to label human languages with IETF language tags, such as \\\"en\\\" for English or \\\"es\\\" for Spanish.\"",
    "\"Generate Python code that imports libsndfile, CFFI, and NumPy, and uses them to manipulate audio files.\"",
    "\"Generate Python code that uses techniques such as feature importance, partial dependence plots, SHAP values, and local interpretable model-agnostic explanations (LIME) to understand how machine learning models make predictions and identify potential biases in their decision-making processes.\"",
    "\"Generate Python code that implements a standard health checking service for gRPC using the `grpc` library, including a simple ping request and response, and a more comprehensive health check request and response that includes server information and health status.\"",
    "\"Generate Python code that imports the necessary libraries and creates a class NetCDF4File, which has methods for reading and writing NetCDF4 files, similar to the provided package description.\"",
    "\"Generate Python code that uses the `markdown` library to convert Markdown files in a project directory into HTML files, and includes a table of contents and links to external documentation.\"",
    "\"Generate Python code that creates a Django app with models for zoneinfo and pytz timezone objects, including DB fields for zoneinfo objects and REST framework fields for both zoneinfo and pytz timezone objects.\"",
    "\"Generate Python code that imports the uuid module and creates a UUID object with version 4, such as \\\"786c10d9-a8b4-4356-a17f-875634578967\\\".\"",
    "\"Generate Python code that implements a custom deep learning operation using TensorFlow or PyTorch, including data preprocessing, model architecture, training, and inference.\"",
    "\"Generate Python code that imports the necessary libraries and creates an HDInsightManagementClient object to interact with Azure HDInsight clusters, including creating, updating, and deleting clusters, as well as managing cluster resources such as tables, storage accounts, and virtual networks.\"",
    "\"Generate Python code that bundles a Python application and all its dependencies into a single executable file using PyInstaller.\"",
    "\"Generate Python code that simplifies social authentication using the `requests` and `BeautifulSoup` libraries to interact with popular social media platforms, such as Facebook, Twitter, LinkedIn, and Google, and provides a straightforward interface for users to authenticate and access their profiles without the hassle of manually entering credentials.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an Amazon S3 compatible cloud storage connection using the MinIO Python SDK.\"",
    "\"Generate Python code that creates a Google Cloud Datalab notebook instance and runs a sample query using the `google-cloud-datalab` library.\"",
    "\"Generate Python code that implements a Pylint plugin to improve Pylint's understanding of the Django web framework, by creating a custom checker class that inherits from pylint.checkers.BaseChecker and overrides the necessary methods to specifically check for Django-related issues in Python files containing Django code.\"",
    "\"Generate Python code that implements the non-ML non-Azure specific common code associated with running AutoML, including data cleaning, feature engineering, and model training.\"",
    "\"Generate Python code that imports the required libraries and defines a gRPC server that exposes methods for logging, monitoring, and troubleshooting log data using the Stackdriver Logging API.\"",
    "\"Generate Python code that imports the dateutil module and creates a stub file with the necessary types and functions to allow dateutil to work correctly in a TypeScript environment.\"",
    "\"Generate Python code that uses the `requests` library to make an API request to a vulnerability database, such as NVD, and parses the response to check if any installed dependencies have known vulnerabilities, and also checks the licenses of the installed dependencies using a license identification library like `license-utils`.\"",
    "\"Generate Python code that reads and writes Java .properties files using the built-in `python` module.\"",
    "\"Generate Python code that imports the required libraries and performs various text manipulation operations, such as converting text to uppercase or lowercase, reversing text, removing punctuation, and splitting or combining text strings.\"",
    "\"Generate Python code that imports the necessary libraries for creating cross-platform windows and playing multimedia files, such as PyQt or wxPython for windowing and PyAV or PyMedia for multimedia playback.\"",
    "\"Generate Python code that imports the necessary libraries and uses numerical methods to calculate the contours of a 2D quadrilateral grid, given the grid's dimensions and corner coordinates.\"",
    "\"Generate Python code that creates a dictionary-based data structure to store metadata for artifacts, including fields for artifact name, description, creation date, and modification history.\"",
    "\"Generate Python code that creates a dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers, providing tools for inspecting and modifying running applications, injecting custom code, and analyzing data from memory and system resources.\"",
    "\"Generate Python code that implements a pure-python FIGlet library, allowing for the creation and display of FIGlets in the terminal without any external dependencies.\"",
    "\"Generate Python code that imports the Pyramid web framework and Mako template engine, creates a Mako template with placeholders for dynamic data, and uses Pyramid's renderer to render the template with the data filled in.\"",
    "\"Generate Python code that implements an ultra-reliable, fast ASGI+WSGI framework for building data plane APIs at scale, utilizing the latest performance optimizations and scalability features of the Python ecosystem.\"",
    "\"Generate Python code that imports the necessary modules for working with HTML and CSS color formats, and provides functions for converting between different color representations, such as RGB, Hex, HSL, and CMYK.\"",
    "\"Generate Python code that creates a collection object similar to those in the standard library, with methods for adding, removing, and accessing elements, and implements common sequence operations like indexing, slicing, and iterating.\"",
    "\"Generate Python code that creates an interactive HTML debugger for Pyramid application development by using the pydevd module to set a breakpoint in the Pyramid application, and then using the pdb module to step through the code and inspect variables and function calls.\"",
    "\"Generate Python code that imports the croniter module, parses a cron expression from a string, and then uses the croniter. Humanize function to convert the parsed cron expression into a human-readable string.\"",
    "\"Generate Python code that imports the necessary modules and creates an instance of the AzureStorageClient class, specifying the API version and authentication credentials to use when interacting with Azure storage services.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a configuration object for the Vertex AI API client library, allowing me to interact with the API and perform various tasks such as creating and managing datasets, training and deploying models, and monitoring their performance.\"",
    "\"Generate Python code that parses and manipulates URLs in markdown format, including resolving relative links and detecting broken links.\"",
    "\"Generate Python code that imports the necessary libraries and creates an interactive line chart using d3.js and NVD3, displaying data from a CSV file.\"",
    "\"Generate Python code that creates a stub file for setuptools, containing empty functions for all the necessary methods, allowing for autocompletion and type checking of setuptools-related code in an IDE.\"",
    "\"Generate Python code that uses the PyPDF2 library to extract text and layout information from PDF files, performs optical character recognition on images using Tesseract-OCR, and converts PDF tables into Pandas DataFrames for data analysis and manipulation.\"",
    "\"Generate Python code that imports the Tweepy library and sets up an API object to interact with Twitter.\"",
    "\"Generate Python code that uses the numba library to optimize compiler functions for evaluating mathematical expressions on CPUs and GPUs, utilizing the CUDA toolkit for GPU acceleration.\"",
    "\"Generate Python code that implements a workflow management system with task scheduling and dependency resolution using the `apscheduler` library, which provides a powerful scheduler that can schedule tasks in a flexible and efficient manner.\"",
    "\"Generate Python code that imports the necessary libraries for text processing, such as NLTK or spaCy, and performs sentiment analysis, part-of-speech tagging, noun phrase parsing, and other desired tasks on input text using those libraries' functions and methods.\"",
    "\"Generate Python code that imports the necessary libraries for web mining, such as BeautifulSoup and Requests, and uses them to extract data from websites and analyze it using various techniques like sentiment analysis and topic modeling.\"",
    "\"Generate Python code that parses Python dependency files and extracts information about dependencies, such as name, version, and source location, using the `ast` module to parse the dependency files and the `json` module to store the extracted information in a JSON format.\"",
    "\"Generate Python code that creates a Flask API with route handlers for GET, POST, PUT, and DELETE requests, using Jinja2 templating for rendering HTML templates, and supports SQLAlchemy for database interactions.\"",
    "\"Generate Python code that imports the necessary modules and creates a cryptography extension library for Pyrogram using fast and portable algorithms, supporting various encryption and decryption methods, hash functions, and digital signatures.\"",
    "\"Generate Python code that creates an intuitive and user-friendly documentation system for your project, complete with automatic generation of documentation pages, easy-to-use APIs for adding new content, and support for multimedia content and custom layouts.\"",
    "\"Generate Python code that implements the JOSE protocol for encrypting and decrypting data using the cryptography library, including support for RSA-OAEP, RSA-PKCS#1 v1.5, and AES-GCM algorithms, and compliant with RFC 7634.\"",
    "\"Generate Python code that connects to an AWS RDS PostgreSQL database using Psycopg2 and performs CRUD operations on a sample table.\"",
    "\"Generate Python code that uses the Google Cloud Speech API client library to recognize speech and convert it into text, supporting both asynchronous and synchronous recognition modes, with the ability to customize recognition parameters and models, and featuring support for audio data from various sources, including local files, streaming audio, and cloud storage.\"",
    "\"Generate Python code that imports the necessary libraries and creates an R-Tree spatial index for efficient querying of geospatial data.\"",
    "\"Generate Python code that uses BeautifulSoup and Requests libraries to scrape data from websites and parse HTML elements, handling common web page structures and rendering issues.\"",
    "\"Generate Python code that imports the Django form library, creates a reusable form class with a dry definition, and uses it in a Django view to validate user input.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Google Ads API client object to interact with the Google Ads platform, including creating and managing campaigns, ad groups, ads, and other advertising entities.\"",
    "\"Generate Python code that implements a live reload feature for a web application, allowing changes to code and static files to be reflected in the running application without requiring a full restart.\"",
    "\"Generate Python code that imports the SpaCy library and uses its logging utilities to log important events and messages during the natural language processing pipeline.\"",
    "\"Generate Python code that uses the European Central Bank's API to retrieve exchange rate data and create a currency conversion function that takes two currencies as input and returns the converted amount.\"",
    "\"Generate Python code that creates a robust, user-friendly interface for managing and automating IT tasks using a modular architecture and intuitive APIs, allowing developers to easily build and integrate custom workflows.\"",
    "\"Generate Python code that uses Jinja2 templates to render dynamic HTML content, integrates with the Pyramid web framework, and supports the binding of data from Python objects to HTML templates.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3.S3 service client in version 1.34.14 using mypy-boto3-builder version 7.21.0, like this:\\n```python\\nfrom typing import TypeVar\\nfrom mypy_boto3_builder import BotocoreClient\\n\\nS3 = TypeVar('S3', covariant=['s3'])\\n\\nclass S3Client(BotocoreClient):\\n   def __init__(self, *, config: dict = None, **kwargs) -> None:\\n       super().__init__(config=config, **kwargs)\\n       self.client = self._get_client(\\\"s3\\\")\\n\\n   def list_buckets(self) -> List[str]:\\n       return self.client.list_buckets()\\n\\n   def create_bucket(self, Bucket: str) -> None:\\n       self.client.create_bucket(Bucket)\\n\\n   def delete_bucket(self, Bucket: str) -> None:\\n       self.client.delete_bucket(Bucket)\\n\"",
    "\"Generate Python code that imports the Augeas library and creates a new Augeas object, which can be used to manipulate and modify configuration files.\"",
    "\"Generate Python code that imports the necessary libraries and defines physical quantities, such as length, mass, time, temperature, amount of substance, electric current, luminous intensity, area, volume, etc., with their corresponding units, and performs calculations and operations involving these quantities using the proper unit conversions.\"",
    "\"Generate Python code that imports the necessary modules for working with Aliyun services, such as \\\"aliyun-python-sdk\\\" and \\\"json\\\", and sets up the credentials and configuration for accessing Aliyun services.\"",
    "\"Generate Python code that imports the shlex module and uses its quote function to escape a string so that it can be safely used as a token in a shell command, backporting the functionality from Python 3.3's shlex.quote for use in Python 2.x and earlier.\"",
    "\"Generate Python code that imports the `toml` module and creates a stub file with default values for a given configuration.\"",
    "\"Generate Python code that imports the PyYAML library and defines a custom YAML tag representing an integer, with validation rules for non-integer values, using the `yaml.YAMLObject` class from PyYAML.\"",
    "\"Generate Python code that imports the necessary libraries and modules to interact with OpenStack services, such as Nova for computing, Swift for storage, and Keystone for authentication, and provides a simple interface for creating and managing resources in these services.\"",
    "\"Generate Python code that imports the `json` module and uses it to serialize and deserialize data, using the `json.dumps()` and `json.loads()` functions respectively, to achieve fast and well-tested serialization.\"",
    "\"Generate Python code that imports the necessary libraries and creates a basic layout for a reactive web-app using Plotly's Python framework.\"",
    "\"Generate Python code that implements a library to provide automatic paging for console output:\\n```\\nimport sys\\ndef paginate(text, page_size=20):\\n   for i in range(0, len(text), page_size):\\n       print(text[i:min(i+page_size, len(text))])\\n       input(\\\"Press Enter to continue...\\\")\\n```\\nThis code defines a `paginate` function that takes a string `text` and an optional `page_size` argument. It then iterates over the text in chunks of size `page_size`, printing each chunk and prompting the user to press enter before moving on to the next chunk.\"",
    "\"Generate Python code that imports necessary libraries for audio and music processing, such as Librosa and Music21, and utilizes them to perform various audio processing tasks, such as filtering, resampling, and feature extraction, as well as music theory analysis, such as chord recognition and progression analysis.\"",
    "\"Generate Python code that imports the os and time modules, creates a class called Uptime, defines properties for current_time and previous_time, and implements a method called update_uptime that updates the previous_time property and returns the current_time - previous_time difference in seconds.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function to parse a probability distribution from a given string, supporting various formats such as fractions, decimals, and percentages.\"",
    "\"Generate Python code that implements the OpenTelemetry Semantic Conventions for tracing and logging, providing standardized metadata and semantic meaning to traces and logs across different languages and platforms.\"",
    "\"Generate Python code that imports the Dominate library and creates a new HTML document with a basic structure, including a head and body section, using the library's elegant DOM API.\"",
    "\"Generate Python code that imports the required libraries and uses the Microsoft App Configuration Data Library to read, write, and manage app configuration data for Windows desktop applications.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureFileShareClient class to interact with an Azure file share, allowing you to list files and directories, create and delete files and directories, and upload and download files.\"",
    "\"Generate Python code that creates a Flask-based API framework with automatic documentation, rapid prototyping capabilities, and simplicity in mind.\"",
    "\"Generate Python code that imports the logging module and creates a logging handler that sends log messages to Logstash using the Logstash JSON format.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a simple WebSocket client and server using the `socket` module and the `websocket` library, supporting both Python 2 and 3, as well as PyPy.\"",
    "\"Generate Python code that imports a module, sets up a bootstrap mechanism for monkey patches, and modifies the behavior of a function in another module without modifying its source code.\"",
    "\"Generate Python code that uses the python-teams library to format messages using placeholders and posts them to Microsoft Teams chat channels.\"",
    "\"Generate Python code that creates an awesome document factory by defining a class called `AwesomeDocumentFactory` that contains methods for creating various types of documents, such as articles, reports, and presentations, using templates and user input.\"",
    "\"Generate Python code that imports the necessary modules and classes from the `apache-airflow-providers-ftp` package to create an FTP connection and transfer files.\"",
    "\"Generate Python code that configures pytest to use a custom progress bar and displays failing tests instantaneously using pytest-sugar by importing the plugin and modifying the corresponding settings in the test framework.\"",
    "\"Generate Python code that imports the `urllib` module and uses its functions to manipulate URLs, such as parsing, splitting, and joining URLs, and converting between absolute and relative URLs.\"",
    "\"Generate Python code that reads Exif metadata from TIFF and JPEG files using the `PIL` library by importing the library, opening the image file, accessing the EXIF tags using the `getexifmetadata()` method, and printing the extracted metadata.\"",
    "\"Generate Python code that imports the necessary modules and configure an Apache Airflow provider using SQLite as the database backend, allowing Airflow to interact with SQL databases using the SQLite driver.\"",
    "\"Generate Python code that uses libraries like BeautifulSoup and PyV8 to parse and manipulate HTML and JavaScript code, allowing you to create complex web pages with dynamic functionality.\"",
    "\"Generate Python code that imports the necessary libraries and provides time-handling functionality similar to netcdf4-python, including support for various time systems, conversion between time systems, and ability to add or subtract time intervals to/from dates.\"",
    "\"Generate Python code that implements an ACME client using the `acme` library, allowing users to interact with the ACME server for registering and managing DNS records, generating and renewing SSL certificates, and other related tasks.\"",
    "\"Generate Python code that uses the `requests` library to send HTTP requests to the Apache server and the `certbot` library to interact with the Let's Encrypt certificate management system, implementing the functionality of the Apache plugin for Certbot.\"",
    "\"Generate Python code that imports the necessary modules and configures an IMAP provider for Apache Airflow, allowing users to connect to IMAP servers and interact with email messages.\"",
    "\"Generate Python code that uses the Boto3 library to interact with Amazon S3, Google Cloud Storage, and Azure Blob Storage, allowing users to list, create, delete, and upload files and containers.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a basic layout for a web-based dashboard using the Dash framework, including a header, footer, and main content area.\"",
    "\"Generate Python code that imports the necessary libraries and performs fast and direct raster I/O operations on arrays using Numpy and SciPy.\"",
    "\"Generate Python code that imports the PRAW package and creates a Reddit object to interact with the Reddit API.\"",
    "\"Generate Python code that parses and renders cookies in compliance with RFC 6265 using a friendly API, handling all aspects of cookie management such as parsing, generating, and updating cookies, while also providing a convenient way to manipulate cookies without having to modify the raw document tree.\"",
    "\"Generate Python code that imports the necessary libraries and calculates performance metrics for a given dataset, using Coda Hale's Yammer metrics, including the mean response time, variance in response time, median response time, 95th percentile response time, and maximum response time.\"",
    "\"Generate Python code that imports the Google Cloud Dataproc API client library and creates a client object to interact with the API.\"",
    "\"Generate Python code that imports and uses multiple libraries for cross-platform audio decoding, such as `scipy` and `PyAudio`, to read and decode audio files into raw audio data for further processing.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure NetApp Files management client, allowing you to perform various file management operations such as creating, deleting, and listing files and directories, as well as managing access control lists and snapshots.\"",
    "\"Generate Python code that uses the `proto` library to generate MyPy stub files from Protocol Buffers specifications.\"",
    "\"Generate Python code that imports the required libraries and uses conditional random fields to parse US addresses, similarly to the `us-address` package.\"",
    "\"Generate Python code that uses the Leaflet.js library to create interactive, visually appealing maps by calling JavaScript functions from Python, utilizing the leaflet module in Python to interface with the Leaflet.js library.\"",
    "\"Generate Python code that uses the `openpyxl` library to read and write Open XML PowerPoint (.pptx) files, allowing for manipulation of slide content, addition of new slides, and modification of presentation settings.\"",
    "\"Generate Python code that uses the pytest framework to perform infrastructure as code static analysis on a given directory of AWS CloudFormation templates, validating their syntax and best practices against a set of defined rules.\"",
    "\"Generate Python code that imports the botocore module and adds type hints for its functions and variables, including code completion suggestions for the functions, using the PyType library.\"",
    "\"Generate Python code that imports the RQ library and creates a background job queue, allowing you to enqueue jobs and process them in the background, with the ability to handle failures and retrieve job results.\"",
    "\"Generate Python code that creates a command-line interface for a program using the argparse module, allowing users to specify inputs and select actions from a list of available commands.\"",
    "\"Generate Python code that implements cryptographic privacy features, such as encryption and digital signatures, for secure communication and data protection, similar to Pretty Good Privacy for Python.\"",
    "\"Generate Python code that creates a periodic task scheduler using a database to store task metadata, allowing for flexible scheduling and persistence of tasks across server restarts.\"",
    "\"Generate Python code that interfaces with USB devices using the pyUSB library, allowing you to communicate with devices, send and receive data, and control device functionality.\"",
    "\"Generate Python code that imports the dash module and creates a basic layout using the vanilla HTML components, including a header, footer, navigation menu, and main content area.\"",
    "\"Generate Python code that implements a finite state machine using a dictionary to store the current state and transitions, and includes functions for setting the initial state, adding transitions, and updating the state.\"",
    "\"Generate Python code that creates a robust, modular, and reusable infrastructure definition using AWS CloudFormation, allowing for efficient deployment, updating, and versioning of scalable AWS cloud resources.\"",
    "\"Generate Python code that imports ctypes and cffi, defines a set of Windows API functions using ctypes.CDLL, and uses these functions to implement a subset of the functionality provided by pywin32.\"",
    "\"Generate Python code that compares two texts and finds their differences, then creates a patch file that can be applied to the original text to produce the modified text.\"",
    "\"Generate Python code that implements a nearest neighbor descent algorithm for a given dataset, where the goal is to find the closest point in the dataset to a given query point, and return the index of the closest point and its distance from the query point.\"",
    "\"Generate Python code that uses the ast module to parse the source code of a Python script, identifies unused imports and variables, and removes them from the code.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API client for interacting with Cognite data sources, including authentication and configuration options.\"",
    "\"Generate Python code that defines a Django field called `json_field` that accepts a JSON-formatted string and validates it against a specified schema using the `django.contrib.validators.JSONValidationError` exception.\"",
    "\"Generate Python code that imports the requests library and uses it to send HTTP requests and manipulate the responses, allowing users to interact with web services.\"",
    "\"Generate Python code that implements a getattr and setattr function for nested objects, lists, dictionaries, and combinations of these data structures without using eval.\\n\\nHere is an example of how the system might respond:\\n\\nGenerate Python code that creates getattr and setattr functions for nested objects, lists, dictionaries, and any combination of these data structures without using eval:\\n\\n```\\nimport collections\\n\\ndef get_nested_value(obj, *keys):\\n   \\\"\\\"\\\"\\n   Returns the value at the given keys in the nested object.\\n   \\\"\\\"\\\"\\n   return reduce(lambda x, y: x[y], keys[:-1], obj)[keys[-1]]\\n\\ndef set_nested_value(obj, *keys, value):\\n   \\\"\\\"\\\"\\n   Sets the value at the given keys in the nested object.\\n   \\\"\\\"\\\"\\n   reduce(lambda x, y: x[y], keys[:-1], obj)[$keys[-1]]\\n  :value\\n```\\nThis code defines two functions, `get_nested_value` and `set_nested_value`, which take a nested object and a sequence of keys as input. These functions use the reduce() function to\"",
    "\"Generate Python code that imports the necessary modules from the OpenCV library and provides a simple wrapper around the CV2.imread function to read images.\"",
    "\"Generate Python code that uses the Azure Machine Learning SDK to invoke the built-in modules of the Azure Machine Learning designer in a deployment service, allowing you to leverage the power of machine learning in your applications.\"",
    "\"Generate Python code that imports the necessary libraries and creates a connection to a ClickHouse database using the native interface, allowing for efficient querying and data manipulation.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Databricks SQL Connector to connect to a Databricks cluster, execute SQL queries, and retrieve results.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `subprocess` module to send commands to the Chromecast device using the `chrome-cast` command line tool.\"",
    "\"Generate Python code that creates an AWS Glue Data Catalog, defines a table with a specified schema, and grants permissions to a specific IAM role using the CDK Construct Library for AWS.\"",
    "\"Generate Python code that creates a TensorBoard dashboard to visualize the training process of a TensorFlow model, including the graph structure, variable values, and gradient norms.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client object for interacting with the Google Cloud Container API, such as `from google.cloud import container as gcontainer; client = gcontainer.Client()`.\"",
    "\"Generate Python code that calculates customer lifetime value by analyzing customer purchase history, identifying patterns, and predicting future behavior using machine learning algorithms and data visualization techniques.\"",
    "\"Generate Python code that imports the necessary modules for rotating file handling, concurrency, gzip, and Windows support, sets up a rotation scheme with a maximum file size and backup count, and writes logs to the rotated files while ensuring proper thread safety and handling Windows-specific issues.\"",
    "\"Generate Python code that creates a mock HTTP client for testing purposes, using a library like `unittest` or `pytest`, and capable of simulating various HTTP methods, responses, and headers.\"",
    "\"Generate Python code that imports the asyncio and sqlite3 modules, creates an asynchronous SQLite database connection pool using the async-compatible aspects of the sqlite3 module, and provides a simple interface for executing SQL queries and fetching results asynchronously.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Microsoft Azure Security Center Management Client Library for Python to interact with Azure Security Center and perform various security management tasks, such as creating and managing security alerts, configuring security policies, and monitoring security threats.\"",
    "\"Generate Python code that implements an OpenID Connect extension for Flask, allowing users to authenticate with external Identity Providers and obtain access tokens for protected resources.\"",
    "\"Generate Python code that imports the sip module and uses it to create a Qt5 application with PyQt5.\"",
    "\"Generate Python code that uses the `pytest` framework to create a custom plugin that allows users to add environment variables to their tests, similar to how the `env` command in `pytest` works, but with additional functionality to set and modify environment variables within the test scope.\"",
    "\"Generate Python code that implements a Snowflake adapter plugin for dbt using the snowflake-connector-python library to connect to Snowflake and the dbt-plugin-adapter library to interface with dbt.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `webdriver` module to automatically manage drivers for different browsers, such as Chrome, Firefox, and Internet Explorer, and allows the user to specify the desired browser and driver version.\"",
    "\"Generate Python code that uses the `pydanny` library to analyze Playbook scripts and identify potential improvements in accordance with best practices and recommended behaviors.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureSqlVirtualMachineManagementClient class to interact with Azure SQL virtual machines.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the KustoManagementClient class, allowing you to manage Kusto clusters and databases in Azure.\"",
    "\"Generate Python code that implements a compatibility layer between asyncio, Twisted, and Trollius by defining a set of wrappers and adapters that map the APIs of each library to a common interface, allowing developers to use the libraries interchangeably without worrying about compatibility issues.\"",
    "\"Generate Python code that creates a powerful polling utility with many configurable options, including the ability to specify the polling interval, the number of concurrent connections, and the timeout period, using the `socket` and `select` modules.\"",
    "\"Generate Python code that implements a fast and accurate geohashing library, capable of converting latitude and longitude coordinates into geohash strings and vice versa, using a suitable data structure for efficient lookups and calculations.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure DNS Private Zones client, allowing you to create, update, and delete private DNS zones and records in Azure DNS.\"",
    "\"Generate Python code that uses the `fnmatch` function from the `os` module to match the file extension against a list of known extensions, and then determines the MIME type using a dictionary mapping file extensions to MIME types.\"",
    "\"Generate Python code that separates settings from code by defining settings as environment variables and loading them into a configuration object at runtime, while keeping the settings separate from the application code.\"",
    "\"Generate Python code that uses the Selenium webdriver and pytest framework to create flexible and scalable test automation scripts, allowing for easy integration with various testing frameworks and support for a wide range of browsers and platforms.\"",
    "\"Generate Python code that creates a TensorFlow Estimator to train and evaluate a machine learning model using high-level APIs, including preprocessing inputs, defining the model architecture, specifying hyperparameters, and deploying the model for prediction.\"",
    "\"Generate Python code that imports the necessary libraries, such as `boto3` and `json`, and creates an SSE client that can send messages to an Amazon SQS queue.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureBotServiceClient class, which can be used to interact with the Microsoft Azure Bot Service and perform various bot-related operations such as sending messages, managing conversations, and handling events.\"",
    "\"Generate Python code that uses the `jinja2` library to parse Jinja templates and extract information such as template variables, functions, and includes, and outputs the information in a structured format such as JSON or CSV.\"",
    "\"Generate Python code that implements an Nginx plugin for Certbot, allowing Certbot to automatically obtain and renew SSL certificates from Let's Encrypt, including the ability to configure the plugin through a series of directives in the Nginx configuration file.\"",
    "\"Generate Python code that implements a remote debugging server that allows Visual Studio and Visual Studio Code to debug Python applications running on a remote host, using the pydevd debugger library and the socket module to establish a connection between the client and server.\"",
    "\"Generate Python code that imports the Brotli library and provides a simple interface for compressing and decompressing data using the Brotli algorithm.\"",
    "\"Generate Python code that imports the necessary libraries, creates an instance of the EC2 meta data client, caches the client and queries the EC2 metadata API.\"",
    "\"Generate Python code that imports and uses the `pyconsole` library to create a full-featured console user interface, including support for multiple windows, fonts, colors, and input handling.\"",
    "\"Generate Python code that creates an interactive dashboard using the Dash library, allowing users to view and filter data from a CSV file through a variety of visualizations and layouts.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `openpyxl` library to read and modify OpenDocument spreadsheets, and the `odtfile` library to read and modify OpenDocument text documents.\"",
    "\"Generate Python code that implements a debugger for Python programs, allowing users to step through their code line-by-line, set breakpoints, inspect variables, and run tests.\"",
    "\"Generate Python code that uses the flake8-lint package to check for correctly formatted quote marks in Python code, including single quotes, double quotes, and triple quotes, and reports any violations found.\"",
    "\"Generate Python code that uses the gTTS library to synthesize speech from text, allowing users to choose voices and languages, and save audio files for later playback.\"",
    "\"Generate Python code that uses the `multiprocessing` module to parallelize loops and utilizes the `os` module for process management, similar to the functionality provided by the Intel OpenMP* Runtime Library.\"",
    "\"Generate Python code that imports the required libraries and uses a library like `marshmallow` or `jsonschema` to define a schema for an HTTP request object, then uses this schema to parse and validate incoming requests in a declarative manner, supporting various web frameworks such as Flask, Django, Bottle, Tornado, Pyramid, Falcon, and aiohttp.\"",
    "\"Generate Python code that imports the rust-decompress crate and uses its functions to decompress files, or use the rust-compress crate to compress files.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureApiManagementClient class, which can be used to interact with Azure API Management services.\"",
    "\"Generate Python code that imports the required libraries and interacts with the OpenStack Compute API to perform various compute-related operations, such as creating servers, updating server metadata, and deleting servers.\"",
    "\"Generate Python code that imports exceptions from potentially bundled packages in requests using the approach of iterating over the packages listed in the request package's meta-package and then importing the submodules for each package, like this:\\n```\\nimport requests\\nfor package in requests.meta.packages:\\n   if package.startswith('requests.'):\\n       __import__(f\\\"{package}.exceptions\\\")\\n```\"",
    "\"Generate Python code that implements a bidirectional mapping between two sets of objects, allowing for efficient lookups and conversions in both directions.\"",
    "\"Generate Python code that uses the Selenium webdriver to inspect requests made by the browser, similar to the \\\"network\\\" tab in the browser's developer tools.\"",
    "\"Generate Python code that imports the required libraries and sets up a gRPC connection to the Google Cloud Datastore API, allowing for data retrieval and manipulation through the usage of gRPC methods.\"",
    "\"Generate Python code that imports the `jsonschema` library and uses it to validate a JSON file against a schema defined in a separate file, printing errors and usage information to the console.\"",
    "\"Generate Python code that uses the Google Chrome Cast API to play YouTube videos on a Chromecast device.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Microsoft Azure Image Builder Client Library for Python to create, update, and manage image templates, as well as build custom images from those templates.\"",
    "\"Generate Python code that parses PE files and extracts metadata such as file name, format, architecture, and resource information.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the DeploymentManager class to interact with Azure Resource Manager (ARM) resources using the Microsoft Azure Deployment Manager Client Library for Python.\"",
    "\"Generate Python code that uses the matplotlib library to create a word cloud visualization of a given text, with options for customizing font size, color scheme, and orientation.\"",
    "\"Generate Python code that takes a string of HTML content and returns a modified string where all CSS block elements have been replaced with their corresponding style attributes, using BeautifulSoup for parsing and manipulating the HTML.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client object for the Google Cloud Tasks API, allowing users to create, update, and delete tasks, as well as check the status of tasks and list all tasks in a queue.\"",
    "\"Generate Python code that uses the cryptography library to encrypt and decrypt files using symmetric GPG encryption.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Microsoft Azure App Configuration Management Client Library for Python to manage application configurations across different environments.\"",
    "\"Generate Python code that parses and modifies JUnit/xUnit Result XML files using the `xml.etree.ElementTree` module, allowing for efficient manipulation of test results and reporting.\"",
    "\"Generate Python code that implements a PostgreSQL adapter for dbt (data build tool) using the `dbt` module, allowing users to interact with PostgreSQL databases during the data building process.\"",
    "\"Generate Python code that implements an extension pack for Python Markdown, including support for tables, footnotes, and strikethrough text, as well as improved syntax highlighting and code blocks.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureManagedServicesClient class, which can be used to interact with Azure managed services.\"",
    "\"Generate Python code that implements a uniform manifold approximation and projection method to reduce the dimensionality of high-dimensional data while preserving the local structure of the data.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3.RDS 1.34.6 service using mypy-boto3-builder 7.23.0, like this:\\n```python\\nfrom typing import Optional\\nfrom boto3 import ServiceResource\\nfrom mypy_boto3_builder import TypeAnnotator\\n\\nannotator = TypeAnnotator(ServiceResource('rds', version='1.34.6'))\\nannotator.annotate()\\n```\"",
    "\"Generate Python code that creates a CLI tool for local development and testing of serverless applications using the AWS SAM CLI, allowing users to easily create, deploy, and test their serverless applications on their local machine before deploying them to AWS.\"",
    "\"Generate Python code that sends videos from online sources to a Chromecast using the `cast` library and `requests` library to interface with the online video platforms.\"",
    "\"Generate Python code that imports the necessary modules and creates a class for parsing and generating JSON data using the rapidjson library, similar to the python-rapidjson package.\"",
    "\"Generate Python code that imports the required libraries, defines a message class with specified fields, and generates a stub file with the necessary methods to interact with the protobuf message.\"",
    "\"Generate Python code that parses HTML files and extracts relevant information, such as page titles, URLs, and text content, using beautifulsoup4 and requests libraries.\"",
    "\"Generate Python code that imports and uses the `ipaddress` library to manipulate IP addresses, including converting between IPv4 and IPv6, parsing and validating IP addresses, and performing arithmetic operations on IP addresses.\"",
    "\"Generate Python code that uses the `cProfile` module to profile a function and produce a flame graph of its execution, identifying performance bottlenecks in the program.\"",
    "\"Generate Python code that implements a reinforcement learning environment using the Gym library, defines a set of agents with different behaviors, and trains the agents using various reinforcement learning algorithms, including Q-learning and policy gradient methods.\"",
    "\"Generate Python code that creates a context manager that takes a Callable[[NoneType]] as an argument, returns a decorator that takes a function as an argument, and returns a new function that wraps the original function and calls the callable inside a try-except block, handling exceptions by calling the callable and passing the exception as an argument.\"",
    "\"Generate Python code that implements a minimal JSON Web Token authentication plugin for Django REST Framework by defining a custom authentication class that overrides the authenticate() method and uses the jsonwebtoken library to verify the token in the HTTP Authorization header, and then returns a Django REST Framework response with the authenticated user data.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that takes in a nested data structure as input, applies a series of transformations and formatting rules to the data using a declarative syntax, and returns the transformed data in a formatted string or list.\"",
    "\"Generate Python code that imports the jsonref library and uses it to automatically dereference JSON Reference objects in a JSON document, allowing for easier access and manipulation of the data within the document.\"",
    "\"Generate Python code that creates a Click default group with a specified name, description, and permissions.\"",
    "\"Generate Python code that creates a Django application and library for importing and exporting data with included admin integration, utilizing Django's built-in admin interface for managing data imports and exports.\"",
    "\"Generate Python code that wraps a given function in a decorator that adds a custom logo and copyright message to the function's documentation, using the `inspect` module to access the function's name and docstring.\"",
    "\"Generate Python code that creates a CloudWatch log group and configures it to receive logs from multiple sources, including EC2 instances, Lambda functions, and API Gateway APIs.\"",
    "\"Generate Python code that imports and utilizes the necessary libraries from the Astronomy and Astrophysics Core Library to perform various astronomical calculations and data analysis tasks, such as converting between coordinate systems, calculating distances and proper motions, and performing spectral analysis.\"",
    "\"Generate Python code that uses the macho library to read and modify Mach-O headers in binary files, allowing for analysis and manipulation of the file's architecture, format, and other attributes.\"",
    "\"Generate Python code that uses the `pipdept` library to create a command-line utility for displaying the dependency tree of packages installed in a Python environment.\"",
    "\"Generate Python code that implements a flake8 plugin to enforce best practices for list, set, and dict comprehensions, such as using literals instead of redundant syntax, avoiding unnecessary nested calls, and preferring iterables over generators when possible.\"",
    "\"Generate Python code that imports the discord.py library and creates a bot instance to interact with the Discord API.\"",
    "\"Generate Python code that retrieves a user's IP address using Django's built-in request object, like this:\\n```\\nfrom django.http import HttpRequest\\n\\ndef get_user_ip(request):\\n   return request.META['HTTP_CLIENT_IP']\\n```\\nThis code defines a view function `get_user_ip` that takes a `HttpRequest` object as an argument. The `META` attribute of the request object contains metadata about the current HTTP request, including the client's IP address, which is accessed using the key `HTTP_CLIENT_IP`.\"",
    "\"Generate Python code that imports the logging module and creates a custom logging handler that sends log messages to a Logz.io account using bulk SSL encryption.\"",
    "\"Generate Python code that utilizes the Cognite API to host machine learning models and deploy them to a production environment, allowing for easy management and scaling of models in response to changing data and business needs.\"",
    "\"Generate Python code that logs messages, including log level, timestamp, and formatted message, to an output file or console, using configurable logging settings and formatters.\"",
    "\"Generate Python code that uses geometric objects as matplotlib paths and patches:\\n\\nimport matplotlib.pyplot as plt\\nfrom matplotlib.path import Path\\n\\n# Create a rectangle path\\nrectangle = Path.rectangle((1, 1), (3, 3))\\n\\n# Create a circle path\\ncircle = Path.circle((2, 2), 1)\\n\\n# Create a line path\\nline = Path.line([(1, 1), (2, 2), (3, 3)])\\n\\n# Create a polygon path\\npolygon = Path.polygon([(1, 1), (2, 2), (3, 3), (4, 4)], closed=True)\\n\\n# Plot the paths as patches\\nplt.gca().add_patch(rectangle)\\nplt.gca().add_patch(circle)\\nplt.gca().add_patch(line)\\nplt.gca().add_patch(polygon)\\n\\n# Add labels for each path\\nplt.text(1.5, 0.5, 'Rectangle', ha='center')\\nplt\"",
    "\"Generate Python code that implements an integrated set of Django applications for authentication, registration, account management, and 3rd party (social) account authentication, using Django's built-in authentication and authorization modules, as well as popular third-party libraries like Social Django and Django REST authentication.\"",
    "\"Generate Python code that implements a SASL client using the `sasl` module, allowing for authentication against a SASL server.\"",
    "\"Generate Python code that imports the necessary modules and configure a PostgreSQL connection using the `psycopg2` library, then creates a DAG using the `airflow.operators.DummyOperator` class and stores it in a database table using the `airflow.models.Dag` class, and finally triggers the DAG using the `airflow.operators.TriggerDag` class.\"",
    "\"Generate Python code that implements a Bayesian network using the pyprob library, allowing users to create nodes and edges representing random variables and conditional dependencies, and perform inference using various algorithms such as Markov Chain Monte Carlo and variational inference.\"",
    "\"Generate Python code that implements a dependency injection framework for Python, allowing developers to easily manage dependencies between different components of an application.\"",
    "\"Generate Python code that imports the required libraries and uses them to convert between Universal Transverse Mercator (UTM) coordinates and World Geodetic System 1984 (WGS84) coordinates, both ways.\"",
    "\"Generate Python code that imports the necessary libraries and creates a BigQuery Data Transfer API client object to interact with Google Cloud BigQuery datasets, including creating, updating, and deleting transfer configurations, as well as scheduling transfers.\"",
    "\"Generate Python code that creates a command-line application framework with a user-friendly interface and full features for developers using the argparse library and other relevant libraries.\"",
    "\"Generate Python code that implements a social authentication system using Django, allowing users to log in with their social media accounts and linking them to their Django user account.\"",
    "\"Generate Python code that parses a human name into its individual components using a regular expression to split the name into parts and then iterating over the parts to extract the first name, middle name(s), and last name.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to a Databricks cluster using the Databricks Connect Client.\"",
    "\"Generate Python code that implements a dictionary class which maintains the keys in insertion order, and also provides a method to sort the keys alphabetically for easy retrieval.\"",
    "\"Generate Python code that imports the Appium Python client library and creates a driver instance to automate interactions with a mobile application on an Android emulator.\"",
    "\"Generate Python code that creates an LRU (Least Recently Used) dict container, where keys are stored in a queue and removed from the dictionary when they reach the front of the queue, using a heappq module for efficient priority queue implementation.\"",
    "\"Generate Python code that imports the necessary libraries and creates an HDFS client object to interact with the HDFS file system, similar to the Pure Python HDFS client package.\"",
    "\"Generate Python code that implements a fast version of the edit distance (Levenshtein distance) between two strings, using dynamic programming and a 2D matrix to store the distances.\"",
    "\"Generate Python code that uses the `requests` library to send an HTTP request through a UNIX domain socket using the `socket` library to create the connection.\"",
    "\"Generate Python code that uses the `swagger` library to validate Swagger specifications against a provided API definition, ensuring that the specification adheres to the Swagger standard and accurately represents the API's functionality.\"",
    "\"Generate Python code that uses the Keras Tuner library to perform hyperparameter tuning for a deep learning model built using the Keras API.\"",
    "\"Generate Python code that imports the necessary modules and uses the netlink library to interact with network interfaces, configure network settings, and monitor network events.\"",
    "\"Generate Python code that imports the necessary libraries and loads a pre-trained image model using PyTorch, such as ResNet or U-Net, and perform basic image classification tasks like image segmentation, object detection, and image generation.\"",
    "\"Generate Python code that implements an HTTP/2 priority tree using a nested dictionary data structure, where each key represents a request and the values are tuples containing the request's priority and a reference to its parent request.\"",
    "\"Generate Python code that profiles your Python application and provides detailed information about performance, memory usage, and resource utilization using the `cProfile` module and `psutil` library.\"",
    "\"Generate Python code that creates a JSON schema generator using the `json` and `click` libraries, allowing users to easily create and validate JSON data against a schema.\"",
    "Generate Python code that creates a LaunchDarkly client instance and authenticates with an API key.",
    "Generate Python code that uses the LaunchDarkly client to create a new feature flag and assign it a key.",
    "Generate Python code that uses the LaunchDarkly client to update the status of a feature flag to \"on\" or \"off\".",
    "Generate Python code that uses the LaunchDarkly client to fetch the status of a feature flag.",
    "Generate Python code that uses the LaunchDarkly client to delete a feature flag.",
    "Generate Python code that uses the LaunchDarkly client to create a new segment and assign it a name.",
    "Generate Python code that uses the LaunchDarkly client to add users to a segment.",
    "Generate Python code that uses the LaunchDarkly client to remove users from a segment.",
    "Generate Python code that uses the LaunchDarkly client to fetch the list of.",
    "\"Generate Python code that implements the S2 Geometry Library, including geometric primitives such as points, lines, and polygons, and providing functions for geometric calculations and transformations.\"",
    "\"Generate Python code that creates a dictionary-like object with attribute-style access using the `collections` module's `AttrDict` class.\"",
    "\"Generate Python code that installs a Python wheel using pip by running the command `pip install wheel` and then loading the wheel using `importlib.util.module_from_spec('mywheel')`.\"",
    "\"Generate Python code that takes a string input and returns the expanded version of the string using bash-style brace expansion, similar to the `brace` command in bash.\"",
    "\"Generate Python code that imports the statistics module and its functions, such as mean, median, mode, standard deviation, variance, and quartiles, and allows the user to input data for analysis.\"",
    "\"Generate Python code that imports the necessary modules and configures an Apache Airflow provider for Snowflake, allowing users to create and manage Snowflake connections within Airflow.\"",
    "\"Generate Python code that imports the Elastic APM module and sets up tracing for a web application, including automatic instrumentation of popular frameworks like Flask and Django, with customizable data gathering and reporting options.\"",
    "\"Generate Python code that uses the Splash library to provide JavaScript support for Scrapy, allowing Scrapy to execute JavaScript scripts and render pages like a browser would.\"",
    "\"Generate Python code that creates a customizable, modular web application framework using a component-based architecture, supporting user authentication and authorization, data modeling, and extensibility through a robust plugin system.\"",
    "\"Generate Python code that imports the required modules, configures AWS credentials, and creates an async Boto3 client for interacting with AWS services asynchronously using the aiohttp library.\"",
    "\"Generate Python code that creates a context manager for managing the current thread's execution context, including support for nested context managers and propagation of context information through threads and processes.\"",
    "\"Generate Python code that implements a generic transparent proxy server using the `socket` library, allowing clients to connect to arbitrary servers through the proxy and transparently forwarding requests and responses.\"",
    "\"Generate Python code that implements a gRPC reflection service using the Standard Protocol Buffers (protobuf) library, allowing for introspection and manipulation of gRPC services and messages.\"",
    "\"Generate Python code that parses a PEM file and extracts the certificate, private key, and CA chain using the cryptography library.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that takes in a 2x3 matrix representing an affine transformation of the plane, and returns the transformed coordinates of a given point in the plane.\"",
    "\"Generate Python code that implements an encryption SDK for AWS, using the AWS Encryption SDK implementation for Python, to provide secure encryption and decryption of data in transit and at rest, including support for symmetric and asymmetric encryption, hash functions, and digital signatures, with easy-to-use APIs and high performance.\"",
    "\"Generate Python code that imports the necessary modules and uses the pyarrow library to read and write Apache ORC files, similar to the pandas library for CSV files.\"",
    "\"Generate Python code that imports the RDFLib library and creates an RDF graph object to represent information.\"",
    "\"Generate Python code that uses the `sympy` library to differentiate, compile, and transform Numpy code by doing the following:\\n\\n1. Importing the necessary libraries: `import numpy as np; import sympy as sy;`\\n2. Defining a function that takes in a Sympy expression and returns its derivative: `def derive(expr): return sy.diff(expr, sy.x);}`\\n3. Creating a Sympy expression from a Numpy array: `expr = sy.Matrix([[1, 2], [3, 4]]);`\\n4. Evaluating the derivative of the expression: `derivative = derive(expr);`\\n5. Printing the result: `print(derivative)`\\n6. Compiling the expression into C code using the `sympy.codegen.c_code` function: `cc = sympy.codegen.c_code(derivative, 'x', 'y');`\\n7. Transforming the compiled C code into a Numpy function: `np_func = np.frombuffer(cc, dtype=np.int32)(*np.array([]))`\\n8. Calling the\"",
    "\"Generate Python code that implements a T- Digest data structure, a compact data structure for online aggregation and approximation of streaming or batched data, using a combination of a trie and a histogram.\"",
    "\"Generate Python code that imports the necessary libraries for machine learning and creates an H2O instance for distributed computing.\"",
    "\"Generate Python code that implements a simple LRU cache for asyncio, using a dictionary to store key-value pairs and a queue to maintain the order of items in the cache.\"",
    "\"Generate Python code that uses the requests library to send HTTP requests and the gevent library to manage concurrent connections, allowing for efficient and scalable API interactions.\"",
    "\"Generate Python code that refactors code by analyzing code, identifying repeated code, and replacing it with reuseable code.\"",
    "\"Generate Python code that uses the Salesforce Bulk API to perform create, update, and delete operations on Salesforce objects in bulk, with support for batching and retry mechanisms to ensure efficient and reliable data processing.\"",
    "\"Generate Python code that imports and uses the libudev library to interact with USB devices on a Linux system.\"",
    "\"Generate Python code that creates a Django model field for international phone numbers, validating the format and length of the input using the `phonenumbers` library, and providing a custom widget for display in admin interfaces.\"",
    "\"Generate Python code that implements a PEG parser using the `parser_tool` library, which provides a way to write parsers using a syntax similar to regular expressions.\"",
    "\"Generate Python code that creates a colorful, worry-free console application for Linux, Mac OS X, and Windows using the `colored` library to add ANSI colors to the output and the `platform` library to detect the operating system.\"",
    "\"Generate Python code that imports the MPI module and creates a communicator for distributing data among processes.\"",
    "\"Generate Python code that uses the OpenTelemetry API to automatically instrument various aspects of a program, such as function calls, exceptions, and SQL queries, and provides tools for monitoring and visualizing performance metrics and trace data.\"",
    "\"Generate Python code that implements a SubUnit test streaming protocol, allowing for real-time transmission of test results from a test runner to a test consumer, using the `subunit` module and leveraging its ability to serialize and deserialize test data.\"",
    "\"Generate Python code that imports the requests library and constructs API calls to interact with Atlassian products, such as Jira, Confluence, and Bitbucket, by using the Atlassian REST API endpoints.\"",
    "\"Generate Python code that imports the required libraries and interacts with the OpenStack service-types-authority API to retrieve information about available services, service types, and their associated authorities, using the `requests` library to make HTTP requests and parsing the responses using `json` library.\"",
    "\"Generate Python code that uses the `hcl2` library to parse HCL2 configuration files and extract their contents as Python dictionaries, including nested resources and their properties.\"",
    "\"Generate Python code that imports the necessary libraries for deep learning with Apache MXNet, including openblas and MKLDNN, and sets up the environment for training and inference.\"",
    "\"Generate Python code that imports the necessary modules, sets up an Allure report, and includes the appropriate hooks for reporting test results.\"",
    "\"Generate Python code that imports the json module and uses the .items() method to iterate over the keys and values of a JSON object, then uses the .join() method to join the keys and values into a single string, resulting in a flattened version of the original JSON object.\"",
    "\"Generate Python code that uses the `requests` library to send HTTP requests to the Conan server, authenticates using a username and password, creates a new package, adds files to the package, sets the package version, and pushes the package to the Conan repository.\"",
    "\"Generate Python code that imports the required libraries and creates an asynchronous SSHv2 client and server using the async-std library.\"",
    "\"Generate Python code that uses the scikit-learn library to perform language identification on input text, using various machine learning algorithms and featuring pre-processing techniques to enhance accuracy.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes in a dataset and returns a visualization of the missing data.\"",
    "\"Generate Python code that imports the necessary libraries, loads the phi_k correlation data, and performs the analysis using the appropriate methods and algorithms, such as peak detection and fitting, to provide the desired outputs, including plots and statistics.\"",
    "\"Generate Python code that imports the required libraries and sets up an OpenStack client object to interact with the OpenStack API, allowing users to manage various OpenStack resources such as instances, volumes, networks, and images.\"",
    "\"Generate Python code that imports the markdown module, creates a Markdown processor object, and uses it to convert Markdown text to HTML.\"",
    "\"Generate Python code that imports the necessary libraries and recognizes links in text with full Unicode support, using the recognized links to perform desired actions such as opening URLs or extracting link information.\"",
    "\"Generate Python code that implements an OpenTelemetry exporter using the OpenTelemetry Python Protocol.\"",
    "\"Generate Python code that minifies JavaScript code by removing unnecessary characters and whitespace, and optionally compressing variables and functions, using a library such as UglifyJS.\"",
    "\"Generate Python code that imports the necessary modules and classes from the `apache-airflow-providers-mysql` package to connect to a MySQL database and perform CRUD operations on a table using Apache Airflow's provider model.\"",
    "\"Generate Python code that uses the `pytest` framework to create a plugin that tests local server connections by running a series of mock server interactions and verifying their responses match expected results.\"",
    "\"Generate Python code that uses the winrm module to connect to a remote Windows machine and execute a command, similar to the Windows Remote Management (WinRM) service.\"",
    "\"Generate Python code that implements a red-black tree data structure with support for fast accumulation of values in a key range using a lazy propagation of updates technique.\"",
    "\"Sure, here's a prompt that could generate Python code to accomplish the task of generating pseudorandom numbers using algebra:\\n\\n\\\"Generate Python code that uses algebraic operations to generate pseudorandom numbers, specifically by combining random integers in a way that produces a non-uniform distribution.\\\"\"",
    "\"Generate Python code that parses HCL configurations using a library like `hcl` or `pyhcl`, and returns a nested dictionary representation of the configuration data.\"",
    "\"Generate Python code that uses a dictionary-based approach to convert numbers to words, allowing for easy extension to support additional number ranges and word variations.\"",
    "\"Generate Python code that imports the django.contrib.gis module, creates a geographic location model using Django's built-in Model class, and includes a country field utilizing the django.contrib.gis.fields.GeoField attribute.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the OpenStack Block Storage API client class, allowing you to interact with OpenStack block storage resources.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Kafka client object to produce and consume messages in an Apache Kafka cluster.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureRedHatOpenShiftManagementClient class, which can be used to interact with Microsoft Azure Red Hat OpenShift resources.\"",
    "\"Generate Python code that creates a password-encrypted zip file using the `zipfile` module and the `cryptography` library for encryption, like this:\\n```\\nimport zipfile\\nfrom cryptography.fernet import Fernet\\n\\n# Create a password-encrypted zip file\\nwith open(\\\"example.zip\\\", \\\"w\\\") as zip_file:\\n   # Encrypt the file contents using Fernet\\n   fernet = Fernet(\\\"secret_password\\\")\\n   encryptor = fernet.encryptor()\\n   zip_file.write(encryptor.encrypt(b\\\"Hello World!\\\"))\\n```\"",
    "\"Generate Python code that imports the HuggingFace library and uses it to perform various natural language processing tasks, such as tokenization, entity recognition, and language modeling.\"",
    "\"Generate Python code that implements serverless best practices and increases developer velocity for AWS Lambda functions using the Powertools for AWS Lambda (Python) package.\"",
    "\"Generate Python code that defines a class Snuggs, which is similar to numpy.ndarray but uses s-expressions for storage and operations.\"",
    "\"Generate Python code that exports static images from web-based visualization libraries, using zero dependencies, by leveraging libraries like Matplotlib, Seaborn, Plotly, Bokeh, or Pygal.\"",
    "\"Generate Python code that uses the `subprocess` module to execute a Jinja2 template file and pass variables to it like you would in a shell script.\"",
    "\"Generate Python code that implements a Swagger UI for Django REST Framework 3.5+ using the `drf-yasg` package, which provides a simple way to integrate Swagger UI with Django REST framework.\"",
    "\"Generate Python code that uses the wkhtmltopdf library to convert HTML files to PDF documents, utilizing the WebKit rendering engine and QT libraries for rendering and layout.\"",
    "\"Generate Python code that creates a Flask API using Marshmallow for data serialization and deserialization, with SQLAlchemy for database management, and deployable via Kubernetes.\"",
    "\"Generate Python code that implements JSON Web Token based authentication for Django REST framework by using the djangorestframework-jwt package, which provides a simple and secure way to authenticate API requests using JWT tokens.\"",
    "\"Generate Python code that reads a Brazilian Register Number for a person (CPF) or company (CNPJ) and validates its format, performs calculations to verify its integrity, and returns information about the owner of the number, such as name, address, and taxpayer status.\"",
    "\"Generate Python code that implements an OpenAPI codec for Core API using the `openapi` library, allowing for seamless interaction with the API from Python applications.\"",
    "\"Generate Python code that implements a Celery result backend for Django, allowing for the persistent storage of task results and supporting the use of multiple databases and message brokers.\"",
    "\"Generate Python code that imports the required libraries and creates a dictionary containing self-contained ISO 3166-1 country definitions.\"",
    "\"Generate Python code that imports the VSTS APIs and wraps them in a Python module, providing a convenient interface for interacting with VSTS services such as version control, work items, and builds.\"",
    "\"Generate Python code that uses the `bump2version` library to increment the version number of a software project in a single command, allowing for easy management of versioning across multiple platforms and projects.\"",
    "\"Generate Python code that implements HTTP authentication for Flask routes using the `Flask-Login` library, which provides a simple and flexible way to add login functionality to your Flask app.\"",
    "\"Generate Python code that imports the mediainfo library and wraps its functions in a Python module, allowing users to easily access and manipulate media file metadata.\"",
    "\"Generate Python code that imports the required libraries and sets up a client object to interact with the Google Cloud Datastore API using the GAPIC library.\"",
    "\"Generate Python code that uses the Robot Framework to write web tests, including test cases for functionalities like page interaction, form submission, and verification of expected results, using Selenium as the web driver.\"",
    "\"Generate Python code that uses the flake8-pylama plugin to check the ordering of import statements in a file, raising a warning if the imports are not ordered correctly.\"",
    "\"Generate Python code that imports and parses the necessary Unicode data files for a linkify-it-py project, using the `unicode` module.\"",
    "\"Generate Python code that creates a function factory that takes a name and returns a function that prints \\\"Hello, {name}!\\\" when called.\"",
    "\"Generate Python code that implements the Security Assertion Markup Language (SAML) Version 2 standard, including parsing, validating, and generating SAML assertions, as well as handling authentication requests and responses.\"",
    "\"Generate Python code that imports the Google Cloud DNS API client library and creates a client object to interact with the Google Cloud DNS API.\"",
    "\"Generate Python code that configures an OpenStack client using the OpenStack Client Configuration Library by importing the required modules, setting up authentication credentials, selecting the appropriate cloud provider, and defining any additional configuration options needed for the deployment.\"",
    "\"Generate Python code that imports the geohash module and uses it to decode and encode geohashes for latitude and longitude conversions, similar to the functionality provided by the geohash package described in the question.\"",
    "\"Generate Python code that imports the necessary modules for type annotation inspection and provides functions to extract type information from Python source code, including function annotations, class definitions, and variable types.\"",
    "\"Generate Python code that imports the necessary libraries and computes the edit distance and similarity between two strings using dynamic programming.\"",
    "\"Generate Python code that imports the necessary libraries and sets up the necessary structures to interact with the MLeap platform.\"",
    "\"Generate Python code that uses the pytest framework to create data-driven tests with decorators for parameterized testing, fixtures, and test setup/teardown.\"",
    "\"Generate Python code that imports the gevent module and creates a HTTP client class with methods for sending GET, POST, PUT, DELETE, and HEAD requests using gevent's asynchronous features.\"",
    "\"Generate Python code that implements a function `flatten_dict` that takes a dictionary of depth-first nested lists and dictionaries as input, and returns a flattened version of the dictionary with all keys and values at the same level.\"",
    "\"Generate Python code that runs coverage and linting reports on diffs using the `coverage` and `flake8` modules, and displays the results in a user-friendly format.\"",
    "\"Generate Python code that creates a Flask API with SQL database integration for building and sharing data applications.\"",
    "\"Generate Python code that imports Django's form and media files, creates a custom form class with additional attributes for audio and video fields, and renders the form in an HTML template with the media files included.\"",
    "\"Generate Python code that creates a template for a Python project scaffold, including a directory structure and basic file templates, using a tool like `cookiecutter` or `skeleton`.\"",
    "\"Generate Python code that implements a JSON-RPC transport layer, allowing for the sending and receiving of JSON-formatted messages between a server and client, using the `json` library and built-in Python socket class.\"",
    "\"Generate Python code that imports the necessary modules and sets up an Apache Airflow provider for Google services, including authentication and authorization, using the `apache_airflow_providers_google` package.\"",
    "\"Generate Python code that uses the Google OR-Tools library to solve optimization problems, including linear programming, mixed-integer linear programming, and constraint satisfaction problems.\"",
    "\"Generate Python code that implements a simple text templating language, allowing users to define templates with placeholders for dynamic values, and a function to render the templates with given context dictionaries.\"",
    "\"Generate Python code that implements the hashids algorithm, which generates short, unique, and secure hashes for integers, similar to UUIDs but with a customizable length and prefix, using the hashlib library to ensure security.\"",
    "Generate Python code that implements an accelerator-aware optimizing compiler for high-performance computing using the XLA library.",
    "Generate Python code that uses the XLA library to optimize TensorFlow computations for execution on NVIDIA GPUs, CPUs, and other accelerators.",
    "Generate Python code that utilizes the XLA library to lower the memory usage of deep neural networks during training and inference on GPUs and other devices.",
    "Generate Python code that leverages the XLA library to optimize PyTorch models for deployment on edge devices and other platforms with limited resources.",
    "Generate Python code that employs the XLA library to compile and run scikit-learn algorithms on accelerators, improving their performance and scalability.",
    "\"Generate Python code that uses the `subprocess` module to call Jupyter Notebook and nteract Notebooks with specified parameters, such as notebook file paths and kernel specs, and runs them in separate subprocesses.\"",
    "\"Generate Python code that uses the `pytest` framework to create a plugin that repeats tests a specified number of times, with the ability to skip certain tests based on their names or tags.\"",
    "\"Generate Python code that creates an AWS Elastic Beanstalk environment and deploy a Python application using the ebcli module.\"",
    "\"Generate Python code that calculates coordinates and projects data onto a web mercator projection for creating XYZ tiles, given a set of geographic coordinates and data points.\"",
    "\"Generate Python code that imports the glob module and uses its wildcard feature to search for files whose names match a pattern, like \\\"*.txt\\\" or \\\"**.pdf\\\".\"",
    "\"Generate Python code that uses the `requests` and `BeautifulSoup` libraries to fetch and parse HTML pages, extracting links to JavaScript and CSS files, and then compresses and caches those files using the `gzip` library.\"",
    "\"Generate Python code that imports the web3 library and uses it to interact with the Ethereum blockchain, performing tasks such as retrieving account addresses, sending transactions, and querying contracts.\"",
    "\"Generate Python code that wraps text in a manner similar to the `textwrap` module, but also takes into account ANSI colors and styles.\"",
    "\"Generate Python code that imports the hashlib library and uses the keccak256 function to perform an Ethereum-style hash of a given input string, similar to the eth-hash package.\"",
    "\"Generate Python code that imports the `psutil` module and uses its `Process().memory_info()` method to monitor the memory usage of the current process, and optionally display alerts when memory usage exceeds a certain threshold.\"",
    "\"Generate Python code that uses the `flake8` and `isort` packages to check for sorted imports and exports in Python files, similar to the `isort` plugin for `flake8`.\"",
    "\"Generate Python code that uses the `django` module to create a test framework for your Django application, providing simple and concise syntax for writing unit tests and integration tests, and including features such as automatic test discovery, test runners, and test reporting.\"",
    "\"Generate Python code that uses the `pytest` module and the `random` module to shuffle the order of test functions before running them, allowing for some control over the randomness.\"",
    "\"Generate Python code that imports the necessary modules, creates an Amazon Athena connection using the JDBC driver, and executes a SQL query fetching results and printing them to the console, using the Python DB API 2.0 (PEP 249).\"",
    "\"Generate Python code that imports the necessary libraries and uses regular expressions to extract and validate international phone numbers from a given string, using the format and validation rules defined in the Google Common Library.\"",
    "\"Generate Python code that implements an OAuth version 1.0a library, providing functions for users to authenticate with a service provider and obtain access tokens to access protected resources.\"",
    "\"Generate Python code that uses the SQLAlchemy library to define a database schema, create a migration script to upgrade or downgrade the schema version, and apply the migration to a database.\"",
    "\"Generate Python code that imports the `six` module and provides typing stubs for its functions and classes, using the `typing` module.\"",
    "\"Generate Python code that implements a general-purpose machine learning platform using TensorFlow, similar to TensorFlow Extended (TFX), by creating a modular architecture for building, training, and deploying machine learning models.\"",
    "\"Generate Python code that imports the os and re modules, defines a function called normalize_url that takes a string parameter representing a URL, and returns a string representing the normalized URL using the OS path sep convention.\"",
    "\"Generate Python code that imports the required libraries and creates a pseudo-terminal using the `pty` module, allowing for interactive input and output.\"",
    "\"Generate Python code that implements a framework for generating local interpretable model-agnostic explanations for machine learning classifiers, using techniques such as SHAP values, LIME, and TreeExplainer to provide insight into the predictions made by the classifiers.\"",
    "\"Generate Python code that imports the necessary modules and classes from the `apache-airflow-providers-common-sql` package to utilize its functionality in a custom Airflow DAG.\"",
    "\"Generate Python code that implements Modified Preorder Tree Traversal with Django models using a recursive approach, where each node in the tree is a model instance, and the traversal function takes a callback function as an argument to perform operations on each node.\"",
    "\"Generate Python code that solves embedded cone optimization problems using the ECOS solver, per the GitHub page's documentation.\"",
    "\"Generate Python code that uses the pyffi library to interact with FFmpeg and perform complex filtering operations, such as concatenating multiple videos, scaling and cropping videos, and adding watermarks or subtitles.\"",
    "\"Generate Python code that defines a domain-specific language for modeling convex optimization problems, using pyparsing to parse the problem definitions and CVXPY to solve the resulting optimization problems.\"",
    "\"Generate Python code that wraps text to a specified width, retaining original line breaks and ensuring no lines are too long, using a modified version of the textwrap function from Python 3.6 backport with additional features such as customizable wrapping width and support for multiple line breaks within a single wrapped line.\"",
    "\"Generate Python code that imports the requests library and uses its session object to make HTTP requests while respecting rate limits specified in a configuration file.\"",
    "\"Generate Python code that imports the required libraries and uses the PyAutoGUI library to capture a screenshot of the entire screen and save it as a PNG file on Windows, Linux, and macOS platforms.\"",
    "\"Generate Python code that imports the necessary modules and creates a connection to an LMDB database using the Lightning Database library, allowing for CRUD operations and supporting transactions.\"",
    "\"Generate Python code that uses the Google Translate API to perform translation, detection, and language modeling tasks without any limitations or restrictions.\"",
    "\"Generate Python code that implements a SQL adapter for interacting with Amazon Redshift databases, allowing users to define database models and perform CRUD operations using the dbt framework.\"",
    "\"Generate Python code that imports the necessary modules, configures a Fluentd event collector, and logs events to a file using the Python logging module.\"",
    "\"Generate Python code that implements an encoder for Google's Encoded Polyline Algorithm Format, which takes in a sequence of points represented as (latitude, longitude) pairs and outputs a compact binary representation of the polyline.\"",
    "\"Generate Python code that creates an AI-powered virtual interior decorator, using computer vision and machine learning algorithms to analyze a room's dimensions, lighting, and furniture, and then generates a personalized 3D design recommendation based on the user's preferences and style.\"",
    "\"Generate Python code that creates a robust application framework with modular architecture, routing, templating, database integration, and authentication/authorization features using Flask or Django.\"",
    "\"Generate Python code that increments the version number in a `version.py` file by running `sed -i'' 's/^version = \\\\\\\"[0-9.]+\\\\\\\"/$&\\\\'\\\\\\\"\\\\ Plus 1\\\\\\\"/g' version.py`.\"",
    "\"Generate Python code that imports the graphviz library and creates a dot graph from a dictionary representation of a graph, allowing for custom node and edge attributes and layout control through Graphviz's Dot language.\"",
    "\"Generate Python code that imports the gettext module, loads a PO file, and extracts the message \\\"Hello, world!\\\" in Spanish.\\n\\nHere is an example of how you could do this:\\n```\\nimport gettext\\n\\n# Load the PO file\\ntranslations = gettext.get_translation(\\\"mydomain\\\", \\\"es\\\")\\n\\n# Extract the message \\\"Hello, world!\\\" in Spanish\\nmessage = translations.ugettext(42)\\n\\nprint(message)\\n```\\nThis will output \\\"\\u00a1Hola, mundo!\\\" which is the translation of \\\"Hello, world!\\\" in Spanish.\"",
    "\"Generate Python code that implements a Kalman filter for estimating the state of a system from noisy measurements, using a libraries such as SciPy or Pykalman.\"",
    "\"Generate Python code that defines a function that takes a string message as input, capitalizes the first letter of each word in the message, and returns the modified string as output.\"",
    "\"Generate Python code that wraps the `tokenize` function from the standard library and provides a round-tripping functionality, allowing for easy conversion between tokenized strings and their original form.\"",
    "\"Generate Python code that uses the `sympy` library to create a declarative symmetric parser/builder for binary data, allowing users to define rules for parsing and building binary data structures using a simple syntax and generating efficient parsers and builders.\"",
    "\"Generate Python code that uses PyAutoGUI to automate GUI tasks, controlling the mouse and keyboard, and performing other automation tasks on Windows, macOS, and Linux, for both Python 3 and 2.\"",
    "\"Generate Python code that uses the `requests` and `BeautifulSoup` libraries to scrape translation data from various online translators, such as Google Translate, Microsoft Translator, and Yandex Translate, and stores the data in a local database for fast access and offline usage.\"",
    "\"Generate Python code that imports the fasttext library and provides bindings for its functions, allowing users to perform efficient learning of word representations and text classification tasks.\"",
    "\"Generate Python code that imports the Keras library and creates a sequential model with two layers, each layer using a different backend, then compile the model with a specified loss function and optimizer.\\n\\nHere is an example of how this prompt could be answered:\\n```\\nfrom keras.layers import Dense\\nfrom keras.models import Sequential\\nfrom keras.backends import TensorFlow, Theano\\n\\nmodel = Sequential()\\nmodel.add(Dense(64, activation='relu', backend=TensorFlow))\\nmodel.add(Dense(32, activation='sigmoid', backend=Theano))\\nmodel.compile(loss='mse', optimizer='adam')\\n```\"",
    "\"Generate Python code that uses Git to version control and manage code and data for data science projects, allowing data scientists to collaborate and track changes to both code and data over time.\"",
    "\"Generate Python code that implements an encoder, decoder, and lint/validator for JSON (JavaScript Object Notation) compliant with RFC 7159 using the `json` module.\"",
    "\"Generate Python code that imports the `subprocess` module and uses it to run FFmpeg commands, similar to the `ffmpeg` Python package, by doing the following:\\n\\n1. Installing the package using pip: `pip install ffmpeg`\\n2. Importing the package in your Python script: `from ffmpeg import FFmpeg`\\n3. Creating an instance of the `FFmpeg` class and passing in the command and arguments as strings: `ff = FFmpeg('ffmpeg', '-i input.mp4 -vf scale=w=1024 output.mp4')`\\n4. Running the command using the `run` method: `ff.run()`\\n5. Accessing the output file path using the `output` attribute: `output_path = ff.output`\\n\\nHere is an example of how you could use this code to resize a video file:\\n```\\nimport ffmpeg\\n\\n# Create an instance of the FFmpeg class\\nff = ffmpeg.FFmpeg('ffmpeg', '-i input.mp4 -vf scale=w=1024 output.mp4')\\n\\n# Run the command\\nff.run()\\n\\n# Get\"",
    "\"Generate Python code that creates an efficient, scalable, and flexible toolkit for computer vision tasks using deep learning techniques and provides pre-trained models, data augmentation tools, and APIs for integrating with popular deep learning frameworks such as TensorFlow, PyTorch, and Keras.\"",
    "\"Generate Python code that imports necessary libraries, such as nltk or spaCy, and uses their functions to perform word segmentation on Chinese text input, producing a list of individual words.\"",
    "\"Generate Python code that uses pytest-xdist to run tests in random order, and controls the random seed for reproducibility.\"",
    "\"Generate Python code that wraps os.path functions into a module, allowing for convenient path manipulation and accessibility.\"",
    "\"Generate Python code that imports the necessary libraries and performs oversampling, undersampling, and synthetic data generation for handling imbalanced datasets in machine learning.\"",
    "\"Generate Python code that imports the unicodedata module to access the Unicode Character Database (UCD) and retrieves information about Unicode characters, such as their names, aliases, and properties.\"",
    "\"Generate Python code that imports a module lazily using zope.deferredimport:\\n```python\\nfrom zope.deferredimport import deferred_import\\n\\nlazy_module = deferred_import('my_module')\\n```\"",
    "\"Generate Python code that creates a system for managing development buildouts by defining classes for Build, Environment, and Dependency, and implementing methods to create, update, and deploy builds across various environments.\"",
    "\"Generate Python code that imports the Mixpanel library and creates a new Mixpanel project with a given name, then tracks a user event and sends it to Mixpanel for analysis.\"",
    "\"Generate Python code that defines a function `stub_dataclass(dataclass, replace=True)` that takes a dataclass as input and returns a typing stub for it, using the `typing` module and the `dataclass` object's fields and types, and sets the `replace` parameter to `True` by default.\"",
    "\"Generate Python code that creates an interactive widget for deck.gl maps, allowing users to explore and interact with 3D maps in a web browser.\"",
    "\"Generate Python code that imports the Flask application and defines a custom email sender function, which takes a subject and message as arguments, and uses the smtplib library to send an email through a specified SMTP server.\"",
    "\"Generate Python code that imports the needed modules and creates classes for various objects to denote special meanings in Python.\"",
    "\"Generate Python code that logs events to a JSON file, using a configurable log level and formatting, and allows for filtering by logger name and logging only exception messages.\"",
    "\"Generate Python code that parses a robots.txt file using a pure-python implementation, supporting modern conventions, and returns a dictionary containing the parsed rules.\"",
    "\"Generate Python code that uses the pytimezone library to look up time zones based on latitude and longitude coordinates, without requiring an internet connection.\"",
    "\"Generate Python code that implements a policy rules engine for cloud security, allowing users to define and enforce policies across multiple cloud services, including AWS, Azure, and GCP, using a simple and intuitive syntax, and providing real-time monitoring and alerting capabilities.\"",
    "\"Generate Python code that imports the dataclass module and defines a function that takes in a dataclass instance as an argument, and returns a Marshmallow schema equivalent to the dataclass.\"",
    "\"Generate Python code that creates a Unix domain socket listener using the `socket` library and accepts incoming connections, then uses the `os` library to create a new process that executes a command specified by the client.\"",
    "\"Generate Python code that imports the required libraries and sets up an asynchronous, event-driven Django application with version 3.2 or higher, utilizing the async and await syntax to execute tasks concurrently without blocking the main thread.\"",
    "\"Generate Python code that creates a flexible configuration system for an application using a hierarchical structure of configurations, allowing for easy modification and reuse of settings across multiple environments.\"",
    "\"Generate Python code that imports the NumPy library and uses its functions to perform various array operations, such as element-wise arithmetic, reshaping, and indexing.\"",
    "\"Generate Python code that imports the necessary libraries for interacting with SignalFx, sets up authentication, creates a client object, and sends data to SignalFx for monitoring and analytics.\"",
    "\"Generate Python code that uses the `pytest` framework to run tests and generates reports in the Allure format, including test cases, test suites, and detailed reporting information.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Synapse Management client, allowing you to manage and monitor your Azure Synapse Analytics resources.\"",
    "\"Generate Python code that uses the Mustache templating language to render templates with dynamic data.\"",
    "\"Generate Python code that implements an exporter using the OpenTelemetry Collector Protobuf over gRPC Exporter, allowing for the collection and export of trace data from applications to a centralized location for analysis and visualization.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function to generate and verify JSON Web Tokens, using the given module name.\"",
    "\"Generate Python code that uses the scipy optimize library to solve a system of nonlinear equations, represented by a set of polynomial equations in standard form, using the Levenberg-Marquardt algorithm.\"",
    "\"Generate Python code that imports the unittest module and uses its plug-in architecture to create test suites and run tests with custom assertions and setup methods.\"",
    "\"Generate Python code that imports the necessary libraries and uses the requests library to scrape data from various APIs and websites to gather information about US states, including their capitals, flags, and other interesting facts, and then stores this data in a pandas dataframe for easy analysis and manipulation.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an Azure Synapse Analytics spark session to connect to a data source, load data into a DataFrame, apply various transformations and filtering operations, and then writes the resulting data back to the data source using the Azure Synapse Spark Client Library for Python.\"",
    "\"Generate Python code that imports the win32com.client module and creates an instance of the WMI namespace, allowing you to interact with Windows Management Instrumentation (WMI) providers to manage and monitor system resources.\"",
    "\"Generate Python code that imports the necessary libraries and uses the snmplib library to send an SNMP GET request to a remote device at a specified IP address, port number, and OID, and then prints the received response.\"",
    "\"Generate Python code that uses the `pytest` framework to create a custom test runner that runs tests in a specific order, defined by a list of test names or patterns, by implementing a plugin that modifies the default test collection mechanism.\"",
    "\"Generate Python code that creates an ASGI (HTTP/WebSocket) server using Django, handling both HTTP requests and WebSocket connections.\"",
    "\"Generate Python code that parses and writes Java property files using the `properties` module, which provides a simple way to read and write key-value pairs in a file, similar to the Java `Properties` class.\"",
    "\"Generate Python code that imports the `os` module, creates a new directory named \\\"mydir\\\", sets the current working directory to \\\"mydir\\\", and prints \\\"Hello World!\\\" to the console.\"",
    "\"Generate Python code that imports the \\\"eth_typing\\\" module and uses its type hints to specify types for Ethereum-related data structures, such as address, hash, and UUID, in a manner consistent with the ethereum Python ecosystem.\"",
    "\"Generate Python code that imports the PluginBase module and creates a basic plugin system with a single plugin, including a plugin class and a method to register and load plugins.\"",
    "\"Generate Python code that imports the pymongo library and creates a fake MongoDB stub for testing simple MongoDB-dependent code, including a mock database and collections, and allows for customization of the stub's behavior through various configuration options.\"",
    "\"Generate Python code that imports the necessary libraries and provides an interface to interact with the Google Cloud Runtime Config API, allowing users to create, read, update, and delete runtime configurations for their applications.\"",
    "\"Generate Python code that uses freely available libraries such as Biopython, SciPy, and Pandas to perform computational molecular biology tasks, including sequence analysis, molecular dynamics simulations, and data visualization.\"",
    "\"Generate Python code that parses OpenStack configuration files and enforces adherence to established guidelines and best practices, utilizing the Oslo.config module for configuration parsing and raising warnings or errors for any detected violations.\"",
    "\"Generate Python code that imports the pyfakefs module and creates a fake file system that can be used to mock the Python file system modules.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Synapse Access Control client, allowing you to manage access control policies and assign permissions to entities in your Azure Synapse workspace.\"",
    "\"Generate Python code that uses the os, shutil, and google-cloud-storage libraries to perform basic file operations on local paths, Google Cloud Storage paths, and Azure Blob Storage paths.\"",
    "\"Generate Python code that imports the pprint module and uses its pformat function to format objects in a human-readable way, while also adding color and emoji to make the output more visually appealing.\"",
    "\"Generate Python code that imports the Flask-Breadcrumbs package and creates a breadcrumb trail for a website using the Breadcrumbs class.\"",
    "\"Generate Python code that imports the requests library and creates a module called \\\"api_wrapper\\\" with a function for each interaction, such as \\\"get_user_info\\\" and \\\"post_message\\\", using f-strings for easily replaceable API endpoint URLs and authentication tokens.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Synapse Artifacts client, allowing you to interact with Azure Synapse artifacts in your Python application.\"",
    "\"Generate Python code that imports the necessary libraries for OpenTelemetry and creates a web tracer that instruments outgoing HTTP requests made by popular web frameworks such as Flask, Django, and FastAPI.\"",
    "\"Generate Python code that uses the nltk library to extract keywords from sentences and replace them with synonyms, using the lemmatization function to ensure that the replaced words are in their base form.\"",
    "\"Generate Python code that imports the `stdnum` package and uses its functions to convert between different numbering systems, such as UN/EAN, UPC, and ISBN.\"",
    "\"Generate Python code that imports the requests library and uses it to make GET requests to each of the public Datadog API endpoints, as documented in the Datadog API documentation, and returns the response data in a dictionary format.\"",
    "\"Generate Python code that imports a library like `json` or `yaml` to flatten dictionaries, and uses a function like `json.dumps()` or `yaml.dump()` to convert the dictionary into a string, then uses a split() function to split the string into a list of lines, and finally uses a for loop to iterate through the list of lines and converts each line into a dictionary using a `dict()` constructor and returns it.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Microsoft Azure Key Vault Administration Client Library for Python to interact with Azure Key Vault, performing tasks such as creating and managing vaults, secrets, and certificates, as well as setting up access policies and permissions.\"",
    "\"Generate Python code that imports the required libraries and modules for Guppy-PE ported to Python 3, sets up the environment, and runs the GUI automation tool.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the Evergreen API, authenticating with the API using a username and password, and parsing the JSON responses to interact with the API.\"",
    "\"Generate Python code that creates a session and caching library with WSGI middleware using the following steps:\\n\\n1. Import the necessary modules: `import redis` for the cache store, `import pickle` for serialization, and `import wsgiref` for the WSGI middleware.\\n2. Create a class that inherits from `wsgiref.Middleware`.\\n3. In this class, define a method `__call__` that takes an environment dictionary and a start_response function.\\n4. In the `__call__` method, create a session object using the `redis` module if it does not exist.\\n5. Load data from the session if present, otherwise load data from a cache store using the `redis` module.\\n6. Update the session and cache store with new data.\\n7. Return a response using the `start_response` function.\\n8. Define a function that generates a session ID if none exists.\\n9. Use the session ID to store and retrieve data in the cache store.\\n10. Test the middleware by creating a simple web application that uses it.\"",
    "\"Generate Python code that creates a nested progress bar with plotting options for FastAI using the `progress` library and plots the progress of the model training process.\"",
    "\"Generate Python code that imports the Requests library and creates a persistent cache for storing responses from previously made requests, allowing for faster retrieval of cached responses and reducing the number of repeated requests made to the same URL.\"",
    "\"Generate Python code that imports the required libraries and creates a powerful and lightweight tree data structure with various plugins, such as support for nested sets, undo/redo functionality, and custom node data types.\"",
    "\"Generate Python code that creates a developer-friendly load testing framework by using existing libraries such as Locust and BeautifulSoup to create a simple and efficient way to test the performance of web applications.\"",
    "\"Generate Python code that creates a TensorBoard summary writer that logs the tensors flowing through a model during training, allowing visualization of their evolution over time.\"",
    "\"Generate Python code that parses a version string in the style of Semantic Versioning (SemVer) and returns a tuple containing the major, minor, and patch versions, using the same logic as the `node-semver` package.\"",
    "\"Generate Python code that imports a cross-platform, pure Python module for creating JavaScript-like message boxes and displays a sample message box with OK and Cancel buttons using the Tkinter library.\"",
    "\"Generate Python code that imports the required libraries and sets up a basic Bootstrap template with a navbar, footer, and basic layout, using the `Bootstrap` class from the `bootstrap` package.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Neptune client object to interact with the Neptune graph database, allowing users to create, read, update, and delete nodes and relationships in the graph.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the Heroku API, allowing users to interact with their Heroku apps and perform various management tasks such as creating and managing deployments, scaling resources, and accessing app metrics.\"",
    "\"Generate Python code that implements a model history system, allowing administrators to view and revert changes made to models in a Django application, using the built-in Django admin interface.\"",
    "\"Generate Python code that uses the dbt library to interface with dbt Cloud, allowing users to run SQL transformations and data models directly within the cloud environment.\"",
    "\"Generate Python code that imports the Wikipedia API library and uses it to retrieve information from Wikipedia articles, including article titles, content, and links to other articles.\"",
    "\"Generate Python code that imports a library such as `pyanimations` or `easing` and uses its tweening/easings functions to create smooth transitions between different states in a program.\"",
    "\"Generate Python code that imports the Ctypes module and uses it to create a simple wrapper around the MagickWand API, allowing users to perform basic image manipulation operations like converting images from one format to another, applying image filters, and creating composite images.\"",
    "\"Generate Python code that creates a command-line interface for humans to interact with a program by defining clear, concise, and intuitive arguments and flags for a variety of commands, using argparse library to parse and validate user input.\"",
    "\"Generate Python code that uses the Microsoft 365 and Microsoft Graph libraries to interact with Office 365 services and Azure Active Directory, including user authentication, calendar management, email operations, and OneDrive file access.\"",
    "\"Generate Python code that imports the required libraries and sets up a basic SASS configuration, including a file named `styles.scss` in the same directory as the Python script, using the `sass` library.\"",
    "\"Generate Python code that provides a command-line interface for managing OpenStack resources, including computing, networking, and identity management, using the OpenStack API.\"",
    "\"Generate Python code that uses the `ast` module to parse Python source code and checks for print statements that are not part of a debug statement, raising an error if any are found.\"",
    "\"Generate Python code that imports the Requests library and uses it to send HTTP requests, similar to the Robot Framework keyword library wrapper around requests.\\n\\nHere is an example of how this could be done:\\n```\\nimport requests\\n\\ndef send_http_request(url, method, data=None):\\n   response = requests.send(method, url, data=data)\\n   return response.text\\n```\\nThis code defines a function called `send_http_request` that takes three arguments: `url`, `method`, and `data`. The function sends an HTTP request using the `requests` library and returns the response body as a string.\"",
    "\"Generate Python code that imports necessary libraries, loads historical data, preprocesses it, selects an appropriate model, trains the model on past data, and uses the trained model to forecast future values for a given time series dataset.\"",
    "\"Generate Python code that imports the necessary libraries and creates a color scale for an IPython notebook, using the `matplotlib.pyplot.imshow` function to display the scale in a 2D plot.\"",
    "\"Generate Python code that logs information in JSON format using the built-in `json` module and the `logging` module, which allows for customizable logging messages and logging levels.\"",
    "\"Generate Python code that imports the Enchant spellchecking system and provides bindings for its functions, allowing developers to integrate Enchant into their applications and perform spell checking on text input.\"",
    "\"Generate Python code that imports the requests library and uses it to send HTTP requests to a remote server, optionally including authentication credentials and handling SSL certificates.\"",
    "\"Generate Python code that reads and writes YAML configuration files without requiring explicit syntax errors or lengthy code using the `yaml` module and `configargparse` library.\"",
    "\"Generate Python code that uses the `awslambda` module to create a Lambda function for a specified runtime and framework, and packages it into a deployable format.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Jsii Runtime client object to interact with the Jupyter Serverless Interface (JSI) runtime, allowing users to execute Jupyter notebooks and scripts on remote computing resources.\"",
    "\"Generate Python code that imports the necessary libraries and reads single characters and key strokes from the user, allowing for easy handling of character input in a program.\"",
    "\"Generate Python code that uses the requests library to send HTTP requests to the Looker REST API, allowing users to interact with Looker data and perform various operations such as querying, creating, updating, and deleting data.\"",
    "\"Generate Python code that uses the azureml-sdk and mlflow libraries to integrate Azure Machine Learning with Mlflow for managing machine learning experiments and deploying models.\"",
    "\"Generate Python code that uses the mypy static type checker to analyze the types of variables and raise errors for type mismatches in pytest test cases.\"",
    "\"Generate Python code that reads a CSS file, removes unnecessary characters and whitespace, and outputs a minified version of the stylesheet.\"",
    "\"Generate Python code that uses the configparser library to read and write configuration files in various formats, such as JSON, YAML, and INI.\"",
    "\"Generate Python code that styles strings in terminals using ANSI escape codes, providing a simple API for formatting text with colors, boldness, italics, and more.\"",
    "\"Generate Python code that imports the necessary libraries for probabilistic data structures, such as NumPy and SciPy, and creates a class for implementing a probabilistic data structure, such as a Bloom filter or a Quorum-based data structure, that can efficiently process and search large datasets while providing probability-based guarantees on false positives or false negatives.\"",
    "\"Generate Python code that uses the `graphviz` library to create a dot graph from the output of several profilers, such as `cProfile`, `profile`, and `pstats`, by parsing their output files and creating nodes and edges in the graph representing functions, calls, and function call relationships.\"",
    "\"Generate Python code that uses SQLAlchemy to interact with a spatial database, such as PostGIS or MySQL with Spatial extensions, to perform CRUD operations on spatial data, including creating and modifying tables, inserting and querying spatial data, and performing spatial queries using SQLAlchemy's built-in support for spatial functions and operators.\"",
    "\"Generate Python code that implements a function to determine whether two given numbers are of the same type, where the types are restricted to integers, floats, strings, and booleans.\"",
    "\"Generate Python code that imports the necessary libraries for creating a native Delta Lake Python binding based on delta-rs with Pandas integration, including `delta-rs` and `pandas`.\"",
    "\"Generate Python code that uses the openpyxl library to interact with Excel files from Python, allowing you to read and write data to Excel sheets and workbooks, and also automate Excel tasks such as formatting cells and creating charts.\"",
    "\"Generate Python code that imports the necessary modules to read GCS, ABS, and local paths with the same interface as tensorflow.io.gfile, using the clone method to replicate the functionality of tensorflow.io.gfile.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the ImageAPIClient class, which can be used to interact with the OpenStack Image Service API.\"",
    "\"Generate Python code that implements a K-FAC optimizer for TensorFlow, which is a variant of the Adam optimizer that uses a Kalman filter to estimate the first moment of the gradients, allowing for more stable step sizes and improved convergence.\"",
    "\"Generate Python code that parses TOML-0.4.0 files and extracts the data using the `toml` library, raising a `SyntaxError` if the file is not well-formed.\"",
    "\"Generate Python code that decorates a function with a retry mechanism that retries the function up to a maximum number of attempts, using an exponential backoff strategy with jitter, and returns the result of the last successful attempt.\"",
    "\"Generate Python code that uses the requests and os modules to download sample data files from a remote location and store them in a local directory, implementing versioning and corruption checks using hashlib and os.path.exists().\"",
    "\"Generate Python code that imports the `requests` library and uses it to send a SOAP request to a given URL, using the `text` parameter to specify the SOAP message in XML format, and returning the response as a Python dictionary.\"",
    "\"Generate Python code that parses LookML files and extracts metadata, such as field names and data types, using a robust and efficient algorithm.\"",
    "\"Generate Python code that implements HTTP basic access authentication for Flask using the `Flask_HTTPBasic` extension, which provides a simple way to secure routes and protect them from unauthorized access.\"",
    "\"Generate Python code that implements an OAuth2 provider for Django, allowing users to authenticate with third-party services and grant them access to protected resources.\"",
    "\"Generate Python code that uses Cheetah to render templates and generate code based on template designs, leveraging its ability to create templates with placeholders for dynamic values and automatically generating code to fill those placeholders.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure DataBoxEdge management client, allowing you to manage and monitor your DataBoxEdge devices.\"",
    "\"Generate Python code that implements a BigQuery adapter plugin for dbt using the `dbt` and `google-cloud-bigquery` libraries, allowing users to run dbt models on BigQuery data sources and automatically syncing schema changes from BigQuery to dbt.\"",
    "\"Generate Python code that uses the Google Cloud API client library to create a virtual machine instance on Google Compute Engine, including specifying the machine type, zone, and boot disk, as well as configuring network settings and setting up authentication.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a client object for interacting with the Google Cloud AutoML API, such as `from google.cloud import automl` and `client = automl.AutoMlClient()`;\"",
    "\"Generate Python code that implements community-maintained hooks for PyInstaller, allowing developers to extend and customize the functionality of PyInstaller through user-created scripts and plugins.\"",
    "\"Generate Python code that imports the necessary modules for working with Ethereum ABI definitions, encodes and decodes data according to the ABI specifications, and provides utility functions for interacting with the Ethereum blockchain.\"",
    "\"Generate Python code that defines a common interface for data container classes, including methods for adding, removing, and accessing elements, as well as a method to iterate over the contents of the container, using the ABC module.\"",
    "\"Generate Python code that utilizes PlatformIO's collaborative ecosystem to develop embedded software projects with declarative principles, test-driven methodologies, and modern toolchains for optimal success.\"",
    "\"Generate Python code that imports the necessary modules and creates a Git repository object to interact with a local repository, allowing you to perform various Git operations such as creating, editing, committing, and pushing changes to a remote repository using the libgit2 library.\"",
    "\"Generate Python code that parses SNMP SMI/MIB files and extracts information about the managed objects, their attributes, and their relationships.\"",
    "\"Generate Python code that creates a module with various utility functions and classes, such as string manipulation, file I/O, and data structures, to provide a flexible set of tools for diverse programming tasks.\"",
    "\"Generate Python code that uses the `capstone` library to disassemble machine code files into assembly code, allowing users to specify the architecture, mode, and endianness of the input file.\"",
    "\"Generate Python code that parses Pip requirement files using the `ast` module to parse the JSON data and extract the required packages and their versions.\"",
    "\"Generate Python code that uses the Rollbar library to send exception data to Rollbar for easy and powerful exception tracking, including sending messages and exceptions with arbitrary context, getting back aggregates, and debugging production issues quickly.\"",
    "\"Generate Python code that creates a command line interface for managing users, groups, and roles in an organization using the argparse library and SQL database connections.\"",
    "\"Generate Python code that implements a lightweight, focused AMQP client for interacting with RabbitMQ, providing a simple and efficient way to send and receive messages without unnecessary features or dependencies.\"",
    "\"Generate Python code that uses Django's built-in development server to serve a Django app alongside a Webpack application, allowing the two to share the same domain and port.\"",
    "\"Generate Python code that implements an exporter for OpenTelemetry Collector, which receives trace data from various sources, processes it, and sends it to different destinations such as Jaeger, Prometheus, or InfluxDB.\"",
    "\"Generate Python code that imports the necessary libraries and uses the official MS-COCO API to download and manipulate images and annotations from the COCO dataset.\"",
    "\"Generate Python code that uses the nvidia-smi library to monitor NVIDIA GPU status and usage, displaying information such as memory usage, temperature, and clock speed in a simple console output.\"",
    "\"Generate Python code that imports the os module and creates a wrapper function for the path.join() method, allowing for more flexible and convenient path joining.\"",
    "\"Generate Python code that imports the requests library and uses the Kerberos authentication mechanism to send HTTP requests, using the `requests.Session()` method to store the authentication details and re-use them across multiple requests.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an instance of the SpotifyWebAPI class, which can be used to interact with the Spotify Web API.\"",
    "\"Generate Python code that parses environment variables and returns a dictionary containing the parsed values, using a specified separator for separating variable names from their values.\"",
    "\"Generate Python code that implements a command-line interface for interacting with the operating system, similar to the functionality provided by GNU Readline.\"",
    "\"Generate Python code that defines a `Rect` class with properties for x, y, width, and height, and methods for updating the position and size of the rectangle, and checking for collision with another rectangle.\"",
    "\"Generate Python code that creates a simple PDF document using the ReportLab library, including a title, page numbers, and a table of contents.\"",
    "\"Generate Python code that creates a directory named \\\"example\\\" in the current working directory, creates a file named \\\"file1.txt\\\" inside it, writes the string \\\"Hello World!\\\" to the file, closes the file, makes the directory \\\"example\\\" executable, sets the owner of \\\"example\\\" to the user \\\"user1\\\", sets the group of \\\"example\\\" to the group \\\"group1\\\", changes the permission of \\\"example\\\" to 755, creates a symbolic link named \\\"link\\\" pointing to the directory \\\"example\\\", creates a hard link named \\\"hard_link\\\" pointing to the file \\\"file1.txt\\\", deletes the symbolic link \\\"link\\\", deletes the hard link \\\"hard_link\\\", deletes the directory \\\"example\\\", and prints a success message.\"",
    "\"Generate Python code that recognizes and generates routing information for vehicles, including calculating optimal routes, identifying traffic patterns, and providing real-time updates.\"",
    "\"Generate Python code that uses AWS KMS and DynamoDB to securely store, retrieve, and manage sensitive data or \\\"secrets\\\" in the cloud, including implementing encryption and access controls for the stored secrets.\"",
    "\"Generate Python code that uses the pytest framework to write unit tests for a Flask application, including test cases for routes, database interactions, and template rendering.\"",
    "\"Generate Python code that uses the `oauth2client` library to obtain an access token using the OAuth 2.0 credentials, and then uses the `boto3` library to interact with Google Cloud Storage, authenticating with the obtained access token.\"",
    "\"Generate Python code that creates an ASGI server using the Hyper library and takes inspiration from Gunicorn, allowing for fast and efficient handling of asynchronous requests.\"",
    "\"Generate Python code that uses the ast module to parse Python source code and checks for instances of built-in functions or variables being used as variable names or function parameters.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a client object for interacting with the Google Cloud Recommendations AI API, such as `from google.cloud import recommendations; client = recommendations.RecommendationsClient()`\"",
    "\"Generate Python code that implements a JSON Web Signature (JWS) generator and verifier using the pyjwt library, which provides a simple way to create and verify JWS tokens, and the hashlib library for computing the signature.\"",
    "\"Generate Python code that creates and manages AWS access policies using the AWS Access Policy Language (APL) syntax, allowing for definition of fine-grained access control policies for AWS resources.\"",
    "\"Generate Python code that creates a reusable Django application for simple tagging, allowing users to assign tags to objects and retrieve objects based on their tags, using a customizable model and template tags for displaying tags.\"",
    "\"Generate Python code that imports the required libraries and creates a function that takes a window title as an argument and returns a dictionary containing information about the window, such as its size, position, and handle.\"",
    "\"Generate Python code that implements a lightweight, pure Python version of Apache Thrift, allowing for the definition and usage of remote services and serialized data transfer, compatible with the standard Thrift IDL format.\"",
    "\"Generate Python code that imports the requests library and uses it to send HTTP requests to the Jenkins API, parsing the responses into useful data structures such as lists, dictionaries, and objects, to access various resources on the Jenkins continuous-integration server, including jobs, job configurations, build history, and user information.\"",
    "\"Generate Python code that creates a user-friendly interface for modifying and visualizing JSON data, using Hjson as the backend parser and validator.\"",
    "\"Generate Python code that imports and uses the LIGO Scientific Collaboration Algorithm Library to perform gravitational wave analysis and simulation, including data analysis, signal processing, and visualization.\"",
    "\"Generate Python code that implements a least recently used (LRU) cache using a dictionary to store key-value pairs and a linked list to maintain the order of access.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Datastore client using the Protocol Buffers API, allowing for the creation, retrieval, update, and deletion of entities in a Google Cloud Datastore database.\"",
    "\"Generate Python code that imports pytest and creates a fixture for benchmarking code, using a chosen timer to calibrate the test rounds.\"",
    "\"Generate Python code that implements an OAuth2 provider for Flask applications using oauthlib library, allowing users to authenticate with third-party services and grant access to protected resources.\"",
    "\"Generate Python code that imports the ANSI color module and uses its functions to print colored texts in the terminal with various formats and styles.\"",
    "\"Generate Python code that parses and analyzes PDF files using PyPDF2 and Pandas, extracting relevant information such as text, layout, and metadata, and outputting the results in a tidy format for further analysis and visualization.\"",
    "\"Generate Python code that extends the functionality of Python Markdown and MkDocs Material by adding new features such as tables, footnotes, and better support for citations and references.\"",
    "\"Generate Python code that uses Cheetah to render templates with placeholders for dynamic values, and generates Python classes and methods based on template definitions.\"",
    "\"Generate Python code that implements a CBOR (de)serializer with extensive tag support, allowing for the efficient serialization and deserialization of data structures into CBOR format, including support for various types of tags such as arrays, maps, and strings.\"",
    "\"Generate Python code that creates a configuration system that allows users to manage application settings through a simple and intuitive interface, using a YAML configuration file and providing support for multiple environments.\"",
    "\"Generate Python code that uses the subprocess module to run the pdftoppm and pdftocairo commands to convert PDF files to a PIL Image list.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Google Cloud Datacatalog API client library, allowing you to interact with Google Cloud Data Catalog resources such as datasets, tables, and data sources.\"",
    "\"Generate Python code that imports the necessary libraries for convex optimization, such as scipy.optimize and cvxpy, and performs convex optimization problems using these libraries.\"",
    "\"Generate Python code that imports the Vertica database client library and creates a connection to a Vertica server, then executes a query and retrieves the results.\"",
    "\"Generate Python code that implements a spectrum instance spotinst-agent capable of running remote scripts, collecting data, deploying applications, and performing other tasks using the Python libraries for automation, such as Fabric for remote script execution and BeautifulSoup for data scraping.\"",
    "\"Generate Python code that uses the `msgpack` library to serialize and deserialize NumPy data, similar to the `numpy.save()` and `numpy.load()` functions, but with the added benefit of being able to easily transmit the serialized data over a network or store it in a compact binary format on disk.\"",
    "\"Generate Python code that imports the `etcd` module and creates an EtcdClient instance to interact with an etcd cluster.\"",
    "\"Generate Python code that imports theImpala Python API, connects to an Impala cluster, and executes a SQL query against a table in the Impala catalog.\"",
    "\"Generate Python code that exports trace data from OpenCensus to Stackdriver Trace Service for monitoring and analyzing performance and latency of applications.\"",
    "\"Generate Python code that imports the required libraries and performs LDL factorization on a given matrix using the QDLDL algorithm.\"",
    "\"Generate Python code that implements the three Reader-Writer problems, including the readers-writers problem, the writer-readers problem, and the reader-writer-reader problem, using synchronization primitives such as locks or semaphores to manage concurrent access to shared resources.\"",
    "\"Generate Python code that uses the `setuptools` library to create an improved build system for Python extensions written in C, C++, Fortran, and Cython.\"",
    "\"Generate Python code that uses the Sphinx Docstring Convention to write documentation for libraries, similar to NumPy's documentation, and utilizes Sphinx's ability to parse and display docstrings in RST format.\"",
    "\"Generate Python code that implements a backport of PEP 562, allowing for the use of f-strings in older versions of Python.\"",
    "\"Generate Python code that defines a class called FileChunkIO, which takes in a filename and chunk_size as arguments in its constructor, reads the contents of the file in chunks of the specified size, and provides methods to access and manipulate the chunk data.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that takes a gradient function and a loss function as input, applies the gradient function to the inputs, computes the gradients of the loss function using automatic differentiation, and returns the gradients and the computed loss.\"",
    "\"Generate Python code that imports the necessary libraries and creates a spinning terminal cursor using a customizable character set, display interval, and color scheme.\"",
    "\"Generate Python code that creates an empty class named `ItemLoader` with a `__call__` method that takes a list of dictionaries as input, processes each dictionary through a series of loaders, and returns a new list of dictionaries containing the processed data.\"",
    "\"Generate Python code that renders front-end components for Dash using the `dash` and `dash_core_components` libraries, allowing users to create interactive web applications with a variety of layout options and customizable elements.\"",
    "\"Generate Python code that imports the necessary libraries, such as pandas, numpy, and matplotlib, and creates an interactive visualization of a topic model using a library such as scikit-learn or Gensim.\"",
    "\"Generate Python code that imports the Flax library and creates a simple neural network using the `flax.nn` module, with a flexible layer structure allowing for various activation functions and regularization techniques.\"",
    "\"Generate Python code that imports the necessary libraries and defines an enumerated type `MyEnum` with values `A, B, C` and their corresponding integers `1, 2, 3`.\"",
    "\"Generate Python code that uses Flask or Django to create a scalable and secure web application with a focus on user authentication, authorization, and databases, leveraging Google App Engine's robust infrastructure for hosting and deployment.\"",
    "\"Generate Python code that interacts with the Ethereum blockchain using the Web3 library, allowing users to deploy smart contracts, send transactions, and query the blockchain for information.\"",
    "\"Generate Python code that implements a SDK for Cloud Events, allowing users to create, publish, subscribe, and consume events in a cloud-native environment, compatible with the Cloud Events specification.\"",
    "\"Generate Python code that creates a simple configuration class with support for loading configurations from JSON, YAML, or environment variables using a consistent API.\"",
    "\"Generate Python code that uses the requests and BeautifulSoup libraries to scrape RSS feeds and HTML pages for links to download or process content, and utilizes the PyRSS2 library to parse RSS feeds and extract relevant information.\"",
    "\"Generate Python code that uses the `datetime` module to parse a cron-like string and checks if the current date and time match the specified conditions.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the OpenShift client class, which can be used to interact with OpenShift resources and perform various tasks such as creating, reading, updating, and deleting resources, as well as accessing authentication and authorization information.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the ServiceFabricManagedClustersManagementClient class, which can be used to manage Service Fabric clusters in Azure.\"",
    "\"Generate Python code that uses the Oracle Cloud Infrastructure Python SDK to manage resources, including creating and deleting virtual machines, databases, and storage volumes, as well as configuring access control lists and security rules.\"",
    "\"Generate Python code that implements a concurrency library similar to Oslo Concurrency, providing a high-level interface for parallelism and concurrent data structures, allowing developers to write efficient and scalable concurrent programs with minimal boilerplate code.\"",
    "\"Generate Python code that uses the `os` and `shutil` modules to copy documentation files from the local machine to the `gh-pages` branch of a GitHub repository.\"",
    "\"Generate Python code that imports the ruamel.yaml library and creates a schema dictionary and validate() function to validate YAML files against a provided schema.\"",
    "\"Generate Python code that implements a client-server architecture for negotiating authentication, using the Windows Negotiate Authentication protocol, by creating a server that listens for incoming connections on a specified port, and a client that initiates a connection to the server and sends a negotiation message to authenticate the user.\"",
    "\"Generate Python code that imports the logging module and sets the logging level to \\\"DEBUG\\\" for all loggers, using the verbose logging level for outputting detailed information about each log message.\"",
    "\"Generate Python code that imports the necessary libraries and creates a connection to a Hive server, allowing the user to execute SQL-like queries on Hive tables and retrieve the results.\"",
    "\"Generate Python code that uses the `nose` testing framework and excludes specific directories from test runs by using the `--exclude` option followed by the directory paths, like this: `nosetests --exclude=directory1 --exclude=directory2`.\"",
    "\"Generate Python code that creates a window using Tkinter, gets the current mouse position using the bindings method, converts the position to a pixel index using the getcanvasinfo method of the canvas object, extracts the RGB values from the pixel using the getpixel method of the canvas object, and displays the XY position and RGB values in a label using StringVar variables.\"",
    "\"Generate Python code that imports the Redis module and creates a stub function for a Redis connection, allowing for type-safe interactions with Redis.\"",
    "\"Generate Python code that imports the pandas and sklearn libraries, creates a sample dataset, performs data manipulation and analysis using pandas, and trains a machine learning model using sklearn.\"",
    "\"Generate Python code that creates a task management system allowing users to create, edit, and assign tasks, track progress, and collaborate on projects using Flask for the web framework, MongoDB for data storage, and Bootstrap for front-end design.\"",
    "\"Generate Python code that parses and uses crontab schedules using the `crontab` module, which provides a convenient way to work with cron schedules in Python.\"",
    "\"Generate Python code that parses and generates iCalendar files, allowing users to create, modify, and parse iCalendar events and appointments.\"",
    "\"Generate Python code that imports the bcrypt library and uses it to hash and derive keys for password storage and authentication.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the GitHub API, handling authentication and rate limiting, to perform various operations such as retrieving user information, creating new repositories, and updating repository contents.\"",
    "\"Generate Python code that implements a pytest plugin to check FLAKE8 requirements by inheriting from `pytest.Plugin` and defining a `check_flake8_requirements` function that uses the `flake8` library to validate compliance with the FLAKE8 style guide.\"",
    "\"Generate Python code that implements a TFTP client and server using the `socket` library, allowing for efficient file transfer over UDP.\"",
    "\"Generate Python code that implements a JSON schema-based object model, allowing for data validation and modification using JSON patch operations.\"",
    "\"Generate Python code that uses the Google Auth library to authenticate users and obtain access tokens for accessing Google APIs.\"",
    "\"Generate Python code that calculates code metrics such as cyclomatic complexity, halstead complexity, and maintainability index for a given piece of code using the `ast` module to parse the code and the `mathnaseum` library to perform calculations.\"",
    "\"Generate Python code that creates an interactive command-line user interface using Inquirer.js to collect input from the user and perform actions based on their responses.\"",
    "\"Generate Python code that utilizes the Cloud Custodian library to execute a series of AWS Lambda functions in parallel, allowing for efficient and scalable management of cloud resources.\"",
    "\"Generate Python code that creates an interactive tutorial for learning basic data structures such as lists, tuples, dictionaries, sets, and graphs, using intuitive visualizations and relatable analogies to explain their concepts, operations, and usage in real-world scenarios.\"",
    "\"Generate Python code that imports the necessary libraries and uses the pyautogui module to automate tasks on the Microsoft Windows GUI, such as mouse clicks and keyboard input, and also uses the pynput module to capture user input and the pyperclip module to work with the clipboard.\"",
    "\"Generate Python code that implements an OpenTracing tracer using the Jaeger tracer, allowing for the creation of traces, span tags, and other custom metadata.\"",
    "\"Generate Python code that implements Fish, Bash, Zsh and PowerShell completion for Click using the Click Completion module and the respective shell-specific completion files.\"",
    "\"Generate Python code that imports the necessary libraries and uses the libmagic library to perform magic number detection on a given file path, returning a tuple containing the detected file format and confidence level.\"",
    "\"Generate Python code that uses Jinja2 templating engine to dynamically set the renderer for a specific form field based on its name, and updates the form's HTML output accordingly.\"",
    "\"Generate Python code that creates an asynchronous concurrency framework using Tornado's IOLoop for efficient, non-blocking I/O operations and Backed Concurrent Futures for managing and scheduling concurrent tasks.\"",
    "\"Generate Python code that uses the Splunk SDK to authenticate with a Splunk server, create and manage indexes, search and retrieve data, and create and manage dashboards.\"",
    "\"Generate Python code that imports the necessary libraries and creates an SVG drawing element by element, using strings to define the attributes of each element, and finally saves the SVG string to a file.\"",
    "\"Generate Python code that uses the ast module to parse a Python script, and then calls the respective tools to analyze the parsed AST, finally aggregating the results into a single report.\"",
    "\"Generate Python code that uses the JAX library to create an interactive testing environment for Python code, complete with gamification elements such as points, badges, and leaderboards, and provides detailed feedback on test performance.\"",
    "\"Generate Python code that imports the necessary modules and creates an instance of the Azure Extended Location Management client, allowing you to manage location information and perform operations such as creating, updating, and deleting locations, as well as retrieving location data and metadata.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3.DynamoDB 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\\n```python\\nfrom typing import Callable, Dict, List, Optional\\nfrom mypy_boto3_builder import TypeAnnotator\\n\\nann = TypeAnnotator()\\n\\nann.annotate(boto3.client(\\\"dynamodb\\\"))  # type: ignore[call- arg1]\\nann.annotate(boto3.resource(\\\"dynamodb\\\", region=\\\"us-east-1\\\"))  # type: ignore[call- arg1, attr-items]\\nann.annotate(boto3.DynamoDBTable(\\\"my-table\\\", resource=None))  # type: ignore[attr-items]\\n```\"",
    "\"Generate Python code that creates a typed scripting library, ORM, and API wrapper for tmux using the `typing` module, `sqlalchemy` database ORM, and `requests` library for making HTTP requests to the tmux API.\"",
    "\"Generate Python code that implements a BSON codec for parsing and serializing BSON documents, including support for encoding and decoding nested documents and arrays, using the standard Python library `json` to handle JSON data.\"",
    "\"Generate Python code that imports the pathvalidate library and uses its validate function to sanitize a given filename or file path, ensuring it does not contain any invalid characters or exceed the maximum allowed length, and returns the validated path or raises an exception if validation fails.\"",
    "\"Generate Python code that imports the necessary modules and defines a custom provider class that inherits from the `AirflowProvider` class and implements the required methods to interact with Amazon Web Services, such as creating and deleting EC2 instances, S3 buckets, and DynamoDB tables.\"",
    "\"Generate Python code that uses pytest to run tests, exiting the test session with a custom exit code based on various scenarios.\"",
    "\"Generate Python code that reads and writes ESRI Shapefile format using the shapefile library, which provides pure Python implementation for reading and writing Shapefiles without any dependencies on external libraries.\"",
    "\"Generate Python code that implements an alternate keyring system, providing a customizable and secure way to store and manage secrets, using a variety of backends such as memory, files, and databases.\"",
    "\"Generate Python code that imports the NVIDIA Management Library and creates a session to interact with the GPUs.\"",
    "\"Generate Python code that imports the necessary libraries (such as numpy, scipy, and nltk) and uses them to calculate BLEU, chrF, and TER scores for a given text corpus, and then compares and reproduces the results across different machines and environments.\"",
    "\"Generate Python code that imports a module with utility functions for string validation and manipulation, such as str_validate() and str_manipulate(), and uses these functions to validate and manipulate strings in various ways, such as checking if a string is empty or contains only digits, converting letters to uppercase or lowercase, and removing punctuation marks.\"",
    "\"Generate Python code that uses introspection to identify private implementation details in a module and prevents unintentional access to them via a public API.\"",
    "\"Generate Python code that creates a progress bar using the `progressbar` module, allowing users to track the progress of a task with a customizable display format.\"",
    "\"Generate Python code that imports the `pip` module and uses its `install()` function to install packages from within the code, like so:\\n```\\nimport pip\\npip.install('package_name')\\n```\\nThis will install the specified package, `package_name`, using the `pip` package manager.\"",
    "\"Generate Python code that creates a catkin package library by running the command `catkin init` in your terminal, then creating a new directory for your package and adding it to the `catkin_packages` list in the `setup.py` file of your catkin workspace.\"",
    "\"Generate Python code that uses the graphene-django library to integrate Graphene into a Django application, allowing for efficient and scalable graph querying and mutations.\"",
    "\"Generate Python code that implements nested resources for the Django Rest Framework by creating a `NestedResource` class in a Django app, using Django REST framework's built-in routers and views to handle HTTP requests and responses, and defining serializers and models for each resource.\"",
    "\"Generate Python code that implements type hints (PEP 484) support for the Sphinx autodoc extension, allowing developers to document their Python code with accurate type information, improving code readability and maintainability.\"",
    "\"Generate Python code that creates a full-screen, console-based Python debugger that allows users to step through their code line-by-line, inspect variables, and set breakpoints.\"",
    "\"Generate Python code that uses the OpenStack networking API to create, update, and delete networks, subnets, routers, and security groups, as well as attach and detach ports to servers.\"",
    "\"Generate Python code that implements automatic error monitoring for Django, Flask, and other web frameworks using tools like Sentry, Raven, or Bugsnag.\"",
    "\"Generate Python code that imports the necessary libraries, initializes communication with a U2F device connected via USB, sends authentication requests to the device, receives responses, and returns the results after verifying the authenticity of the responses.\"",
    "\"Generate Python code that imports the Jinja2 template engine and defines a custom filter called \\\"pluralize\\\" that takes a number and a string as inputs, and returns the string in its plural form according to the given number.\"",
    "\"Generate Python code that imports the Apache LibCloud library and uses it to interact with various cloud providers, abstractions over the differences in their APIs.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that establishes a database connection, taking into account multi-threaded environments by utilizing threading or multiprocessing techniques to ensure proper synchronization and avoidance of race conditions.\"",
    "\"Generate Python code that imports the logging module and creates a custom logging handler that sends log messages in the Graylog Extended Log Format (GELF) to a Graylog server.\"",
    "\"Generate Python code that uses the MLflow library to manage the end-to-end machine learning lifecycle, including developing, testing, deploying, and monitoring models in production environments.\"",
    "\"Generate Python code that imports the RPyC library and creates a connection to a remote server, allowing for the execution of Python code on the remote machine and the return of results to the local machine.\"",
    "\"Generate Python code that imports the necessary libraries and provides a function to read, manipulate, and write Intel HEX files, including functions to extract information, insert data, and modify existing records.\"",
    "\"Generate Python code that uses the `cProfile` module to profile a script line-by-line, displaying the execution time for each line.\"",
    "\"Generate Python code that creates a set of MyPy stubs for Django, allowing for static type checking of Django's models, views, and templates.\"",
    "\"Generate Python code that uses libraries like BeautifulSoup and lxml to parse and manipulate HTML and XML documents, creating well-formed and valid documents with custom elements, attributes, and content.\"",
    "\"Generate Python code that defines a Week class with attributes for days, hours, minutes, and seconds, and methods for adding days, hours, minutes, and seconds, and displaying the current time.\"",
    "\"Generate Python code that imports the required libraries and provides a simple wrapper around the GSS-API functions for authentication, encryption, and decryption, allowing users to easily integrate Kerberos authentication and encryption into their applications.\"",
    "\"Generate Python code that implements multiple argument dispatching by defining a function with multiple parameter lists, each parameter list corresponding to a specific method call, and using the `**kwargs` syntax to pass keyword arguments to the appropriate method call.\"",
    "\"Generate Python code that implements a library for working with JSON data using JSONPath, allowing for efficient and flexible querying and manipulation of JSON documents.\"",
    "\"Generate Python code that uses the Selenium library to perform stateful, programmatic web browsing by automating interactions with websites, filling out forms, clicking buttons, and navigating between pages like a user would.\"",
    "\"Generate Python code that imports the necessary libraries to interact with EC2, OpenStack, and Eucalyptus APIs, and creates an asynchronous client class that can perform various operations such as instance creation, termination, and retrieval, using the aforementioned APIs.\"",
    "\"Generate Python code that creates an AWS CDK core library for defining cloud infrastructure in code, using constructs to represent real-world objects and their relationships, and providing a consistent API across multiple AWS services.\"",
    "\"Generate Python code that uses the `google-cloud-sql` and `google-cloud-bigquery` libraries to parse a DDL statement from a SQL file, convert it to a BigQuery JSON schema, and save it to a file.\"",
    "\"Generate Python code that imports the requests library and uses it to perform OAuth 1.0a authentication with a remote server, using the client credentials flow and a pre-defined consumer key and secret, and returns an access token that can be used to make authenticated API calls.\"",
    "\"Generate Python code that implements an exporter using the OpenTelemetry Collector Protobuf over HTTP Exporter, allowing for the collection and export of trace data from instrumented applications to a remote collector over HTTP.\"",
    "\"Generate Python code that uses SQLAlchemy to create a MySQL database connection and perform CRUD operations, and uses mypy to type-check the database interactions.\"",
    "\"Generate Python code that implements seamless polymorphic inheritance for Django models using multi-table inheritance, allowing for efficient querying and manipulation of data across multiple tables while maintaining a clean and simple API.\"",
    "\"Generate Python code that imports and uses the MySQL Connector library to connect to a MySQL database, execute SQL queries, and retrieve results.\"",
    "\"Generate Python code that performs exploratory analysis of Bayesian models using the pyMC3 library, including plotting posterior summaries, trace plots, and heatmaps to visualize model convergence and comparing marginal likelihoods across models using the Watanabe-Akaike information criterion (WAIC).\"",
    "\"Generate Python code that uses the `pycodestyle` library to check reStructuredText files for compliance with the PEP 8 style guide, reporting any violations and suggesting corrections.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Synapse Managed Private Endpoints client, allowing you to interact with your Azure Synapse Analytics workspace and perform various operations such as creating, updating, and deleting private endpoints, as well as managing their security and networking configurations.\"",
    "\"Generate Python code that imports the required modules and annotates the types of the RedshiftDataAPIService class in boto3 version 1.34.0 using mypy-boto3-builder version 7.21.0, like so:\\n```python\\nfrom typing import Callable, Dict, List\\nfrom boto3.services.redshift_data_api_service import RedshiftDataAPIService\\n\\n# Annotate the RedshiftDataAPIService class with its method signatures and return types\\nclass RedshiftDataAPIService(object):\\n   def __init__(self, *args, **kwargs) -> None:\\n       pass\\n\\n   def batch_create_table(self, *args, **kwargs) -> List[Dict]:\\n       pass\\n\\n   def create_table(self, *args, **kwargs) -> Dict:\\n       pass\\n\\n   def delete_table(self, *args, **kwargs) -> None:\\n       pass\\n\\n   def describe_table(self, *args, **kwargs) -> Dict:\\n       pass\\n\\n   def list_tables(self, *args, **kwargs) -> List[\"",
    "\"Generate Python code that imports the necessary libraries for basic image processing, including OpenCV and Matplotlib, and defines convenience functions for translation, rotation, resizing, skeletonization, display, sorting contours, detecting edges, and other image processing tasks using OpenCV and both Python 2.7 and Python 3.\"",
    "\"Generate Python code that imports the necessary modules and creates a function which takes a string representing a mathematical expression and returns the result of evaluating that expression using the `ast` module's `parse()` function and then executing the resulting `ast.Expression` object using the `eval()` function.\"",
    "\"Generate Python code that imports the pytest framework and defines a plugin class that implements the `pytest.Plugin` interface, which can be used to register multiple failure markers for a single test function.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client object for interacting with Google Cloud Redis instances, allowing users to perform various Redis operations such as setting, getting, and deleting data, as well as querying Redis databases and creating pub/sub subscriptions.\"",
    "\"Generate Python code that reads a DBF file using the dbfpy library, extracting the field names and data values, and printing them in a neat format.\"",
    "\"Generate Python code that parses a user agent string and extracts information about the operating system, browser, and device type using the python-useragent library.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Google Cloud Build API client object, authenticated using a service account key file, and configured to use the `compute` scope.\"",
    "\"Generate Python code that uses the tokenized query returned by `python-sqlparse` to generate query metadata.\"",
    "\"Generate Python code that creates a CLI app with a simple command line interface using the argparse library, allowing users to input their name and age and displaying a personalized greeting.\"",
    "\"Generate Python code that creates an HTTP/2 client using the `http.client` module, allowing for efficient and fast communication over the internet.\"",
    "\"Generate Python code that parses a VCF file and extracts information such as variant IDs, sample names, and genotypes using the vcfpy library.\"",
    "\"Generate Python code that imports the necessary modules for PySpark development, sets up a SparkContext, and defines a function to create a SparkDataFrame from a CSV file.\"",
    "\"Generate Python code that imports the logging module and creates a custom logger class that wraps the original logger, adding additional functionality such as colored logs and the ability to log to multiple destinations.\"",
    "\"Generate Python code that imports the necessary libraries, sets up a profiling agent using the Google Cloud Profiler API, and periodically samples the profile data for a running application.\"",
    "\"Generate Python code that parses an Excel 2007-2010 binary workbook (xlsb) file using the `openpyxl` library, extracting data from sheets and handling formula calculations.\"",
    "\"Generate Python code that uses PyPDF2 to create a PDF document from an HTML file, applying CSS styles to the content using BeautifulSoup.\"",
    "\"Generate Python code that implements bash-style brace expansion for strings, supporting nested braces and unlimited nesting depth, using a function named `brace_expand` that takes a string argument and returns an expanded list of strings.\"",
    "\"Generate Python code that parses and applies unified diffs using the `difflib` module and supports various diff formats, including context diffs, inline diffs, and side-by-side diffs.\"",
    "\"Generate Python code that implements a custom YAML tag for referencing environment variables in YAML files, using the `yaml` module to parse and dump YAML data, and the `os` module to access environment variables.\"",
    "\"Generate Python code that imports the necessary modules from the FFmpeg library and creates a binding between Python and FFmpeg, allowing users to execute FFmpeg commands and manipulate video and audio files using Python syntax.\"",
    "\"Generate Python code that imports the requests library and uses it to sign AWS V4 requests.\"",
    "\"Generate Python code that imports Django and creates a base class with generic methods that can be mixed into various Django models to add common functionality, such as logging, caching, or validation.\"",
    "\"Generate Python code that imports the necessary libraries and connects to a SAP HANA database, allowing you to execute SQL queries, create and manage schema objects, and retrieve data from the database.\"",
    "\"Generate Python code that imports the required libraries and uses a Fast C-based HTML 5 parser to parse HTML documents, providing an easy-to-use API for accessing and manipulating HTML elements and attributes.\"",
    "\"Generate Python code that implements a check digit library for data validation, which includes functions for calculating and verifying check digits for various formats, such as Luhn, Modulo 10, and UPC-A, and also provides functionality for validating data based on these check digits.\"",
    "\"Generate Python code that imports TensorFlow-Slim and creates a simple neural network model using the `slim` module, trains it on a dataset, and evaluates its performance.\"",
    "\"Generate Python code that imports and uses the `django.contrib.gis` module to create a Django app with country-specific models, views, templates, and URLs for displaying and editing data related to countries, including their names, flags, capitals, populations, and borders.\"",
    "\"Generate Python code that imports the necessary libraries and creates an ASCII table using the `tabulate` library, taking in user input for the column names and row data.\"",
    "\"Generate Python code that uses the `swagger-pydantic` library to extract Swagger specs from a Flask project by running a Python script that iterates over the routes of the Flask app, generates Pydantic models for each route's request and response bodies, and then combines these models into a single Swagger specification file.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an Okta Management API client with the appropriate credentials to manage users, groups, and policies.\"",
    "\"Generate Python code that implements a SigV4 authentication plugin for the open-source Datastax Python Driver for Apache Cassandra, using the AWS SDK for Python (Boto3) to interact with AWS services.\"",
    "\"Generate Python code that creates an ASGI web microframework with the same API as Flask using the `asgi` and ` flask` libraries.\"",
    "\"Generate Python code that imports the requests library and uses it to send HTTP requests to the 2Captcha API, allowing for easy integration with the API for tasks such as solving captchas and submitting answers.\"",
    "\"Generate Python code that uses the unittest module to create a test runner with JUnit-like XML reporting, similar to PyUnit.\"",
    "\"Generate Python code that imports the necessary modules and configurations to connect to Databricks using the `apache-airflow-providers-databricks` provider in Apache Airflow.\"",
    "\"Generate Python code that uses the `PySpark` library to create a SparkContext and load the Apache Spark stub files for use in a PySpark application.\"",
    "\"Generate Python code that implements rate limiting utilities, such as token bucket algorithms and leaky buckets, to control the number of requests made to an API within a given time period.\"",
    "\"Generate Python code that uses ctypes to capture multiple screenshots across different platforms, utilizing multi-threading for faster performance, and save the images to disk.\"",
    "\"Generate Python code that imports the requests library, creates an instance of the OAuth class with the client ID and secret, and uses the token endpoint to obtain an access token for making API calls.\"",
    "\"Generate Python code that translates JavaScript code to Python code and interprets it using a 100% pure Python implementation.\"",
    "\"Generate Python code that imports the necessary libraries and connects to an ArangoDB database, allowing you to create, read, update, and delete documents, as well as perform queries using AQL.\"",
    "\"Generate Python code that creates a modern, user-friendly command-line HTTP client for the API era using the `http.client` module and argparse library.\"",
    "\"Generate Python code that creates a suite of visual analysis and diagnostic tools for machine learning, including data visualization, feature engineering, model interpretation, and performance evaluation.\"",
    "\"Generate Python code that imports the requests library and uses it to make API calls to the CoffeeHouse API, handling authentication and parsing responses to provide convenient access to the API's functionality.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureServiceLinkerManagementClient class to interact with Microsoft Azure Service Linker resources.\"",
    "\"Generate Python code that creates a simple document-oriented database using dictionaries and allows for CRUD operations, including inserting, updating, and querying documents.\"",
    "\"Generate Python code that implements a websocket handler for the gevent pywsgi server using the following code:\\n```\\nimport gevent\\nfrom gevent import pywsgi\\nimport websocket\\n\\n@pywsgi.WSGIServer((\\\"localhost\\\", 8080))\\nasync def my_app(env, start_response):\\n   if env[\\\"PATH_INFO\\\"] == \\\"/websocket\\\":\\n       start_response('1.0')\\n       ws = websocket.WebSocketApp(env, start_response)\\n       await ws.serve()\\n   else:\\n       start_response('2.0')\\n       yield b\\\"Hello World!\\\"\\n```\\nThis code creates a WSGI server that listens on port 8080 and responds to requests on the root path (\\\"/\\\") by creating a WebSocket connection and sending the string \\\"Hello World!\\\".\"",
    "\"Generate Python code that implements a more powerful and extended version of the pathlib module, including additional functionality for working with paths and directories, such as automatically suggesting directory names based on the contents of the current directory, creating temporary directories, and adding support for symlinks and network paths.\"",
    "\"Generate Python code that imports the necessary libraries and implements the Louvain algorithm to detect communities in a given graph or network.\"",
    "\"Generate Python code that imports a dataset of worldwide holidays and working days, and creates a function that takes a date range as input and returns a list of holidays and working days for that range, optionally filtering by country or region.\"",
    "\"Generate Python code that creates a module for developing and testing Ansible roles using Molecule.\"",
    "\"Generate Python code that imports the necessary libraries and creates an AWS Serverless Application Repository client, allowing you to interact with the repository and perform various operations such as creating, updating, and deleting applications, as well as retrieving application versions and descriptions.\"",
    "\"Generate Python code that creates a set of REST API endpoints for authentication and registration, using Flask or Django framework, including routes for user registration, login, logout, and password reset.\"",
    "\"Generate Python code that defines a decorator `cached_property` that takes a function and returns a new function that computes the result of the function once per instance and caches it as an attribute on the instance.\"",
    "\"Generate Python code that creates an evergreen configuration by defining a set of rules, evaluating those rules against a set of inputs, and returning a valid configuration that satisfies all rules.\"",
    "\"Generate Python code that implements a security framework for an organization, including access controls, encryption, and incident response procedures.\"",
    "\"Generate Python code that uses the `pylint` and `black` modules to lint and fix code for all languages, respectively, in a given directory.\"",
    "\"Generate Python code that creates a Django form with a text input field, a choice field with three options, and a Boolean field, and validates user input using Django's built-in validation framework.\"",
    "\"Generate Python code that imports the OpenCensus library and sets up loggers to collect metrics and trace data for distributed tracing and monitoring of complex systems.\"",
    "\"Generate Python code that installs the necessary packages for PyQt5 to function properly on a system, including the Qt development libraries and dependencies.\"",
    "\"Generate Python code that imports the necessary CDK modules and creates a custom resource provider for IAM roles, policies, and resources, using the CDK's `aws_iam` module, to define minimal and correct IAM permissions for AWS services.\"",
    "\"Generate Python code that imports the necessary libraries and defines RLP (Recursive Length Prefix) serialization formats for common Ethereum objects, such as addresses, transactions, blocks, and smart contracts, to enable efficient and standardized data interchange between different systems and applications.\"",
    "\"Generate Python code that parses a variety of data formats, including JSON, YAML, CSV, and XML, using the `json`, `yaml`, `csv`, and `xml.etree.ElementTree` modules.\"",
    "\"Generate Python code that creates an executable package from a Python project, including dependencies and a main entry point, using the `pyinstaller` library.\"",
    "\"Generate Python code that implements a scalable persistent object container using joblib's persistence feature, allowing objects to be stored in a binary format and loaded into memory as needed.\"",
    "\"Generate Python code that calculates the position of the sun and moon using astronomical formulas and returns their coordinates in degrees, celestial body name, and distance from Earth.\"",
    "\"Generate Python code that imports the necessary modules and creates a terminal pager that displays a file or output stream, allowing the user to navigate through the content using keyboard input.\"",
    "\"Generate Python code that creates an OAuth2 token management command-line interface (CLI) using the `argparse` library to parse command-line arguments, the `requests` library to make HTTP requests, and the `json` library to parse JSON data. The CLI should allow users to authenticate with an OAuth2 server, obtain an access token, and use the access token to make API calls on behalf of the user.\"",
    "\"Generate Python code that creates a multi-user server for Jupyter notebooks using the JupyterHub package, allowing users to create, share, and collaborate on notebooks through a web interface.\"",
    "\"Generate Python code that uses Jinja2 templates to create SQL queries and corresponding bind parameters for a given query string and parameter dictionary.\"",
    "\"Generate Python code that uses the `xml.etree.ElementTree` module to create an ElementTree element representing the HTML form, and then use the ` ElementTree.find()` method to locate the form elements and set their values and error messages accordingly.\"",
    "\"Generate Python code that implements a cloud-based executable protocol, allowing for secure and efficient execution of code in a distributed environment.\"",
    "\"Generate Python code that imports the necessary modules and defines a function for recursive length prefix encoding and decoding, similar to the rlp package.\"",
    "\"Generate Python code that parses and uses INI-style files, including reading and writing settings to files, handling multiple settings per section, and supporting comments and blank lines.\"",
    "\"Generate Python code that creates an efficient Aho-Corasick automaton from a Trie for exact or approximate multi-pattern string search in input text, using the ahocorasick library, and save the automaton to disk for easy reuse.\"",
    "\"Generate Python code that implements a command-line interface for interacting with a database, allowing users to create, read, update, and delete data using SQL queries.\"",
    "\"Generate Python code that imports the required libraries and sets up a Kerberos context, allowing for high-level authentication and communication with Kerberos-enabled servers.\"",
    "\"Generate Python code that uses the `pytest` library to write snapshot tests for functions and modules, including support for mocking and fixtures, and also generates test reports in JSON format.\"",
    "\"Generate Python code that creates an AWS S3 bucket with a specified name and configuration using the CDK Construct Library.\"",
    "\"Generate Python code that imports the requests library and creates a declarative HTTP client using the Pydantic library to define APIs and models, allowing for easy creation of HTTP requests and responses with validated data.\"",
    "\"Generate Python code that uses the boto3 library to interact with AWS CloudFormation, including creating and deleting stacks, templates, and resources, and supporting both Python 3.6 and 3.7.\"",
    "\"Generate Python code that calculates the Jaro-Winkler distance between two strings using the scikit-metrics library, which provides a implementation of the Jaro-Winkler distance algorithm, and returns the similarity score as a float value between 0 and 1.\"",
    "\"Generate Python code that imports the TensorFlow module and creates a simple neural network for image classification.\"",
    "\"Generate Python code that implements a Django extension which provides version control for model instances by creating a new app, models, views, templates, and URL patterns.\"",
    "\"Generate Python code that uses the `pytest` framework to create a plugin which allows users to add directories to the `PYTHONPATH` environment variable from the command line or configuration files, allowing for more flexible and efficient testing of Python projects.\"",
    "\"Generate Python code that uses the Bandit library to perform automated security testing on a Python project, and uses Flake8 to check for coding standards compliance.\"",
    "\"Generate Python code that uses the cosine similarity algorithm to compute the distance between two texts, treating the texts as vectors of token counts in a high-dimensional space.\"",
    "\"Generate Python code that uses the psutil library to check the status of various services such as databases, queue servers, and celery processes, and raises an exception if any service is not running properly.\"",
    "\"Generate Python code that uses the Google Drive API to upload files, create folders, and share files with others, all with simple Pythonic syntax and minimal boilerplate code.\"",
    "\"Generate Python code that imports the configparser module and creates a configuration hierarchy with sections and options that can be easily accessed and modified using a dot notation.\"",
    "\"Generate Python code that imports the py.test module and defines a fixture function that sets up a Flask application for testing, including creating a temporary database and configuring the app's settings, using the `pytest.fixture` decorator.\"",
    "\"Generate Python code that implements a Dynamic Time Warping (DTW) algorithm with O(N) time and memory complexity using a combination of NumPy and SciPy libraries.\"",
    "\"Generate Python code that uses the `time` module to measure the execution time of nose tests and reports the time taken for each test case.\"",
    "\"Generate Python code that creates an automated testing framework for special end-to-end test cases using the Selenium webdriver and the TestNG testing framework, allowing for efficient and reliable testing of complex software systems.\"",
    "\"Generate Python code that creates a Django application with image and video processing capabilities, including cropping, resizing, thumbnailing, overlays, and masking, with a focus on setting the center of attention.\"",
    "\"Generate Python code that imports the json module and uses it to serialize and deserialize Python objects to and from JSON format.\"",
    "\"Generate Python code that builds an lightweight ETL pipeline using the `pandas` library to read and manipulate data, the `SQLalchemy` library to interact with databases, and the ` Apache Airflow` library to schedule and manage workflows.\"",
    "\"Generate Python code that uses the requests library to send a POST request to the Mozilla blobber server, including the blob data in the request body, and prints the response status code.\"",
    "\"Generate Python code that creates a serverless function using Azure Functions, which can be triggered by HTTP requests, message queues, or other events, and scales automatically to handle large workloads without any infrastructure management required.\"",
    "\"Generate Python code that uses the `SQLFormatter` library to take an unformatted SQL query as input, formats it according to the rules of the SQL language, and outputs the formatted SQL query.\"",
    "\"Generate Python code that imports necessary libraries for survival analysis, creates datasets for Kaplan-Meier and Nelson-Aalen estimators, computes and plots the estimators, and performs Cox proportional hazards model regression.\"",
    "\"Generate Python code that uses the flake8-lint package to check for trailing commas in Python files, reporting any violations using the default flake8 format.\"",
    "\"Generate Python code that instruments incoming HTTP requests using OpenTelemetry's API, providing detailed performance metrics and distributed tracing information for each request.\"",
    "\"Generate Python code that converts strings to snakecase using a function that takes a string as input, splits it into words, and then joins them back together in lowercase with underscores separating the words.\"",
    "\"Generate Python code that imports the base64 module and uses its encode and decode functions to perform fast Base64 encoding and decoding operations on arbitrary data.\"",
    "\"Generate Python code that imports the necessary libraries for Facebook authentication using the Facebook Graph API and official Facebook JavaScript SDK, including `requests` for making HTTP requests and `json` for parsing JSON data.\"",
    "\"Generate Python code that creates an interactive dashboard using Plotly and Pandas, allowing users to explore and visualize data, perform statistical analysis, and create reports and presentations.\"",
    "\"Generate Python code that uses the json module to read in a series of JSON documents, and then merge them into a single JSON document using the extend() method.\"",
    "\"Generate Python code that installs and configures Django-MySQL, a package that extends Django's built-in MySQL and MariaDB support by adding specific features not available on other databases.\"",
    "\"Generate Python code that creates a class called `TranslucentObject` that inherits from `object` and implements the `persistence` module, allowing instances of the class to be saved and loaded across sessions.\"",
    "\"Generate Python code that uses the psutil library to monitor system resource usage, retrieve CPU, RAM, disk, and network usage statistics, and display them in a user-friendly format.\"",
    "\"Generate Python code that instruments SQLAlchemy database operations using OpenTelemetry tracing API, including setting up trace context propagation and span creation for outbound requests.\"",
    "\"Generate Python code that imports the necessary libraries, such as NumPy and SciPy, and uses the DBSCAN algorithm to cluster data points based on their density, allowing for variable density clusters.\"",
    "\"Generate Python code that implements a KMIP library for interacting with Key Management Interoperability Protocol (KMIP) servers, including functions for discovering KMIP servers, connecting to them, creating and managing keys, and performing cryptographic operations using those keys.\"",
    "\"Generate Python code that creates an AWS Lambda function using the CDK Construct Library, including a definition of the function's trigger, code, and runtime, and configures it to deploy to AWS.\"",
    "\"Generate Python code that uses the Boto3 library to retrieve information about AWS regions, including service principal names, by calling the DescribeRegions and ListServicePrincipals APIs.\"",
    "\"Generate Python code that imports the required libraries and creates a wrapper function for each VSTS API, using the requests library to make HTTP requests to the VSTS endpoint, and returning the response data in a convenient format for further processing.\"",
    "\"Generate Python code that imports the pycountry package and extends its functionality by adding new conversion functions for country codes, including converting between ISO 3166-1 alpha-2 codes, ISO 3166-1 alpha-3 codes, and United Nations Statistics Division (UNSD) country codes.\"",
    "\"Generate Python code that parses Bash shell scripts and extracts information such as variables, commands, and functions using the `ast` module and regular expressions.\"",
    "\"Generate Python code that imports the zipfile module and uses it to read and write ZIP files, providing a similar interface to the built-in zipfile module in Python 3.8.\"",
    "\"Generate Python code that imports the necessary libraries and creates an Azure Machine Learning experiment, builds a model using a chosen algorithm, trains the model on a dataset, and deploys the model as a web service using the Azure Machine Learning Python SDK.\"",
    "\"Generate Python code that imports the java module and uses it to serialize and deserialize Java objects.\"",
    "\"Generate Python code that imports the datetime module and creates a function that takes a date string as input, parses it using the datetime.strptime() method, and returns the parsed datetime object.\"",
    "\"Generate Python code that imports the Facebook PDQ hash library and creates a PDQ hash object to store and retrieve data.\"",
    "\"Generate Python code that implements a pickle-based serialization method for Django models, allowing for efficient and flexible storage of model instances in a database or file system.\"",
    "\"Generate Python code that imports the Google Cloud Text-to-Speech API client library and uses it to synthesize speech from text, allowing users to specify the voice, language, and audio format of the output.\"",
    "\"Generate Python code that uses the Traceback module and syntax highlighting libraries like pyparsing or Pygments to display debug-friendly stack traces with variable values and semantic highlighting.\"",
    "\"Generate Python code that imports the necessary libraries and uses a combination of statistical methods, machine learning algorithms, and data visualization techniques to identify and flag potential outliers in a dataset.\"",
    "\"Generate Python code that imports the necessary libraries and sets up the GAPIC library for the Stackdriver Error Reporting API to send error reports from a Python application to Google Cloud Platform's error reporting service.\"",
    "\"Generate Python code that uses the `xmlschema` library to bind an XML schema to Python classes, allowing for easy validation and manipulation of XML data using the generated classes.\"",
    "\"Generate Python code that imports the necessary libraries and provides an interface for logging in to Google Cloud OS using the Google Cloud Os Login API client library.\"",
    "\"Generate Python code that imports the required libraries, creates a channel and stub instance for the Stackdriver Error Reporting API, and calls the report_error() method to send error reports.\"",
    "\"Generate Python code that creates a simple web application with a database connection using the Bolt Framework:\\n```\\nfrom bolt import Bolt\\napp = Bolt(__name__)\\ndb = app.database(\\\"my_database\\\")\\nclass MyModel(app.Model):\\n   __tablename__ = \\\"my_table\\\"\\n   id = Column(Integer, primary_key=True)\\n   name = Column(String)\\n   age = Column(Integer)\\n@app.route(\\\"/\\\")\\ndef index():\\n   return \\\"Hello, World!\\\"\\nif __name__ == \\\"__main__\\\":\\n   app.run()\\n```\"",
    "\"Generate Python code that uses the `argparse` module to parse command-line arguments and pass them to a function, which can then execute the desired action based on those arguments.\"",
    "\"Generate Python code that implements a lock context manager using Redis SETNX/BLPOP, similar to the `lock` package in Go.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureMachineLearningClient class to interact with the Microsoft Azure Machine Learning service.\"",
    "\"Generate Python code that uses the Xvfb library to create a virtual framebuffer and runs a headless display inside it, allowing for the execution of GUI-based applications without a physical display.\"",
    "\"Generate Python code that imports the necessary libraries and establishes a connection to a Trino cluster, allowing for the execution of SQL queries and the retrieval of results.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple interface for generating, importing, and manipulating Ethereum keys, including creating and managing key pairs, calculating signatures, and encrypting data.\"",
    "\"Generate Python code that uses the japanese library to convert Japanese characters between Hiragana, Katakana, Hankaku, Zenkaku, and other variations.\"",
    "\"Generate Python code that uses the win32security library to interact with the Windows certificate store and extract CA and CRL certificates, using ctypes to interface with the native APIs.\"",
    "\"Generate Python code that creates a CloudFormation template with resources for logging, including an S3 bucket for log storage, an IAM role for the bucket, and a CloudWatch Logs resource for centralized log management.\"",
    "\"Generate Python code that imports the Braintree Python Library and creates a client instance for processing payments, subscriptions, and authentication.\"",
    "\"Generate Python code that imports the py OpenPGP library and uses it to encrypt and decrypt messages using public key cryptography, like GnuPG does.\"",
    "\"Generate Python code that implements a package that keeps track of all modules' `__all__` variables and ensures they are consistent across all modules in a project.\"",
    "\"Generate Python code that imports the necessary libraries and embeds an R engine to interact with R from within Python, allowing for seamless integration of R functions and data analysis in a Python environment.\"",
    "\"Generate Python code that imports the psycopg2 library and uses it in conjunction with a coroutine library such as asyncio or trio to create asynchronous database connections and execute SQL queries concurrently.\"",
    "\"Generate Python code that imports the ctypes module and uses it to interface with PAM (Pluggable Authentication Modules) to manage user authentication, password management, and session management for a Unix-like system.\"",
    "\"Generate Python code that imports the necessary libraries and uses tsfresh to extract relevant characteristics from a given time series dataset.\"",
    "\"Generate Python code that implements a trie data structure using a class Trie, where the trie can be initialized with a list of strings, and methods are provided for adding and searching keys, as well as iterating over all stored keys.\"",
    "\"Generate Python code that implements a feature flipper for Django by defining a Boolean setting in Django's settings file, creating a custom management command to toggle the feature, and using a decorator to conditionally render the feature in templates.\"",
    "\"Generate Python code that implements efficient tree data structures for use in Django applications, utilizing appropriate data types and algorithms to optimize performance and minimize memory usage.\"",
    "\"Generate Python code that implements a drop-in replacement for the built-in pdb module, providing a more user-friendly and efficient debugging experience for developers, including support for stepping through code, setting breakpoints, inspecting variables, and continuing execution.\"",
    "\"Generate Python code that imports TensorFlow and creates a recommendation system using collaborative filtering and matrix factorization.\"",
    "\"Generate Python code that implements a pluggable framework for adding two-factor authentication to Django using one-time passwords, including a customizable login view and a database backend for storing user authentication tokens.\"",
    "\"Generate Python code that uses the SharePoint API to interact with SharePoint sites, lists, and libraries, performing various operations such as creating and updating list items, uploading and downloading files, and managing site permissions.\"",
    "\"Generate Python code that sets up a development environment for fastai similar to the Python supercharged package, including installing necessary dependencies, setting up directories, and configuring Jupyter Notebook settings.\"",
    "\"Generate Python code that implements a well-behaved Unix daemon process, supporting Python 3.x, using the following steps:\\n\\n1. Create a new Python file called \\\"daemon.py\\\".\\n2. Import the necessary modules: `import os`, `import sys`, `import signal`.\\n3. Define a custom exception class for daemonization errors: `class DaemonizeError(Exception): pass`.\\n4. Create a function for daemonizing a process: `def daemonize(func):`\\n5. Within the `daemonize` function, create a new child process using `os.fork()`.\\n6. In the child process, redirect standard file descriptors: `os.close(sys.stdin.fileno())`, `os.close(sys.stdout.fileno())`, `os.close(sys.stderr.fileno())`.\\n7. Set up a signal handler for `SIGHUP`: `signal.signal(signal.SIGHUP, lambda signum, frame: None)`.\\n8. Change the current working directory to `/`: `os.chdir('/')`.\\n9. Reduce resource usage: `os\"",
    "\"Generate Python code that implements a testing framework for sequence labeling, using the Pytest library to write unit tests for functions that predict sequence labels from input data.\"",
    "\"Generate Python code that imports the required libraries and utilizes the Paramiko library to establish asynchronous SSH connections in parallel across multiple hosts, allowing for efficient management of numerous servers simultaneously.\"",
    "\"Generate Python code that creates a CLI tool for Ansible Tower and AWX using the `argparse` library to parse command-line arguments, the `requests` library to make HTTP requests to the Ansible Tower API, and the `json` library to parse JSON data.\"",
    "\"Generate Python code that uses the `watchdog` library to watch for changes in specified directories and files, and reloads the code using `importlib.reload()` when changes are detected.\"",
    "\"Generate Python code that imports the tweepy library and creates an object to interface with the Twitter API, allowing users to send tweets, follow accounts, and retrieve information about tweets and users.\"",
    "\"Generate Python code that uses the boto3 library to interact with a DynamoDB database, allowing for the conversion of Python objects to JSON and vice versa, similar to the functionality provided by the `dynamodb-json` package in JavaScript.\"",
    "\"Generate Python code that uses the Google Cloud ML Engine API to report HyperTune metrics, including trial status and metric values, to Google Cloud Monitoring and Logging.\"",
    "\"Generate Python code that implements a lightweight version of TensorFlow Extended's core pipeline authoring functionality, including data processing, model training, and deployment, using only essential dependencies and minimal overhead.\"",
    "\"Generate Python code that uses the `django-email` library to interface with various email providers such as Amazon SES, Brevo, MailerSend, Mailgun, Mailjet, Mandrill, Postal, Postmark, Resend, SendGrid, and SparkPost through their respective APIs, allowing you to send emails from your Django application using these services.\"",
    "\"Generate Python code that imports the necessary packages for data manipulation and machine learning, such as NumPy, Pandas, Matplotlib, Scikit-learn, and TensorFlow.\"",
    "\"Generate Python code that imports the TensorFlow module and creates a simple neural network for image classification.\\n\\nHere's a possible implementation:\\n```\\nimport tensorflow as tf\\n\\n# Load the dataset\\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()\\n\\n# Normalize the inputs\\nx_train = x_train.astype('float32') / 255\\nx_test = x_test.astype('float32') / 255\\n\\n# Define the model architecture\\nmodel = tf.keras.Sequential([\\n   tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\\n   tf.keras.layers.MaxPooling2D((2, 2)),\\n   tf.keras.layers.Flatten(),\\n   tf.keras.layers.Dense(64, activation='relu'),\\n   tf.keras.layers.Dropout(\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes a list of colors as input and returns a nicely formatted color palette with a title, legend, and swatches.\"",
    "\"Generate Python code that imports the libssh2 C library and provides a Python interface for accessing its functionality, including methods for connecting to remote servers, authenticating users, and executing commands over SSH.\"",
    "\"Generate Python code that uses the `requests` library to interact with the PagerDuty API, creating sessions and managing incident responses.\"",
    "\"Generate Python code that uses pytest-bdd to define behavioral scenarios and run them against a Pytest test framework, providing a more readable and user-friendly interface for writing acceptance tests.\"",
    "\"Generate Python code that creates an AWS EC2 instance using the CDK Construct Library, specifying the instance type, VPC subnets, security groups, and key pair.\"",
    "\"Generate Python code that creates a class called \\\"ConfigUpdater\\\" that takes a configuration file path as an argument, parses it using a dictionary-based format, and updates the configuration file with new values while maintaining the original comment blocks and order of the settings.\"",
    "\"Generate Python code that creates a simple distributed computing system using DIRAC, allowing users to submit tasks to a central server and execute them on multiple machines.\"",
    "\"Generate Python code that implements an OpenTracing tracer using the Jaeger agent, allowing for distributed tracing of complex systems and troubleshooting of issues across services.\"",
    "\"Generate Python code that uses the Smartsheet API 2.0 to connect to Smartsheet services and perform various operations such as creating, updating, and deleting sheets, rows, and cells; also includes functionality for working with attachments, comments, and workflows.\"",
    "\"Generate Python code that imports the requests library and uses it to interact with an Artifactory instance, allowing users to perform various operations such as retrieving artifacts, searching for artifacts, and creating new artifacts.\"",
    "\"Generate Python code that creates a CloudWatch dashboard with charts displaying CPU usage, memory usage, and disk usage for EC2 instances in a specific region.\"",
    "\"Generate Python code that formats logging messages in JSON or Logstash format using the `logging` module and `json` or `logstash` libraries, respectively.\"",
    "\"Generate Python code that imports the necessary modules and creates an instance of the ERFA class, allowing you to interact with the ERFA device and perform various functions such as reading and writing registers, setting and getting parameters, and executing commands.\"",
    "\"Generate Python code that uses the `os` and `re` modules to discover and manage Cookiecutter templates in a project directory, including parsing template metadata from comments and generating new templates based on existing ones.\"",
    "\"Generate Python code that creates an AWS Key Management Service (KMS) key, adds a description to the key, and grants access to the key to a specific IAM user.\"",
    "\"Generate Python code that uses the ONNX format to convert and optimize deep learning models for efficient inference on various hardware platforms, including CPUs, GPUs, and specialized accelerators.\"",
    "\"Generate Python code that imports the necessary modules and creates a mutable variant of namedtuple, similar to recordclass, that supports assignments and compact dataclasses, while also providing memory-saving features.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that sends notifications to users via email, SMS, or mobile push notifications using APIs like Twilio, Nexmo, or Firebase Cloud Messaging.\"",
    "\"Generate Python code that imports the necessary libraries and connects to a SAP HANA database, allowing the user to execute SQL queries and retrieve results.\"",
    "\"Generate Python code that creates a Telegram bot using the python-telegram-bot library, allowing users to send messages and interact with the bot through commands and inline queries.\"",
    "\"Generate Python code that uses the TensorFlow Cloud API to train a Keras model on a local machine and then scale it up to distributed training in the cloud with minimal code changes.\"",
    "\"Generate Python code that imports the necessary modules and extracts data from various sources using the pandas library, while ensuring compatibility with recent versions of pandas.\"",
    "\"Generate Python code that imports the necessary libraries and provides a class for handling IPv4 and IPv6 addresses and networks, including methods for validating addresses, calculating subnets, and performing DNS lookups.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the Opsgenie REST API, allowing users to interact with Opsgenie's incident management features, such as creating and managing incidents, adding notes and attachments, and assigning ownership.\"",
    "\"Generate Python code that uses the CloudFormation CLI to create, update, and delete resources in AWS using TypeScript language support.\"",
    "\"Generate Python code that imports the necessary libraries for cryptography and SSL, such as hashlib, hmac, and OpenSSL, and provides functions for encryption, decryption, signing, and verification of data using various algorithms and modes, as well as creating and managing SSL/TLS certificates and keys.\"",
    "\"Generate Python code that implements a simple map-reduce framework using the multiprocessing module, allowing users to define their own mapping and reducing functions, and supporting both local and Hadoop distributed computing environments.\"",
    "\"Generate Python code that imports the necessary libraries for full text indexing, search, and spell checking, such as NLTK, spaCy, and PyEnchant; sets up an index of documents and their corresponding keywords; enables searching by keyword, phrase, or fuzzy match; and highlights search results within the indexed documents.\"",
    "\"Generate Python code that implements a Jupyter Server extension providing configuration interfaces for nbextensions, using the `jupyter_server` and `nbextensions` libraries, by defining a custom `Configurable` subclass and registering it with the `JupyterServer` instance.\"",
    "\"Generate Python code that creates an archive using the 7z compression algorithm and supports various features like encryption, files splitting, and directory browsing.\"",
    "\"Generate Python code that imports the hexbytes module and creates a bytes object that decodes hex and displays readable console output:\\n```\\nimport hexbytes\\n\\nbytes_obj = hexbytes.HexBytes('48656c6c6f20776f726c6421')\\nprint(bytes_obj.decode())\\n```\\nThis code imports the hexbytes module, creates a HexBytes object from a hex string using the `hexbytes.HexBytes()` constructor, and then decodes the hex string using the `.decode()` method, printing the resulting bytes object to the console.\"",
    "\"Generate Python code that uses the graphviz library to create a graphical representation of Python objects and their references, starting from a given root object.\"",
    "\"Generate Python code that imports the required modules and annotates the types for the boto3 AppFlow service using mypy-boto3-builder.\"",
    "\"Generate Python code that imports the necessary libraries for image augmentation and deep learning, such as NumPy, scikit-image, and TensorFlow, and defines a function that applies random transformations like rotation, flipping, cropping, and color jittering to an input image, while maintaining its original shape and data type, useful for training deep neural networks.\"",
    "\"Generate Python code that imports the logging module and sets up a basic logging configuration, including a custom log format and a file rotation policy.\"",
    "\"Generate Python code that implements an OAuth 1.0/a, 2.0, and OAuth fly library, allowing users to authenticate with various services and perform actions on their behalf.\"",
    "\"Generate Python code that creates a bytes manipulation library inspired by Java ByteBuffer, allowing users to create buffers from raw memory, perform operations on those buffers, and retrieve the resulting bytes.\"",
    "\"Generate Python code that implements a WSGI middleware using the OpenTelemetry API to collect tracing data from web applications.\"",
    "\"Generate Python code that uses the Azure CLI to integrate Azure Functions with Azure DevOps by using the `azure.functions` and `azure.devops` libraries to create, deploy, and monitor functions, as well as create and manage Azure DevOps workflows and releases.\"",
    "\"Generate Python code that imports the logging module and creates a custom logging handler class that sends log messages to DataDog using their API.\"",
    "\"Generate Python code that parses CommonMark markup language and converts it to HTML using the `commonmark` library, while also supporting extensions defined in the `commonmark-extended` specification.\"",
    "\"Generate Python code that imports the `soaplib` library and creates a lightweight SOAP client that sends a request to a SOAP server, parses the response, and returns the result.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Xlib library to programmatically control windows, such as creating, moving, resizing, and closing them.\"",
    "\"Generate Python code that uses the `subprocess` module to run Jupyter and IPython notebooks in silent mode, capturing the output, and saving it to a file.\"",
    "\"Generate Python code that imports the necessary libraries for an audio package in PyTorch, including torch, torchaudio, and librosa.\"",
    "\"Generate Python code that implements a colorful TAB completion feature for the Python prompt, using the pyINQUIRE library to provide intelligent tab-completion suggestions and utilizing ANSI escape codes to add color to the completed text.\"",
    "\"Generate Python code that uses the json module to parse and manipulate JSON data, similar to the functionality provided by the jq command-line tool.\"",
    "\"Generate Python code that uses various libraries such as Pandas, NumPy, Scikit-learn, and TensorFlow to automatically engineer features from raw data, including data cleaning, transformation, normalization, and dimensionality reduction, aiming to improve model performance and reduce manual effort in feature engineering.\"",
    "\"Generate Python code that implements a Flake8 plugin to check IPDB/PDB statements, using the `flake8` and `ast` modules, like so:\\n```python\\nimport flake8\\nfrom ast import ASTNodeVisitor\\n\\nclass PdbStatementChecker(ASTNodeVisitor):\\n   def __init__(self, tree):\\n       self.tree = tree\\n       self.symbol_table = {}\\n\\n   def visit_Call(self, node):\\n       if isinstance(node.func, ast.Str):\\n           func_name = node.func.s\\n           if func_name == 'ipdb' or func_name == 'pdb':\\n               # Check if the function call has arguments, if not, raise a Flake8 violation\\n               if not node.args:\\n                  message = \\\"IPDB/PDB statement should have an argument\\\"\\n                  flake8.report_violation(message, node)\\n               else:\\n                  # Check if the first argument is a string literal, if not, raise a Flake8 violation\\n                  arg0 = node.args[0\"",
    "\"Generate Python code that implements per-object permissions for Django by creating a custom permission policy that overrides the default permission policy in Django, and defines custom permission rules for each model using a clever combination of Django's built-in permission system and custom SQL queries.\"",
    "\"Generate Python code that implements OpenID support for servers and consumers using the `oidcconsumer` and `openid4python` libraries, respectively, to handle authentication requests and verification of identity claims.\"",
    "\"Generate Python code that uses the PyPI client to search for and download a semi-hard Cornish cheese recipe, and then uses the PyPI client to install the required packages to make the cheese.\"",
    "\"Generate Python code that imports the StateMachine class from the state_machine package and creates a simple state machine with two states, \\\"start\\\" and \\\"end\\\", where transitions between states are triggered by events.\"",
    "\"Generate Python code that imports the necessary modules, loads a WebAssembly binary from a file or memory, and executes it using the wasmtime library, similar to how the `wasmer` package allows you to run WebAssembly binaries in Rust.\"",
    "\"Generate Python code that creates a simple rate-limiting object that takes a function and a maximum number of calls per second as arguments, and returns an decorator that wraps the function and enforces the rate limit using a token bucket algorithm.\"",
    "\"Generate Python code that imports the necessary modules and creates a minimalist Markdown parser using GitHub's fork of cmark.\"",
    "\"Generate Python code that uses the `pip` package manager to install and manage dependencies for testing environments, such as `pytest` or `unittest`, and automatically updates the test dependencies when the project's requirements change.\"",
    "\"Generate Python code that imports the necessary libraries, creates a keystore file, adds certificates and private keys to the keystore, and uses the keystore to establish a secure connection to a server.\"",
    "\"Generate Python code that constructs an Amazon EventBridge event bus, creates a rule for it, and then uses the `put_events` method to send an event to the event bus.\"",
    "\"Generate Python code that sets up HTTP security headers for Flask applications, including Content Security Policy, Cross-Origin Resource Sharing, Strict Transport Security, and other security misconfiguration protections, using the `flask_securityheaders` library.\"",
    "\"Generate Python code that implements a ROS package library for robotic systems, including message definitions, node implementations, and topic subscriptions.\"",
    "\"Generate Python code that imports the coloredlogs module and uses its functions to log messages at different log levels, using colored symbols to represent each level.\"",
    "\"Generate Python code that runs a local continuous test runner using pytest and watchdog to automatically run tests whenever file changes are detected.\"",
    "\"Generate Python code that implements the Java Web Token (JWT), Java Web Encryption (JWE), Java Web Signature (JWS), and Java Key (JWK) standards using the cryptography library.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an AioroMQ connection for both asynchronous and human-readable output.\"",
    "\"Generate Python code that implements an ASGI channel layer using Redis as the backing store, allowing for persistent and highly available real-time communication between ASGI applications.\"",
    "\"Generate Python code that implements transaction management functionality, allowing users to run transactions in a database connection, including beginning a transaction, committing it, rolling it back, and checking its status.\"",
    "\"Generate Python code that creates a CLI interface to Jinja2 using argparse to parse command-line arguments and invoke Jinja2 templates with user-provided data.\"",
    "\"Generate Python code that uses Django's built-in email system to send emails through Amazon SES, including setting up SES credentials, creating an SES client, and using the client to send emails from Django's email templates.\"",
    "\"Generate Python code that imports the pytest module and uses it to create a plugin for aiohttp support, allowing users to run tests using the aiohttp library and taking advantage of pytest's features such as fixtures and markers.\"",
    "\"Generate Python code that signs Ethereum transactions and messages with local private keys using the Web3 library and the account management functions provided by the Ethereum blockchain.\"",
    "\"Generate Python code that uses the Shazam API to identify songs and retrieve information about them, including title, artist, and lyrics, and also allows for reversing the process by searching for songs based on lyrics or melody.\"",
    "\"Generate Python code that imports the simplejson module and creates a typing stub for it using the `typing` module, allowing for type-safe usage of simplejson functions and data structures in other parts of the codebase.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Google Cloud Workflows API client, allowing you to create, read, update, and delete workflows, as well as execute workflows and retrieve their results.\"",
    "\"Generate Python code that imports the necessary modules for common utilities in Jupyter contrib projects, such as `numpy`, `pandas`, and `matplotlib`, and defines a set of utility functions for data manipulation and visualization.\"",
    "\"Generate Python code that uses the `flake8` library to create a plugin that runs `black` as a code style validator, by defining a custom rule that checks for compliance with the `black` format and reports any violations as Flake8 errors.\"",
    "\"Generate Python code that imports the required libraries and sets up a ZeroMQ context, socket, and router to enable communication between processes.\"",
    "\"Generate Python code that implements a probabilistic programming framework using Theano, allowing for Bayesian modeling and probabilistic machine learning.\"",
    "\"Generate Python code that creates a high-performance build system using the `multiprocessing` module to take advantage of multiple CPU cores, utilizing a distributed architecture to optimize build times, and implementing a caching mechanism to avoid rebuilding unnecessary components.\"",
    "\"Generate Python code that uses the `sklearn2onnx` library to convert a scikit-learn model to an ONNX format, allowing for deployment on platforms that support ONNX models.\"",
    "\"Generate Python code that imports the required libraries and uses the pandas library to read and write ARFF files, similar to the following package description:\\n\\n\\\"A module for read and write ARFF files in Python. It provides a convenient interface for reading and writing ARFF files, which are commonly used in machine learning and data mining. The module allows users to easily load ARFF files into memory, manipulate the data, and save it back to disk.\\\"\"",
    "\"Generate Python code that builds a distribution package using Flit, handling the creation of source and wheel archives, as well as publishing the package to PyPI.\"",
    "\"Generate Python code that implements an event checkpointer using Microsoft Azure Event Hubs and the Blob Storage Client Library for Python, allowing you to process and store events in a reliable manner.\"",
    "\"Generate Python code that creates a Flask API that serves time-series data from a PostgreSQL database to Altair charts frontend via RESTful APIs.\"",
    "\"Generate Python code that uses the pyunit extension to write test scenarios that inject dependencies into test cases, allowing for more flexible and reusable testing of Python code.\"",
    "\"Generate Python code that imports the asyncio module and uses it to create an asynchronous version of the PEP-567 context manager using the async with statement.\"",
    "\"Generate Python code that imports the necessary libraries and creates a viewer for Altair and Vega-Lite visualizations, allowing users to interactively explore and view data insights on various devices.\"",
    "\"Generate Python code that implements a library for accurate and scalable data deduplication and entity-resolution, utilizing efficient algorithms and data structures to identify and merge duplicate records, and provide reliable entity resolution across large datasets.\"",
    "\"Generate Python code that imports the required modules and annotates the types of the boto3.Glue service using mypy-boto3-builder, like so:\\n```python\\nfrom typing import Callable\\nfrom mypy_boto3_builder import TypeAnnotator\\nimport boto3\\n\\nTypeAnnotator(boto3).generate_types()\\n```\"",
    "\"Generate Python code that implements a Jupyter notebook extension supporting LaTeX environments within markdown cells, including label and crossreference support, document-wide numbering, bibliographies, and other features using the `nbstudio` library.\"",
    "\"Generate Python code that imports the eth-keyfile library and uses it to handle encrypted keyfiles used to store Ethereum private keys, including creating, reading, and decrypting such keyfiles.\"",
    "\"Generate Python code that uses the pylint-celery plugin to recognize and understand errors caused by using the Celery library in a Pylint analysis.\"",
    "\"Generate Python code that imports the necessary modules and creates a connection to a FoundationDB database, allowing you to interact with the database and perform various operations such as creating tables, inserting data, and querying results.\"",
    "\"Generate Python code that uses the `json` module to parse JSON data and the `re` module to support the Agile Query Language (AQL) syntax for querying semi-structured data.\"",
    "\"Generate Python code that defines a schema for a cloud assembly, including resources, dependencies, and outputs, using a library like yaml or json Schemas.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes a scikit-learn object as input, and then adds plotting functionality to it usingmatplotlib or seaborn.\"",
    "\"Generate Python code that creates a website load testing framework by using the `requests` library to send HTTP requests to a server, and the `time` module to measure the response time.\"",
    "\"Generate Python code that imports the memcached module, creates a client object, sets a key-value pair, retrieves the value, and deletes the key.\"",
    "\"Generate Python code that creates a Django table grid framework by subclassing django.contrib.admin.widgets.Table from django.contrib.admin.templatetags.admin_list, where the generated table displays data in a grid layout and includes pagination, filtering, and sorting features.\"",
    "\"Generate Python code that imports the necessary libraries and provides an interface for interacting with Zabbix APIs, including creating and managing hosts, templates, and items, as well as retrieving data and sending notifications.\"",
    "\"Generate Python code that imports the required libraries and uses the Twofish implementation by Niels Ferguson to encrypt and decrypt data, utilizing the specified key and block size.\"",
    "\"Generate Python code that imports the necessary libraries for creating a collection of Jupyter nbextensions.\"",
    "\"Generate Python code that uses the OpenTelemetry API to collect performance metrics and trace data from gRPC servers and clients, and exports this data to Prometheus for monitoring and Grafana for visualization.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an OAuth2 authentication flow for accessing Google APIs, including prompting the user for consent and obtaining an access token for making API requests.\"",
    "\"Generate Python code that imports the necessary libraries and uses them to read, write, and modify both binary and ASCII STL files, with ease.\"",
    "\"Generate Python code that uses the Boto3 library to upload local files and directories to Amazon S3, such as:\\n```\\nimport boto3\\n\\ns3 = boto3.client('s3')\\n\\n# Upload a file\\ns3.put_object(Body=open('file.txt', 'rb'), Bucket='my-bucket', Key='file.txt')\\n\\n# Upload a directory\\ns3.put_object(Body=BytesIO(b'directory contents'), Bucket='my-bucket', Key='directory/')\\n```\"",
    "\"Generate Python code that uses the sphinx_readthedocs extension to override the default behavior of Read the Docs for documentation build process, allowing customization of the builder, source files, and other settings.\"",
    "\"Generate Python code that uses the Jupyter Notebook API to highlight every instance of the current word in the notebook, using a callback function to iterate through all cells and apply the highlighting using HTML markup.\"",
    "\"Generate Python code that uses the Altair library to save charts to various formats, including PDF, PNG, JPEG, and SVG.\"",
    "\"Generate Python code that imports the Teradata SQL Driver for Python and connects to a Teradata database, allowing you to execute SQL queries and retrieve results.\"",
    "\"Generate Python code that implements a hook for adding Open Authentication support to the Python-requests HTTP library, allowing users to authenticate with service providers using the OAuth protocol.\"",
    "\"Generate Python code that uses the socket library to scan for available TCP ports on localhost, saves the association between the port number and the process ID, and returns the available port number for use by other processes.\"",
    "\"Generate Python code that creates a pipeline using the Google Cloud Dataflow SDK for Python, based on Apache Beam, to process large data sets in parallel across multiple machines.\"",
    "\"Generate Python code that uses ast.literal_eval to deserialize a JSON-like string into an actual Python object, similar to how the `json` module works, but without the need for quotes around strings.\"",
    "\"Generate Python code that creates a smart object creation facility for Django using classes, factories, and metaclasses to enable rapid development of consistent, reusable business logic building blocks.\"",
    "\"Generate Python code that imports the necessary modules for the New Relic Telemetry SDK, initializes the SDK with a license key and account ID, and starts sending telemetry data to New Relic.\"",
    "\"Generate Python code that creates an AWS SSM document using the CDK Construct Library, providing a template for defining and managing AWS resources in a declarative manner.\"",
    "\"Generate Python code that imports the necessary modules for connecting to a Phoenix database, creates a connection object, and executes a query to retrieve data from a table.\"",
    "\"Generate Python code that imports the requests library and creates a mock response object to mimic the behavior of a remote server, allowing for flexible customization of the response data and headers, and enabling mocking of HTTP errors and redirects.\"",
    "\"Generate Python code that imports the selenium webdriver and uses it to automate a web browser to navigate to a website, interact with the page, and retrieve information.\"",
    "\"Generate Python code that creates an embedded database using DuckDB, allowing for efficient data storage and querying within a single binary.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an SMB connection between a Windows and a Linux machine, allowing for file sharing between the two systems using the pysmb library.\"",
    "\"Generate Python code that imports the marker library and checks if urllib3 was installed with the deprecated secure extra by using the `marker` function from the `packaging` library, like this:\\n```\\nfrom packaging import marker\\n\\nif marker.check_installed('urllib3', deprecated='secure'):\\n   print(\\\"urllib3 was installed with the deprecated secure extra\\\")\\nelse:\\n   print(\\\"urllib3 was not installed with the deprecated secure extra\\\")\\n```\"",
    "\"Generate Python code that uses the yfinance library to download historical stock prices for a given ticker symbol from Yahoo! Finance API, stores the data in a CSV file, and visualizes it using matplot lib.\"",
    "\"Generate Python code that reads JSON files and adds Python and JavaScript style comments using the `json` library and the `re` module for regular expressions.\"",
    "\"Generate Python code that implements a Selenium.webdriver.Chrome replacement with compatibility for Brave and other Chromium-based browsers, while avoiding detection by CloudFlare/Imperva/hCaptcha and similar services, and includes ongoing efforts in understanding detection algorithms.\"",
    "\"Generate Python code that implements a diff/patch pair for JSON-serialized data structures by defining a function to calculate the difference between two JSON objects and another function to apply the differences to a base object, using the `json` module to parse and generate JSON data.\"",
    "\"Generate Python code that imports the necessary libraries and initializes a speech recognition engine using the Google Cloud Speech-to-Text API, allowing for both online and offline speech recognition capabilities.\"",
    "\"Generate Python code that imports the necessary libraries for manipulating IPv4 and IPv6 addresses, such as `ipaddress` and `socket`, and provides functions for validating, parsing, and converting between different formats of IP addresses, as well as performing operations such as address resolution and subnet calculation.\"",
    "\"Generate Python code that imports the necessary libraries and creates a PagerDuty client object to interact with the PagerDuty API, including methods to retrieve incident information, create new incidents, and update existing incidents.\"",
    "\"Generate Python code that uses the `numpy` library to perform vectorization and parallel computing tasks, similar to the functionality provided by the `Accelerate` package.\"",
    "\"Generate Python code that uses the Fabric library to execute a command on a remote server and deploy a application.\"",
    "\"Generate Python code that implements a simple flock-based file locking mechanism using the `with` syntax, allowing multiple threads to safely access a shared resource while ensuring exclusive access for writing operations.\"",
    "\"Generate Python code that implements a GraphQL server using the `graphql-python` library, including a schema definition, resolvers, and query handling.\"",
    "\"Generate Python code that uses urllib3 to create a framework for building good API client libraries, including functions for making HTTP requests, handling authentication, and parsing responses.\"",
    "\"Generate Python code that uses the click module to create a command-line interface with colored help messages.\"",
    "\"Generate Python code that reads and writes PDF files using the PyPDF2 library, which provides an easy-to-use interface for reading and writing PDF files in Python.\"",
    "\"Generate Python code that imports the necessary libraries and reads in the USA zipcode programmable database, including 2020 census data and geometry information, from a file or online source, and stores it in a pandas DataFrame for easy manipulation and analysis.\"",
    "\"Generate Python code that creates an Amazon SQS queue using the CDK Construct Library for AWS, specifying the queue name, maximum message age, and visibility timeout, and granting permission for the specified AWS account to send messages to the queue.\"",
    "\"Generate Python code that imports the necessary libraries and creates a class to wrap the NVIDIA Management Library, providing a Pythonic interface for accessing and manipulating GPU information, job submission and monitoring, and other management functions.\"",
    "\"Generate Python code that imports and sets up a dependency injection framework, such as Py injector, to manage dependencies for an application.\"",
    "\"Generate Python code that implements a Kafka consumer using asyncio, allowing for efficient and concurrent processing of messages from multiple Kafka topics.\"",
    "\"Generate Python code that imports the Faker package and uses it to generate fake data for various applications, such as creating fake names, emails, phone numbers, addresses, and other personal information, as well as generating fake data for testing purposes, such as fake dates, times, and quantities.\"",
    "\"Generate Python code that implements a distributed object middleware system using the RPC module, allowing for seamless communication between remote objects.\"",
    "\"Generate Python code that uses the `pytube` library to download YouTube videos, where the video URL is input by the user, and the downloaded video is saved in the format of \\\"title-video.mp4\\\" in the same directory as the script.\"",
    "\"Generate Python code that uses the py_sgp4 library to track Earth satellites given TLE data, utilizing up-to-date 2020 SGP4 routines.\"",
    "\"Generate Python code that imports the necessary modules and creates a class called Tree with methods for creating nodes, adding children to nodes, and traversing the tree using pre-order, in-order, and post-order algorithms.\"",
    "\"Generate Python code that implements a Redis cache backend for Django, allowing for efficient caching of frequently accessed data and reducing database load.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Plaid client object to interact with the Plaid API and Link.\"",
    "\"Generate Python code that traverses the objects subtree of a given root object, calculates the total size of each object in bytes using the sys.getsizeof() function, and returns the sum of all object sizes as the deep size of the subtree.\"",
    "\"Generate Python code that imports the unittest module and creates a mock object for a class named \\\"MyClass\\\" with a method named \\\"my_method\\\" that takes a string argument, using the mock object to define a stub implementation of the method that returns a constant value.\"",
    "\"Generate Python code that uses the Kaitai Struct library to parse binary data and generate a declarative parser for binary data.\"",
    "\"Generate Python code that imports the os module, creates a directory named \\\"stubs\\\" in the current working directory, creates an empty file named \\\"non_existent_module.py\\\" inside the \\\"stubs\\\" directory, and adds a line \\\"pass\\\" inside the file to stub out the non-existent module.\"",
    "\"Generate Python code that imports the necessary modules, executes the nvidia-smi command, parses the output, and returns a dictionary containing information about the GPU status, such as memory usage and device temperature.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper function for each libusb-1.0 function, using the ctypes library to interact with the shared library.\"",
    "\"Generate Python code that imports the necessary modules, reads and parses the htpasswd file, creates an object for each user and group, and provides methods for checking credentials, adding and removing users and groups, and modifying passwords.\"",
    "\"Generate Python code that uses the WhoPy library to perform WHOIS queries and parse domain registration information, returning a dictionary containing details such as domain name, registrar, and expiration date.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Spark session to interact with the sparkMeasure tool for performance troubleshooting of Apache Spark workloads.\"",
    "\"Generate Python code that implements Django admin CKEditor integration by adding CKEditor as a widget in Django's built-in admin interface, allowing users to easily edit rich text content within the admin dashboard.\"",
    "\"Generate Python code that imports the necessary libraries for automatic semantic versioning, such as `packaging` and `version`, and sets up a versioning scheme using `version.parse()` and `version.bump()`.\"",
    "\"Generate Python code that creates a Discord bot that can send messages, embed files, and perform various other tasks using the discord.py library.\"",
    "\"Generate Python code that uses the pylint-flask plugin to recognize and understand errors caused by using Flask, by running pylint with the --load-plugins flag set to pylint_flask.\"",
    "\"Generate Python code that imports the necessary modules and provides the same functionality as the deprecated module, using only the core module.\"",
    "\"Generate Python code that uses the torch.utils.tensor_flops module to count the number of floating-point operations (FLOPs) required by a PyTorch model during forward pass.\"",
    "\"Generate Python code that imports the necessary libraries and uses fuzzysearch to find approximate subsequence matches in a given string, returning a list of matching sequences with their starting indices.\"",
    "\"Generate Python code that creates a simple query builder for Elasticsearch 2, allowing users to construct queries using a convenient API and automatically generating the corresponding Elasticsearch query string.\"",
    "\"Generate Python code that implements a static memory-efficient and fast Trie-like structure for storing and retrieving strings, using a combination of arrays and linked lists to optimize memory usage and search performance.\"",
    "\"Generate Python code that imports the necessary libraries and defines a constructor to create an Application Auto Scaling resource.\"",
    "\"Generate Python code that imports the necessary libraries and configures an Elasticsearch client object to interact with an Elasticsearch cluster, including setting the host and port, authentication, and specifying the default index and type.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to Humio using the provided API key or username and password.\"",
    "\"Generate Python code that creates an AWS SNS topic using the CDK Construct Library, specifying the topic name, message type, and subscription protocol.\"",
    "\"Generate Python code that creates beautiful terminal spinners using the `terminal` module and `asyncio` library, providing a range of customizable options for spacing, color, and animation speed.\"",
    "\"Generate Python code that imports the Swagger module, creates a Swagger client object with the given API endpoint URL, generates a Swagger spec for the client using the `swagger_spec` function, and then uses the generated spec to create a Swagger server with the `swagger_server` function.\"",
    "\"Generate Python code that creates an open-source, low-code machine learning library in Python, allowing users to easily build, train, and deploy models without extensive coding knowledge, featuring data preprocessing, feature engineering, model selection, evaluation, and deployment tools, and supporting multiple machine learning frameworks.\"",
    "\"Generate Python code that implements a library for enforcing positional or keyword arguments in function calls, using the `inspect` module to check the function signature and raise an error if there are any inconsistencies.\"",
    "\"Generate Python code that declares parameters for a function that takes a list of numbers and returns the sum of all pairs of numbers in the list that add up to a given target value, using the `param` module to define the function's parameters.\"",
    "\"Generate Python code that imports the os and random modules, defines a function that generates a random password using a combination of letters, numbers, and special characters, and returns the generated password.\"",
    "\"Generate Python code that parses Gherkin files and extracts feature, scenario, and step information using the ast module to create an abstract syntax tree representation of the Gherkin content.\"",
    "\"Generate Python code that uses the `pytest` framework to create a plugin for controlling remote data access, including functionality for authentication, data retrieval, and data manipulation.\"",
    "\"Generate Python code that creates a Flask API with browsable endpoints using the `flask_apispec` library, which generates OpenAPI documentation for the API and allows users to interactively explore it in their web browser.\"",
    "\"Generate Python code that imports the necessary libraries and defines a set of temporal types with nanosecond resolution for representing time intervals and durations in Python.\"",
    "\"Generate Python code that uses BeautifulSoup and Requests libraries to scrape data from a webpage and then uses Pandas library to manipulate and clean the data, specifically extracting names, emails, and job titles of people mentioned in the webpage.\"",
    "\"Generate Python code that uses the ast module to parse a source file, remove all comments, and then rewrite the cleaned source code back to a new file.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Zendesk API object to interact with Zendesk support tickets, users, and groups.\"",
    "\"Generate Python code that implements a productivity-centric Python big data framework by combining modular components for data ingestion, processing, and visualization, leveraging popular libraries like Apache Beam, Apache Spark, and Matplotlib.\"",
    "\"Generate Python code that imports the necessary libraries and initializes a Firebase Cloud Messaging (FCM) client for sending notifications to Android, iOS, and web devices.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a CatBoost model for regression tasks, using the `catboost` library.\"",
    "\"Generate Python code that imports the necessary libraries and defines functions for creating and parsing packets using the basic TCP/IP protocols, such as IPv4, ICMP, UDP, and TCP.\"",
    "\"Generate Python code that imports the necessary AWS CDK modules and creates an AutoScalingGroup and an ApplicationAutoScalator, configuring them to work together to scale an application based on certain conditions.\"",
    "\"Generate Python code that creates a REPL (Read-Eval-Print Loop) environment using the `prompt_toolkit` library, similar to the Python REPL built into the Python interpreter, but with additional features such as syntax highlighting, code completion, and customizable prompts.\"",
    "\"Generate Python code that imports and uses ObjC classes, methods, and functions seamlessly in Python scripts and programs, allowing for easy interaction between Python and Objective-C code.\"",
    "\"Generate Python code that uses the `swagger_schema_validator` library to validate a JSON data file against a Swagger schema, raising an exception if any validation errors occur.\"",
    "\"Generate Python code that uses the Geocoding API to reverse geocode a list of latitude and longitude coordinates and returns the corresponding addresses without requiring internet connectivity.\"",
    "\"Generate Python code that imports the psycopg2 library and creates a connection to a PostgreSQL database, allowing you to execute SQL queries and interact with the database.\"",
    "\"Generate Python code that uses the `os` and `hashlib` modules to iterate over files in a directory, compute the hash of each file's contents, and store the resulting hash values in a list.\"",
    "\"Generate Python code that profiles your Django application's performance with silky smooth visualizations and detailed insights using the built-in profiler and graphical representation tools like Matplotlib or Seaborn.\"",
    "\"Generate Python code that uses astroid to parse a Python project's source files, identifies functions, methods, and variables that are never used, and reports their names and locations.\"",
    "\"Generate Python code that reads the MANIFEST.in file in a Python source package and checks if all listed files are present, raising an error if any are missing.\"",
    "\"Generate Python code that creates a home automation platform using Python 3, allowing users to control various devices and appliances in their home through a user-friendly interface, including scheduling and remote access capabilities.\"",
    "\"Generate Python code that creates an AWS ECR repository and configures it to store Docker images, including setting up the necessary IAM policies and resource permissions.\"",
    "\"Generate Python code that imports the required libraries and creates a multi-language, cross-platform library that provides cryptographic APIs using secure, easy-to-use classes and methods, while also implementing safeguards against common misuses.\"",
    "\"Generate Python code that imports the MXNet library and creates a simple neural network using the MKLDNN backend.\\n\\nHere's an example of what the generated code might look like:\\n```\\nimport mxnet as mx\\n\\n# Create a simple neural network with two layers\\nnet = mx.symbol.Sequential(\\n   mx.symbol.Dense(64, input_dim=784, activation='relu'),\\n   mx.symbol.Dense(10, activation='softmax')\\n)\\n\\n# Use the MKLDNN backend to execute the model on a GPU\\ndev = mx.device.gpu(0)\\nexecutor = mx.mkldnn.MKLDNNExecutor(dev)\\nexecutor.compile(net, loss='softmax', optimizer='sgd',\\n                       momentum=0.9, num_gradients=2)\\n```\\nThis code defines a simple neural network with two dense layers, using the `mx.symbol.Dense` function from the MXNet library. It then uses the `mx.device.gpu` function to specify that the model should\"",
    "\"Generate Python code that creates a spinning cursor in the terminal using ASCII characters, providing a loading animation while waiting for a command to complete.\"",
    "\"Generate Python code that uses the sphinx-autobuild library to rebuild Sphinx documentation on changes and the watchdog library to monitor for changes and trigger rebuilding, with live-reload in the browser using the livereload library.\"",
    "\"Generate Python code that imports the necessary modules and defines a function to convert data between EBCDIC and ASCII, similar to the `ebcdic` module but with additional codec functionality.\"",
    "\"Generate Python code that uses the `colored` module to provide colored output for nose tests, like so:\\n```\\nimport colored\\ndef test_func():\\n   colored.blue(\\\"This is a blue message\\\")\\n   colored.green(\\\"This is a green message\\\")\\n   colored.red(\\\"This is a red message\\\")\\n```\"",
    "\"Generate Python code that imports and wraps various image augmentation libraries, providing an easy-to-use interface for applying random transformations to images.\"",
    "\"Generate Python code that uses the `swagger-python` library to parse Swagger/OpenAPI 2.0 and 3.0.0 definitions and extract information such as APIs, operations, request and response bodies, security schemes, and tags.\"",
    "\"Generate Python code that implements a simple VarInt encoding and decoding function, like the `varint` module in Go, but without using any additional libraries or dependencies.\"",
    "\"Generate Python code that implements an LDAP authentication backend for Django, using the ldap3 library to connect to LDAP servers and authenticate users, and utilizing Django's built-in authentication framework to manage user sessions and permissions.\"",
    "\"Generate Python code that creates a flexible command line interface using the argparse module, allowing users to define custom commands and arguments, and handling common command line options such as --help, --version, and -h.\"",
    "\"Generate Python code that creates a simple thumbailer for Django using Pillow and Django's built-in image compression.\"",
    "\"Generate Python code that imports the required packages, sets up the logging configuration, creates a logging file handler, and logs messages at different levels using the Logging Academy style.\"",
    "\"Generate Python code that uses the `setuptools` and `scm` modules to create a plugin for Git archives, which allows developers to easily manage and track their project's dependencies and versioning using Git repositories.\"",
    "\"Generate Python code that imports the MarkupSafe module and creates a typing stub for it using the `typing` module, allowing for type-safe interactions with MarkupSafe objects.\"",
    "\"Generate Python code that uses the openapi-generator library to create a custom OpenAPI 3 schema generator for Django REST framework, which allows for the creation of APIs with a simple and consistent structure, while also providing flexibility in terms of customization and extension.\"",
    "\"Generate Python code that creates a library for lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container using Docker and Python's built-in libraries such as sqlite3, selenium, and docker.\"",
    "\"Generate Python code that reads and writes PDFs using the qpdf library, allowing for manipulation and modification of PDF files.\"",
    "\"Generate Python code that creates and signs OCSP requests and responses for X.509 certificates using the cryptography library, specifically the `cryptography.x509` module, and the `ocsp` submodule within it.\"",
    "\"Generate Python code that imports the necessary libraries, sets up a WebSocket connection using the WS4PY library, and sends a message to the server using the AutobahnPython library.\"",
    "\"Generate Python code that imports the necessary libraries and creates a distributed quantile sketches object, allowing for efficient computation of quantiles over large datasets.\"",
    "\"Generate Python code that implements a backport of f-strings to Python versions prior to 3.6 using the `str.format()` method.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client instance for interacting with the Google Cloud Memcache API, allowing users to perform operations such as caching and retrieving data, incrementing counters, and deleting cache entries.\"",
    "\"Generate Python code that creates a Rich Text Format document using PyRTF, including text styles, font sizes, and paragraph alignment, with the ability to add images and tables, and export the document to PDF, HTML, or Text files.\"",
    "\"Generate Python code that creates a Secret in AWS Secrets Manager using the CDK Construct Library, specifying a secret name, description, and secret value, and assigning the appropriate permissions to access the secret.\"",
    "\"Generate Python code that imports the necessary modules for managing expensive test resources, sets up a resource manager to handle their allocation and deallocation, defines fixtures for each type of resource, and registers them with PyUnit for use in test cases.\"",
    "\"Generate Python code that imports the required modules and creates an instance of the AzureCLI class, allowing you to run Azure CLI commands using Python.\"",
    "\"Generate Python code that imports the necessary modules and configures an Apache Airflow provider to interact with Slack, allowing users to create Slack messages and post them to specified channels using Airflow tasks.\"",
    "\"Generate Python code that creates a click option group with a list of mutually exclusive options.\"",
    "\"Generate Python code that uses the `yaml` module to read and write YAML files, and the `argparse` module to parse command-line arguments, to create a command-line interface for working with YAML files.\"",
    "\"Generate Python code that imports the autograd library and defines a function that takes in a shape parameter and returns an approximation to the gamma family of functions using the autograd library's gradient capabilities.\"",
    "\"Generate Python code that implements the BiDi layout algorithm, which is a method for laying out text in a way that respects the language's directionality, using pure Python without any external libraries or dependencies.\"",
    "\"Generate Python code that creates a Docker image from a local directory and uploads it to Amazon Elastic Container Registry (ECR) using the AWS SDK for Python (Boto3).\"",
    "\"Generate Python code that instruments Flask applications with OpenTelemetry tracing and metrics using the `opentelemetry-python` library, allowing for the collection and export of trace data and metrics to OpenTelemetry collectors.\"",
    "\"Generate Python code that implements an RFC 6960 compliant OCSP Responder framework using the python-ocsp library, supporting multiple response types and nonce handling, and utilizing HTTPS for secure communication.\"",
    "\"Generate Python code that uses the `unittest` module to create test cases for Jinja2 templates, comparing expected results against actual rendered templates.\"",
    "\"Generate Python code that imports the necessary libraries, creates a scale object with specified parameters, and performs operations such as scaling, transforming, and applying constraints on data.\"",
    "\"Generate Python code that imports the logging module and configures it to log events at the DEBUG level, including the file name and line number of the calling code, and logs messages to a file named \\\"app.log\\\" in the current working directory, with the option to send logs to multiple files or databases.\"",
    "\"Generate Python code that creates a custom authentication backend for Django to keep track of failed login attempts, storing the data in a database and implementing rate limiting.\"",
    "\"Generate Python code that implements a non-parametric Mann-Kendall family of trend tests, using a combination of statistical methods and data manipulation techniques to identify significant trends in datasets.\"",
    "\"Generate Python code that implements a useful property variant system for Python programming, including required properties, writable properties, cached properties, and other custom property behaviors through a comprehensive framework or library.\"",
    "\"Generate Python code that imports the required libraries and creates classes for interacting with Mercurial and Git repositories.\"",
    "\"Generate Python code that imports the necessary libraries and defines a differentiable computer vision model using PyTorch, allowing for efficient training and inference of various visual tasks such as object detection, segmentation, and image classification.\"",
    "\"Generate Python code that imports the django-fsm library and creates a simple state machine with two states, \\\"pending\\\" and \\\"approved\\\", for demonstrating basic workflow management in Django applications.\"",
    "\"Generate Python code that uses web scraping techniques to extract information from Johns Hopkins University and Worldometer's websites, specifically focusing on data related to the novel coronavirus, such as case numbers, deaths, and recovery rates, and store the collected data in a structured format for further analysis and visualization.\"",
    "\"Generate Python code that imports the necessary libraries and creates a LightFM recommendation model using the Surprise library, which can handle implicit feedback data and provides a high-quality ranking of recommended items for users.\"",
    "\"Generate Python code that imports the InfluxDB 2.0 Python client library and creates a client object to connect to an InfluxDB instance.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an AMQP connection to a RabbitMQ server, allowing for sending and receiving messages asynchronously using the Qpid AMQP protocol.\"",
    "\"Generate Python code that instruments Redis calls using OpenTelemetry tracing by wrapping the Redis client library and decorating its methods with traces, span names, and other metadata to monitor performance and troubleshoot issues in distributed systems.\"",
    "\"Generate Python code that trains a fast and accurate neural network using modern best practices with minimal code and maximum productivity, leveraging the latest developments in deep learning research.\"",
    "\"Generate Python code that imports the necessary libraries for developing a Python project, such as requests, pandas, and numpy, and sets up a basic project structure with a README file and a testing environment using pytest.\"",
    "\"Generate Python code that imports a module using the importlib.import_module() function from Python 2.7, allowing for the use of newer Python features in older versions of Python.\"",
    "\"Generate Python code that implements an interface between Avro and pandas DataFrame using the `avro` and `pandas` libraries, allowing for seamless data exchange between the two formats.\"",
    "\"Generate Python code that parses and matches patterns in strings using the `re` module, providing a simple and efficient way to extract information from strings.\"",
    "\"Generate Python code that creates and signs CAs and certificates using the cryptography library, including key generation, certificate signing requests, and certificate issuance, all in accordance with industry standards and best practices for security and trust.\"",
    "\"Generate Python code that uses the `multiprocessing` module to run multiple robot framework tests in parallel, using a manager to share test data and avoiding duplicate test runs.\"",
    "\"Generate Python code that imports the logging module and creates a logger object to log important events and messages in your program.\"",
    "\"Generate Python code that implements an authorization system for humans, allowing them to grant and revoke permissions to access certain resources, using a intuitive and user-friendly interface.\"",
    "\"Generate Python code that imports the Zstandard compression library and uses it to compress and decompress data in a manner similar to the bz2/lzma/zlib modules.\"",
    "\"Generate Python code that imports the pandas library and adds type hints to its functions and methods, providing static type checking for column data types and improving code readability and maintainability.\"",
    "\"Generate Python code that imports the necessary libraries and creates a STOMP client that supports versions 1.0, 1.1, and 1.2 of the protocol, allowing users to send and receive messages over a WebSocket connection.\"",
    "\"Generate Python code that imports the necessary libraries and defines a CDK construct for an AWS Certificate Manager certificate, specifying the certificate name, domain name, and validation method.\"",
    "\"Generate Python code that parses a superset of Python code allowing for inline module import expressions:\\n\\n```\\nfrom __future__ import absolute_import\\nimport re\\n\\ndef parse(source):\\n   \\\"\\\"\\\"\\n   Parse a superset of Python code, allowing for inline module import expressions.\\n   \\\"\\\"\\\"\\n   imports = re.findall(r\\\"(?:^|\\\\s)import\\\\s+(\\\\w+)\\\\s*(\\\\[.*?\\\\]|)\\\", source)\\n   for mod in imports:\\n       yield mod\\n       # Perform additional processing on the imported module, such as checking if it's a built-in module\\n       # or loading it from a file\\n       pass\\n```\"",
    "\"Generate Python code that uses the `git` module to retrieve the current commit hash, and sets the package version to the commit hash, separated by periods, for example \\\"1.2.3.4-abcdefg\\\" where \\\"abcdefg\\\" is the abbreviated commit hash.\"",
    "\"Generate Python code that defines a data description language using the `typing` module to create types for descriptions, tables, and datasets, and the `dataclasses` module to define classes for representing data values and their descriptions.\"",
    "\"Generate Python code that uses the setuptools module to create a binary extension for a Python package, allowing users to easily install and manage binary dependencies for their packages.\"",
    "\"Generate Python code that imports the Aerospike client library and creates a client object to interact with an Aerospike database cluster.\"",
    "\"Generate Python code that defines a CloudFormation template using the AWS CDK Construct Library, allowing users to define infrastructure as code and create, update, and version control their AWS resources in a declarative manner.\"",
    "\"Generate Python code that imports the Selenium library and uses it to automate interactions with a web application, such as navigating to pages, filling out forms, and verifying expected elements are present on the page.\"",
    "\"Generate Python code that imports the necessary libraries and creates a basic structure for a web application using Flask, allowing users to interact with data exploration tools and visualizations.\"",
    "\"Generate Python code that imports the nltk library, downloads the stopword corpus for multiple languages, and returns a list of common stop words in each language.\"",
    "\"Generate Python code that implements a stream processing system, utilizing the `async` and `await` keywords to handle asynchronous I/O operations, and leveraging libraries such as `asyncio` and `streaming` to efficiently process large data sets in real-time.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an HTTP/2 connection to the Apple Push Notification Service, allowing you to send push notifications to Apple devices.\"",
    "\"Generate Python code that imports the tlslite module and creates an SSL/TLS context for secure communication.\"",
    "\"Generate Python code that imports the necessary libraries and performs fast hierarchical clustering on a dataset using a chosen algorithm, such as agnes or Ward's method.\"",
    "\"Generate Python code that implements a fast native diff algorithm using a C library, falling back to a pure Python implementation if the C library is not available.\"",
    "\"Generate Python code that adds a copy button to each code cell using the `ipywidgets` library by creating a widget for the button and adding it to the layout of the code cell.\"",
    "\"Generate Python code that imports the necessary libraries and defines functions for converting colors and formatting text in the terminal, similar to the 'colored' package.\"",
    "\"Generate Python code that uses a JPL ephemeris to predict planet positions by importing the necessary libraries, parsing the ephemeris data, and calculating the planetary positions using spherical trigonometry.\"",
    "\"Generate Python code that imports the necessary modules and creates a dictionary object that supports keylist, keypath, and keyattr access, as well as various input/output formats, including base64, CSV, INI, JSON, pickle, plist, query-string, TOML, XLS, XML, YAML, and utilities for human-friendly interaction.\"",
    "\"Generate Python code that allows you to interact with the Shopify API, including creating and managing products, orders, customers, and inventory, using the shopify-python-api library.\"",
    "\"Generate Python code that imports the chardet library and creates a typing stub for it, allowing for more convenient and auto-completable type hints in your Python code.\"",
    "\"Generate Python code that imports the necessary libraries and uses the pydicom library to read and write DICOM data, similar to how it is done in the package description.\"",
    "\"Generate Python code that uses regular expressions to search for suspicious patterns in Python code, such as unnecessary complexity, unconventional syntax, or code that is difficult to understand or maintain.\"",
    "\"Generate Python code that implements a messaging API using the Oslo Messaging API, allowing for sending and receiving messages between microservices.\"",
    "\"Generate Python code that imports the necessary libraries, sets up a Flask app, and adds GraphQL support to the app using Flask-GraphQL.\"",
    "\"Generate Python code that calculates sunset and sunrise times for a given location using astronomical formulas and returns the results in a user-friendly format.\"",
    "\"Generate Python code that defines a class called `BufferedTask` that inherits from `multiprocessing.Task` and implements a buffer for storing messages, a function to process the buffered messages as a list, and a method to flush the buffer to ensure tasks are completed.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `subprocess` module to run ffmpeg commands, allowing users to convert, manipulate, and stream video and audio files in various formats.\"",
    "\"Generate Python code that creates a Slack bot that listens for incoming webhooks and responds to messages with a custom message.\"",
    "\"Generate Python code that implements Kafka integration with asyncio, allowing for asynchronous reading and writing of messages to Kafka topics using the asyncio module's async/await syntax and the Kafka consumer and producer APIs.\"",
    "\"Generate Python code that imports the necessary modules and creates an HDFS client object to interact with the HDFS file system, allowing for file reads, writes, and deletions, as well as folder creations and removals, all performed using the HDFS protocol.\"",
    "\"Generate Python code that implements a rate limiter for Flask applications using the `limiter` library, which provides a simple way to add rate limiting to any Flask endpoint.\"",
    "\"Generate Python code that imports the MeCab library and provides a simple interface for performing morphological analysis on Japanese text, including part-of-speech tagging, lemmatization, and named entity recognition.\"",
    "\"Generate Python code that imports the necessary libraries and uses the PySAT or CVC3 library to create an efficient SMT solver that can solve a wide range of Satisfiability Modulo Theories (SMT) problems.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the OpenStackOrchestrationAPIClient class, which can be used to interact with the OpenStack Orchestration API.\"",
    "\"Generate Python code that imports and uses the OpenGL library to create a window, render 2D graphics, and handle user input events.\"",
    "\"Generate Python code that creates an interactive bar chart using Matplotlib and allows users to explore data insights by hovering over bars, clicking on bars, and selecting date ranges.\"",
    "\"Generate Python code that creates a sparse matrix using SciPy's lil_matrix class, performs matrix multiplication using NumPy's dot product, and selects the top-n elements of the resultant matrix using NumPy's argsort function.\"",
    "\"Generate Python code that imports the `futures` module and adds useful functionalities such as support for asynchronous programming, improved error handling, and better performance.\"",
    "\"Generate Python code that imports the necessary libraries and uses the tardis.dev API to retrieve historical tick-level cryptocurrency market data and replay it in real-time, allowing users to analyze and visualize the data as desired.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an Aliyun OSS client object to interact with the Object Storage Service, allowing users to create buckets, upload files, list objects, and delete objects.\"",
    "\"Generate Python code that uses the Robot Framework library to create a test suite with a variety of test cases, including keyword-based tests, data-driven tests, and behavior-driven development tests, and provides tools for organizing and maintaining the test suite over time.\"",
    "\"Generate Python code that creates an Elastic Load Balancer using AWS CDK, specifying v2 as the version.\"",
    "\"Generate Python code that creates a Rocket League bot using the pyrocket league library, allowing you to automate various aspects of the game, such as controlling your car, shooting the ball, and responding to game events, all without requiring an internet connection.\"",
    "\"Generate Python code that implements a tiny visitor pattern using a single function decorator, where the function takes an object and returns a new object with visit methods called in a specific order.\"",
    "\"Generate Python code that creates a user-friendly interface for managing and interacting with Home Assistant entities, including searching and filtering entities, viewing entity states, and controlling entity states through buttons and sliders.\"",
    "\"Generate Python code that creates a CDK construct for an AWS Route53 resource, allowing developers to define declarative infrastructure for DNS zones, records, and related resources in their AWS environment.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function to send a SPARQL query to an endpoint and retrieve the results, handling authentication and parsing the response into a useful data structure.\"",
    "\"Generate Python code that imports the required libraries and provides a consistent interface for reading and writing tabular data in various formats, including CSV, Excel, JSON, and others.\"",
    "\"Generate Python code that imports the necessary libraries and creates a simple hidden Markov model using scikit-learn's API, similar to how it would be done in a real-world application.\"",
    "\"Generate Python code that uses the Selenium WebDriver API to automate interactions with web browsers, including navigating to websites, filling out forms, and clicking buttons, while also providing a simple and intuitive API for defining tests and debugging failures.\"",
    "\"Generate Python code that uses the ast module to parse Python source files and identify comments containing executable code, then report any violations found using flake8's reporting mechanism.\"",
    "\"Generate Python code that imports the necessary modules, sets up a mock database connection, creates a mock dataset, and defines a function to query the mock database and return the expected results, all using SQLAlchemy's API.\"",
    "\"Generate Python code that uses BeautifulSoup and Requests libraries to search for videos on YouTube by sending an HTTP request to the YouTube search page and parsing the HTML response to extract the video titles and URLs.\"",
    "\"Generate Python code that uses the `nose` and `cover` packages to create Cobertura-style XML reports for unit tests, similar to the functionality provided by the `nose-cobertura` package.\"",
    "\"Generate Python code that uses the `subprocess` module to run commands like `git describe --tags` or `pip freeze` to retrieve version information for applications, and parses the output to extract the version numbers.\"",
    "\"Generate Python code that copies examples from a directory and saves them in a new directory with a specified name, fetches data from an API and saves it to a CSV file, and demonstrates how to use the requests library to make HTTP requests.\"",
    "\"Generate Python code that implements an OpenID Connect client authentication protocol for python-requests using the `oidc` library, including configuration of the client ID, secret, and authorization server URL, and handling redirects and errors.\"",
    "\"Generate Python code that uses the `xmltodict` library to convert XML files into JSON objects, and the `json` library to convert JSON objects into Python dictionaries and lists, and vice versa.\"",
    "\"Generate Python code that imports the aiohttp library and creates a simple retry client that implements a retry mechanism using the exponential backoff strategy, allowing for customization of the maximum number of retries, initial delay, and multiplier.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the Synopsys Black Duck Hub REST API, allowing users to interact with the API's resources and retrieve information from it.\"",
    "\"Generate Python code that creates an API client for interacting with remote resources using the ActiveResource library, allowing for seamless interaction with RESTful APIs and providing a simple and intuitive interface for defining resources, associations, and actions.\"",
    "\"Generate Python code that uses a database of thousands of throwable email providers to validate emails across multiple languages, utilizing a cross-language email validation system.\"",
    "\"Generate Python code that imports the required modules, creates a stub file with the same name as the given file but with a `.py` extension, and adds a `pass` statement to the stub file.\"",
    "\"Generate Python code that imports the Neo4j Bolt driver and creates a connection to a Neo4j database, allowing the user to execute Cypher queries and manipulate data in the graph.\"",
    "\"Generate Python code that imports the required modules for interacting with databases, creates database connections, defines classes for representing database tables, and implements CRUD operations on those tables.\"",
    "\"Generate Python code that imports the imapclient library and creates an instance of the ImapClient class, allowing for easy interaction with IMAP servers.\"",
    "\"Generate Python code that creates a grammar of graphics system for data visualization, allowing users to create a wide range of plots and charts by combining basic visual elements such as layers, scales, axes, and geoms, using the ggplot library.\"",
    "\"Generate Python code that imports the necessary modules for text processing, such as torch, torch.nn, and torch.utils.data, and defines a custom dataset class for loading and preprocessing text data.\"",
    "\"Generate Python code that imports the necessary libraries and creates a connection to a Druid server, allowing you to interact with Druid datasets and perform various data manipulation and analysis tasks.\"",
    "\"Generate Python code that implements a library for working with multiple addresses, inspired by jbenet's multiaddr, including functions for converting between address formats, generating Address objects from strings, and validating addresses.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the CampaignMonitorAPI class, which provides access to the Campaign Monitor API's full feature set, including creating and sending emails, managing subscribers, and tracking campaigns.\"",
    "\"Generate Python code that imports and sets up a media asset management system for use with various web frameworks, using packages such as Pillow for image processing and Django or Flask for web development.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Librato client object to interact with the Librato API, allowing users to query metrics, create and delete metrics, and create and delete alerts.\"",
    "\"Generate Python code that imports the required libraries and uses the Python IPFS HTTP CLIENT library to interact with the InterPlanetary File System (IPFS) via the HTTP API, allowing users to perform various operations such as adding files, getting file content, and listing directories.\"",
    "\"Generate Python code that implements a backend data caching and persistence daemon for Graphite, utilizing a suitable persistence mechanism such as Redis or memcached to store cache data and featuring a configurable expiration time for cached data.\"",
    "\"Generate Python code that uses the OpenTelemetry API to instrument Celery tasks, including creating traces for task execution and adding metadata such as task ID and status.\"",
    "\"Generate Python code that imports the necessary libraries, such as smbprotocol and smbclient, to establish a connection to a server using the SMB 2/3 protocol, send files and directories, receive files and directories, and perform various other operations supported by the SMB protocol.\"",
    "\"Generate Python code that imports the necessary modules, creates an inotify instance, and registers a callback function to handle events; also includes error handling and proper cleanup.\"",
    "\"Generate Python code that imports the botto3 library and adds type hints for its functions and classes, allowing for code completion in IDEs such as PyCharm.\"",
    "\"Generate Python code that creates a text progress bar for a command line interface, using a library such as `progressbar` or `tty_progress`.\"",
    "\"Generate Python code that imports and sets up the necessary packages and modules for a project, such as `numpy`, `scipy`, `matplotlib`, and `pandas`, and configures them for use in a Logilab project.\"",
    "\"Generate Python code that imports the `io` module and uses its functions to read and write files, interact with the user, and handle errors.\"",
    "\"Generate Python code that imports the etcd3 library and creates an Etcd3Client object to interact with an etcd3 cluster.\"",
    "\"Generate Python code that imports the ICU C++ API and provides a Python interface for its functionality, allowing developers to use the ICU library's features in their Python applications.\"",
    "\"Generate Python code that uses the Paramiko library to connect to a remote server via SSH and perform various file transfer operations, such as uploading and downloading files, using the SFTP protocol.\"",
    "\"Generate Python code that uses pyo3, rust-cpython, and cffi to build and publish crates with Rust binaries as Python packages.\"",
    "\"Generate Python code that uses the Sphinx documentation generator to create API documentation from docstrings in your Python code, allowing you to easily host and share your documentation online.\"",
    "\"Generate Python code that uses pytest.mark.parametrize to define a parametrized test fixture that runs a test function with multiple combinations of input parameters.\"",
    "\"Generate Python code that imports the required libraries, sets up a Discord bot instance, and defines a command handler function to play music from a YouTube link when a user types a specified command in a Discord channel.\"",
    "\"Generate Python code that imports the required libraries and defines a three-valued logic data type using enumerations.\"",
    "\"Generate Python code that imports the `random` module and uses its `randint` function to create a list of random names by sampling from a list of common first names and surnames.\"",
    "\"Generate Python code that implements the metaphone and double metaphone algorithms for calculating phonetic distances between strings, using the scipy library's distance metrics and optional precomputed Levenshtein matrices for increased performance.\"",
    "\"Generate Python code that implements an ordered, dynamically-expandable dot-access dictionary using a nested dictionary data structure, where each key-value pair is stored in a separate list within the dictionary, and keys are accessed using dot notation, similar to how it's done in JavaScript.\"",
    "\"Generate Python code that imports the required libraries and sets up a gRPC connection to the Google PubSub v1 service, allowing for sending and receiving messages via the pubsub.Publish() and pubsub.Subscribe() methods.\"",
    "\"Generate Python code that imports the necessary modules and defines a gRPC server using the `grpc` module, which logs messages to Google Cloud Logging Service using the `google-logging-v2` API.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `multiprocessing` module to parallelize computation with pandas, significantly speeding up data processing.\"",
    "\"Generate Python code that imports the necessary modules, creates a Future class with stubbed methods, and implements the __init__ method to initialize the future result, using the typing module to enforce type hints for the stubbed methods.\"",
    "\"Generate Python code that uses a dictionary-based approach to map first names to their corresponding genders, then use a function to take in a first name as input and return the associated gender.\"",
    "\"Generate Python code that imports the Cython module created from the C++ translation of Angus Johnson's Clipper library (ver. 6.4.2) and calls its functions to perform polygon clipping operations on input polygons, using the C++ wrapper's API.\"",
    "\"Generate Python code that uses the `csv` module and `django-rest-framework` to create, read, update, and delete CSV files in a Django REST framework.\"",
    "\"Generate Python code that implements an old Django Celery integration project, using the original Django 1.11 and Celery 4.3 versions, including settings, configuration, and basic task implementation.\"",
    "\"Generate Python code that uses the `dis` and `bytecode` modules to generate and modify bytecode, allowing for the creation of custom instructions and manipulation of existing bytecode files.\"",
    "\"Generate Python code that imports the Paramiko library and creates a typing stub for its functions and classes, using the `typing` module.\"",
    "\"Generate Python code that uses the `os` module to locate the closest `.editorconfig` file from the current working directory and interprets its contents using the `editorconfig` module, returning a dictionary of editor configuration settings.\"",
    "\"Generate Python code that creates an AWS API Gateway RESTful API using the CDK Construct Library, including a Resource, Method, and Integration with a Lambda function.\"",
    "\"Generate Python code that provides tools for working with Jupyter notebooks within the Sphinx documentation builder, allowing users to easily create and embed interactive notebooks in their documentation.\"",
    "\"Generate Python code that uses the requests library to send HTTP requests to the Google Translate API, passing in the necessary parameters such as the source and target languages, the text to be translated, and any other required settings.\"",
    "\"Generate Python code that imports the necessary modules and creates a function that takes a nested dictionary as an argument, and returns a new dictionary with the values of the nested dictionary's leaves as keys and their corresponding values as values, using delimited keys to represent the nesting structure.\"",
    "\"Generate Python code that imports the mandrill module and creates an instance of the MandrillClient class, which can be used to interact with the Mandrill email service platform.\"",
    "\"Generate Python code that imports a dictionary and uses the dictionary's values as attributes, using recursion to access nested dictionary values as attributes of a parent object.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Cloudant/CouchDB client object to interact with a Cloudant/CouchDB database, allowing for create, read, update, and delete operations on documents within the database.\"",
    "\"Generate Python code that creates a class called \\\"ORM\\\" that wraps a SQLite database connection and provides a simple interface for executing SQL queries and storing data in a Pythonic way, similar to how the ORM package works.\"",
    "\"Generate Python code that mocks out requests made by ClientSession from the aiohttp package:\\n```\\nimport aiohttp\\nfrom aiohttp import ClientSession\\nfrom unittest.mock import MagicMock, patch\\n\\ndef mock_requests(session):\\n   # Replace the actual request function with a mock function\\n   session.request = MagicMock(return_value=MockedResponse())\\n   return session\\n\\n# Use the mocked session to make requests\\nwith patch('aiohttp.ClientSession', new=MagicMock):\\n   session = aiohttp.ClientSession()\\n   response = await session.get('https://example.com')\\n   print(response.status)\\n```\\nThis code defines a function `mock_requests` that takes a `ClientSession` object as an argument and replaces its `request` method with a mock function that returns a pre-defined response object (`MockedResponse`). The `patch` decorator is used to replace the original `ClientSession` class with a mock implementation that uses the `mock_requests` function to create a mocked session object. Finally, the `with` statement is used to create a context manager that sets up the\"",
    "\"Generate Python code that imports the necessary libraries for Bayesian changepoint detection, such as scipy, numpy, and pyMC3, and performs Bayesian changepoint detection on a given dataset using a suitable algorithm, such as the Bayesian Change Point Detector class in pyMC3.\"",
    "\"Generate Python code that imports the necessary modules and sets up an Aliyun KMS client to encrypt and decrypt data using the specified key and region.\"",
    "\"Generate Python code that implements an ordered set using Cython, which allows for efficient insertion, deletion, and iteration of elements while maintaining a total order.\"",
    "\"Generate Python code that imports and uses the necessary libraries to perform elegant astronomy calculations, such as calculating the positions of celestial bodies, determining the time of celestial events, and converting between different coordinate systems.\"",
    "\"Generate Python code that imports the necessary libraries for interacting with the Bing Ads APIs and bulk services, such as `requests`, `json`, and `pandas`, and creates a class or function that simplifies the process of making API calls and processing data responses.\"",
    "\"Generate Python code that creates a design of experiments using the `scipy.stats` module to perform statistical analysis and create visualizations of the results.\"",
    "\"Generate Python code that creates a class `MutableTuple` that takes in a variable number of arguments and returns an instance of a mutable tuple, where each item can be modified independently like a regular tuple but also can be mutated in place like a list.\"",
    "\"Generate Python code that imports a library for calculating CRC16 checksums and uses it to compute the checksum of a given string, returning the checksum as an integer.\"",
    "\"Generate Python code that imports the required libraries and creates a Bootstrap-themed layout for a Plotly Dash application, using the `dash` and `bootstrap` packages.\"",
    "\"Generate Python code that implements a DB-API 2.0 interface for SQLite 3.x:\\n```\\nimport sqlite3\\n\\nclass SQLiteDB():\\n   def __init__(self, filename):\\n       self.conn = sqlite3.connect(filename)\\n       self.cursor = self.conn.cursor()\\n   \\n   def execute(self, query, params=None):\\n       self.cursor.execute(query, params)\\n       return self.cursor\\n   \\n   def fetchall(self):\\n       return list(self.cursor.fetchall())\\n   \\n   def fetchone(self):\\n       return self.cursor.fetchone()[0]\\n   \\n   def close(self):\\n       self.cursor.close()\\n       self.conn.close()\\n```\"",
    "\"Generate Python code that uses the Elasticsearch API to manage and monitor Elasticsearch indices and snapshots, including creating and deleting indices, snapshotting and restoring indices, and monitoring index health and performance.\"",
    "\"Generate Python code that imports the necessary libraries and defines a CDK custom resource class with specified properties and methods.\"",
    "\"Generate Python code that reads a file and returns its contents as a string:\\n```\\nwith open('file.txt', 'r') as f:\\n   contents = f.read()\\nreturn contents\\n```\"",
    "\"Generate Python code that imports the necessary libraries and uses the tardis.dev API to retrieve historical tick-level cryptocurrency market data and replay it in real-time.\"",
    "\"Generate Python code that creates a portable archive file manager using the `tarfile` module to create and extract archives, and the `os` module to read and write files.\"",
    "\"Generate Python code that uses the `decorator` module to add a `@public` decorator to all functions in a module, similar to how the `__all__` keyword works in Python.\"",
    "\"Generate Python code that imports the Selenium library and creates a WebDriver instance to interact with a web browser.\"",
    "\"Generate Python code that creates a test environment for an application by setting up virtual machines, configuring networks, and deploying the application using Ansible.\"",
    "\"Generate Python code that creates an EFS file system, sets its size to 100GB, and sets its performance mode to \\\"generalPurpose\\\".\"",
    "\"Generate Python code that parses M3U8 playlists and extracts metadata such as video titles, lengths, and URLs using the `m3u8` library.\"",
    "\"Generate Python code that imports the Django framework and Prometheus library, creates a custom middleware class that instruments metrics using Prometheus, and applies the middleware to the Django application.\"",
    "\"Generate Python code that defines a schema for common machine learning applications and provides a set of decorators for web-based ML prediction applications.\"",
    "\"Generate Python code that implements a build system using Pants, allowing you to manage and compile source code in multiple languages, including Python, Java, Scala, Go, and Shell, and providing features such as dependency resolution, compilation, and testing, all within a unified and easy-to-use framework.\"",
    "\"Generate Python code that creates a Flask application which takes a profiler file as an input and displays the profiling data in a user-friendly format using plots and charts.\"",
    "\"Generate Python code that imports the CouchDB module and creates a client object to interact with a CouchDB server, allowing users to create, read, update, and delete documents in a CouchDB database.\"",
    "\"Generate Python code that uses the `google-auth` and `google-api-python-client` libraries to authenticate with Google Drive and download large files directly from the server, bypassing the browser-based download process, using the `drive_service.files().get()` method to retrieve the file metadata and the ` MediaFileSyncrequest` class to request the file content.\"",
    "\"Generate Python code that imports a library, modifies its functions, and sets new attributes for the modified functions using a decorator.\"",
    "\"Generate Python code that returns the first true value of an iterable using the next() function and a generator expression: `next(gen for gen in iterable if gen)`.\"",
    "\"Generate Python code that builds production-ready data and analytics pipelines using Kedro, including data ingestion, transformation, and visualization components, by creating modular and reusable pipeline elements and connecting them in a logical workflow.\"",
    "\"Generate Python code that decorates a function with a non-blocking version of the function, allowing the original function to continue running in the background without blocking the execution of other code.\"",
    "\"Generate Python code that imports the necessary libraries for creating a telemetry system, such as `numpy` for numerical computations and `influxdb` for storing data in an InfluxDB database.\"",
    "\"Generate Python code that imports the Zabbix API library and creates a Zabbix instance to interact with a Zabbix server, allowing you to perform various operations such as creating and deleting hosts, adding and removing templates, and querying for host status and performance data.\"",
    "\"Generate Python code that instruments Jinja2 templates with OpenTelemetry tracing using the `opentelemetry-python` library and patches the `jinja2` module to add tracing capabilities.\"",
    "\"Generate Python code that creates a note management system with the ability to create, read, update, and delete notes, using a MongoDB database to store notes, and featuring a user-friendly interface for adding, editing, and deleting notes.\"",
    "\"Generate Python code that imports the `cProfile` module and uses it to profile the execution of a given function or program, displaying the results in a human-readable format, such as a flat profile or a call tree, to help identify performance bottlenecks and optimize the code.\"",
    "\"Generate Python code that creates, modifies, and deploys infrastructure on various cloud providers such as AWS, Azure, Google Cloud, and Kubernetes using Pulumi's Python SDK.\"",
    "\"Generate Python code that creates an enterprise-scalable, real-time graphing system using a powerful database like Apache Cassandra or MongoDB to store data and a robust framework like Django or Flask to build the API and dashboard.\"",
    "\"Generate Python code that implements a Zigbee stack using the Zigbee 3.0 (ZCL) specification, including support for various device types, clusters, and attributes, with a focus on efficient data representation and ease of use.\"",
    "\"Generate Python code that uses TensorFlow and Apache Spark to build deep learning models on a Spark cluster, allowing for efficient distributed training and scalability.\"",
    "\"Generate Python code that imports the necessary modules, defines policies, and enforces them using the Oslo Policy library.\"",
    "\"Generate Python code that allows users to interactively explore databases using natural language queries, similar to SQL for Humans.\"",
    "\"Generate Python code that implements a simple templating system, allowing users to define templates with placeholders for dynamic values, and a mechanism to render the templates with the actual values.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to a Swagger-enabled API, parsing the API's documentation and generating client code for interacting with the API.\"",
    "\"Generate Python code that uses the Microsoft Graph and Office 365 APIs to simplify tasks such as user authentication, calendar management, email manipulation, and file access within the Office 365 suite.\"",
    "\"Generate Python code that defines a pytest plugin which utilizes a cache to store test results, allowing for faster test execution and reduced computational overhead across multiple test runs.\"",
    "\"Generate Python code that uses the matplotlib library to create an interactive visualization of the data, allowing the user to explore and understand the relationships between variables without manually creating a plot.\"",
    "\"Generate Python code that takes a minified or obfuscated JavaScript file as input, uses a JavaScript parser to parse the code, performs syntax analysis and correction, and outputs a beautified version of the code with indentation and line breaks for readability.\"",
    "\"Generate Python code that imports the `freeze_time` module and uses its `freeze_time` function to wrap test functions with fixtures, allowing you to write unit tests for your application without worrying about time-related issues.\"",
    "\"Generate Python code that imports the required libraries and uses the country converter package to convert country names between different classification schemes.\"",
    "\"Generate Python code that imports the ntplib module and uses it to synchronize the system clock with an NTP server.\"",
    "\"Generate Python code that uses the `nltk` library to tokenize the input string, then converts the resulting tokens into a dictionary representation suitable for use in web form posts.\"",
    "\"Generate Python code that installs Curator using `pip` and runs it using Python:\\n```\\nimport subprocess\\nsubprocess.run(['pip', 'install', 'curator'])\\nsubprocess.run(['python', '-m', 'curator'])\\n```\"",
    "\"Generate Python code that imports the necessary libraries and configures an Algolia search client with a custom index, query parameters, and pagination.\"",
    "\"Generate Python code that imports the necessary modules, reads the CMU Pronouncing Dictionary data files, and provides an interface for searching and retrieving pronunciation information for words in the dictionary.\"",
    "\"Generate Python code that imports and uses the Biopython library to read, manipulate, and write genomic data.\"",
    "\"Generate Python code that imports the required libraries and sets up an asynchronous Fortnite API wrapper using the `asyncio` library and `fortnite-api` package, allowing for easy access to Fortnite data without blocking main thread.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Django model with fields for visitor data, including browser, operating system, and device information (such as mobile phone, tablet, or touch capabilities) to easily identify visitors using a forms.\"",
    "\"Generate Python code that uses Apache Sedona to process large-scale spatial data by creating a cluster of computers and distributing the data processing tasks across them, leveraging the power of distributed computing to efficiently handle large datasets.\"",
    "\"Generate Python code that imports the Singleton metaclass from the python-singleton package and uses it to create a simple Singleton class with a custom __init__ method that takes an argument and raises a TypeError if the instance already exists. The decorator should also have a teardown method that removes the instance when it goes out of scope.\\n\\nHere is some sample code to get you started:\\n```\\nfrom singleton import Singleton\\n\\nclass MySingleton(metaclass=Singleton):\\n   def __init__(self, arg):\\n       if self._instance is not None:\\n           raise TypeError(\\\"Instance already exists\\\")\\n       self._instance = super().__init__(arg)\\n   \\n   def teardown(self):\\n       self._instance = None\\n```\\nThis code defines a `MySingleton` class that uses the `Singleton` metaclass from the `python-singleton` package to implement the Singleton pattern. The `__init__` method checks whether an instance already exists before creating a new one, and raises a `TypeError` if so. The `teardown` method sets the `_instance` attribute to `None` when it goes\"",
    "\"Generate Python code that creates a Django model field that allows multiple selection from a list of options, using a bitfield to store the selected values.\"",
    "\"Generate Python code that parses and creates iCalendar and vCard files using the `icalendar` and `vcard` modules.\"",
    "\"Generate Python code that imports the necessary libraries, such as NumPy and SciPy, and uses techniques like the Kolmogorov-Smirnov test or the Page-Hinkley test to detect changes in statistical distributions within signal data.\"",
    "\"Generate Python code that implements a Content Security Policy (CSP) for a web application using the Django framework, setting allowed sources of content and scripts, enforcing strict script loading and execution, and logging violations for security auditing purposes.\"",
    "\"Generate Python code that parses JavaScript code using the Esprima.js library, providing a fast and efficient way to analyze and manipulate JavaScript code.\"",
    "\"Generate Python code that imports the unittest module and creates test cases for testing packages.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3.SQS service using mypy-boto3-builder, like so:\\n```python\\nfrom typing import Callable\\nfrom mypy_boto3_builder import botofills\\nimport boto3\\n\\nqueue = botofills.Queue(service=boto3.client('sqs'))\\n```\"",
    "\"Generate Python code that imports the CMU pronouncing dictionary and allows users to look up words and retrieve their phonetic transcriptions, similar to the cmudict package.\"",
    "\"Generate Python code that uses the `pytest` framework to write unit tests for URL-based applications by creating test fixtures that interact with URLs using the `requests` library and assert expected responses.\"",
    "\"Generate Python code that creates a Flask-based web application with a clean and modular architecture, using the Appier Framework, by running the command `app = Appier(name='my_app', template_folder='templates')` in your terminal.\"",
    "\"Generate Python code that imports the oslo.service library and creates an instance of the Service class, passing in the necessary parameters for a simple service.\"",
    "\"Generate Python code that creates a Flask plugin system, allowing developers to create and register plugins using a consistent API, and providing a way to load and use the plugins in a Flask application.\"",
    "\"Generate Python code that imports the json module and creates a JSON decoder class that takes a string or bytes input and outputs a dictionary or list of dictionaries, similar to the ndjson package.\"",
    "\"Generate Python code that imports the necessary modules, sets up the command line usage, and implements the logic for colouring the output of a program using ANSI escape codes.\"",
    "\"Generate Python code that imports a module providing human-readable file size functions and offers convenience functions for quickly converting and displaying file sizes in various units, such as megabytes, gigabytes, terabytes, etc., from a base unit of bytes.\"",
    "\"Generate Python code that uses the json module to read a JSON file and the html table library to create an HTML table representation of the data, then writes the result to a new HTML file.\"",
    "\"Generate Python code that imports the necessary libraries and creates a SQLAlchemy dialect for interacting with BigQuery, using the ObsoleteSQLAlchemyDialect class from the SQLAlchemy library, and defining the necessary configuration parameters and query methods to interact with BigQuery tables.\"",
    "\"Generate Python code that implements an OpenTracing provider using the LightStep tracer, allowing for the creation of traces, span, and annotations, and providing support for Jaeger and other OpenTracing formats.\"",
    "\"Generate Python code that creates an asynchronous web scrapper using AsyncIO and BeautifulSoup to scrape data from websites and save it to a MongoDB database.\"",
    "\"Generate Python code that implements a morphological analyzer for the Japanese language, able to perform tasks such as breaking down words into their individual morphemes, identifying the part of speech and grammatical features of each morpheme, and generating possible readings and meanings for each word.\"",
    "\"Generate Python code that constructs an AWS SNS subscription using AWS CDK, defining a topic and a subscription name, and specifying a protocol and endpoint for message delivery.\"",
    "\"Generate Python code that parses strings and extracts information from structured/unstructured data using techniques such as regular expressions, string manipulation, and context-specific parsing.\"",
    "\"Generate Python code that uses the `ast` module to parse the source code of a Python project and extract the required modules, classes, and functions; then create a list of these requirements and print them to the console.\"",
    "\"Generate Python code that imports the required modules and annotates the types for the boto3.Lambda 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\\n```python\\nfrom typing import TypeVar, Type Alias\\nfrom mypy_boto3_builder import Botofailure, botofailure, MyPyBoto3Builder\\nimport boto3\\n\\n# type hints for boto3.Lambda 1.34.0 services\\nInferenceFlags = TypeVar('InferenceFlags', bound='boto3.lambda_.models.InferenceFlags')\\nFunctionName = TypeVar('FunctionName', bound='str')\\nFunctionResponse = TypeVar('FunctionResponse', bound='boto3.lambda_.models.FunctionResponse')\\n\\nclass Lambda(boto3.client):\\n   def __init__(self, *,  **kwargs) -> None:\\n       super().__init__(**kwargs)\\n       self.inference_flags: InferenceFlags = kwargs['inference_flags']\\n       self.function_name: FunctionName = kwargs['function_name']\\n\"",
    "\"Generate Python code that sends an HTTP request to a specified URL and returns the response as a dictionary, including the headers and body of the response.\"",
    "\"Generate Python code that defines a CDK construct for creating AWS SAM resources, including functions, APIs, and databases, using the CDK Construct Library.\"",
    "\"Generate Python code that creates a middleware framework for building APIs, using Flask or Django as the web framework, and supports authentication, rate limiting, and caching, with configurable dependencies and support for custom plugins.\"",
    "\"Generate Python code that implements a cache-based rate-limiter for Django using the built-in decorator module, like so:\\n```\\nfrom functools import wraps\\nimport django.core.cache\\n\\ndef rate_limit(func):\\n   def wrapper(*args, **kwargs):\\n       key = f\\\"rate_limit_{func.__name__}\\\"\\n       if django.core.cache.get(key) > 1:\\n           raise exceptions.RateLimitExceeded(\\\"You have exceeded your rate limit\\\")\\n       else:\\n           django.core.cache.set(key, 1, 60) # set cache expiration time to 1 minute\\n           return func(*args, **kwargs)\\n   return wrapper\\n```\\nThis code defines a `rate_limit` decorator function that takes another function as an argument. The decorator checks whether the number of requests made to the function has exceeded a certain threshold (defined by the `key` variable), and raises a `RateLimitExceeded` exception if it has. Otherwise, it sets the cache value to 1 and calls the original function.\"",
    "\"Generate Python code that imports the necessary modules, creates an AutoScaling group and configures it with a scaling policy based on CPU utilization, and then creates a Stack using the AutoScaling group in a CDK application.\"",
    "\"Generate Python code that imports the requests library and sends a GET request to the specified URL, returning the response object.\"",
    "\"Generate Python code that imports the datetime module and creates a function that takes a date string as input, parses it using the datetime.strptime() method, and returns the parsed date object, which can then be used for various date and time operations.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes a Spotify track ID as input, fetches the audio features from the Spotify Web API, preprocesses the data using TensorFlow, and trains a machine learning model on the data to predict the genre of music.\"",
    "\"Generate Python code that uses the `requests` and `BeautifulSoup` libraries to send HTTP requests and parse HTML responses, simulating user interactions on a web application and verifying expected page elements are present.\"",
    "\"Generate Python code that imports the necessary modules for interacting with the Google Logging API, creates a client object for the API, and logs a message to a specified log bucket.\"",
    "\"Generate Python code that imports the necessary libraries and creates a JupyterLab extension that integrates HoloViz content rendering capabilities, allowing users to visualize and interact with 3D models and other holographic content in an interactive and immersive environment.\"",
    "\"Generate Python code that imports the fasttext library and provides bindings for its main functionalities, such as training and testing text classifiers, parsing input data, and converting models to binary format.\"",
    "\"Generate Python code that provides fresh autocompletes for Django by using the DJANGO_USE_TZ environment variable to set the time zone, and then importing the django.urls module to create a URL pattern for the autocomplete view; creating a view function that uses the Django filtering API to filter objects based on the search query, and returns a JSON response containing the matching objects; and, in the template, using the autocomplete widget from the Material Design library to display the suggestions.\"",
    "\"Generate Python code that creates a repository for storing test results, including a class for representing test cases and their associated metadata, such as test names, descriptions, and result statuses, and a method for adding test results to the repository.\"",
    "\"Generate Python code that imports the `typing` module and uses its functions to enable type hints and type checking for variables, function parameters, and return types, providing better code readability and maintainability.\"",
    "\"Generate Python code that imports Databricks notebooks as libraries/modules using the `databricks` library, allowing you to interact with Databricks notebooks programmatically and use their contents as if they were regular Python modules.\"",
    "\"Generate Python code that implements a distributed lock using Redis as the backend store, allowing for efficient and secure synchronization of access to shared resources among concurrent processes or threads.\"",
    "\"Generate Python code that lints SQL queries against a set of predefined rules, providing suggestions for improvement and scoring the query based on best practices and readability.\"",
    "\"Generate Python code that imports the necessary libraries and creates an Elastic Load Balancer using the CDK Construct Library for AWS, specifying the load balancer's name, security group, subnet, and type.\"",
    "\"Generate Python code that implements Boruta feature selection using Scikit-learn's Recursive Feature Elimination (RFE) algorithm to recursively remove unimportant features until a subset of features with high predictive power is obtained.\"",
    "\"Generate Python code that creates an open-source, next-generation build tool using the `setuptools` library to define the project structure and dependencies, and the `pydantic` library to validate configuration data.\"",
    "\"Generate Python code that uses the `ansi2html` library to convert text with ANSI color codes to HTML, or uses the `pylatex` library to convert text with ANSI color codes to LaTeX.\"",
    "\"Generate Python code that imports the necessary modules and creates a `FuzzySet` class that inherits from `set` and implements fuzzy search using N-grams.\"",
    "\"Generate Python code that adds a custom date range filter to the Django admin UI using the `django-admin-rangefilter` app:\\n```python\\nfrom django_admin_rangefilter import RangeFilterWidget\\nfrom django.contrib import admin\\nfrom .models import MyModel\\n\\nclass MyModelAdmin(admin.ModelAdmin):\\n   list_filter = ['custom_date_range']\\n\\n   def formfield_for_manytomany(self, request, one_to_many=True):\\n       return RangeFilterWidget(MyModel, 'created_at', date_format='YYYY-MM-DD')\\n```\"",
    "\"Generate Python code that imports the necessary libraries and creates an AWS CodeGuru Profiler resource using the CDK Construct Library for AWS.\"",
    "\"Generate Python code that imports a calculation library for CRCs and checksums, such as `crclib` or `checksum`, and uses it to perform calculations on given data.\"",
    "\"Generate Python code that uses the `pytest` framework and the `pylint` tool to check the source code for compliance with coding standards and best practices.\"",
    "\"Generate Python code that implements a lightweight, pure Python version of Apache Thrift, allowing for the definition and usage of remote services and data types, similar to the functionality provided by the Apache Thrift framework.\"",
    "\"Generate Python code that uses the Dagster library to define, schedule, and execute data pipelines, creating a workflow that manages the entire lifecycle of data assets.\"",
    "\"Generate Python code that implements a websocket server using the gevent library, allowing for asynchronous handling of websocket connections and messages.\"",
    "\"Generate Python code that implements k-modes and k-prototypes clustering algorithms for categorical data using scikit-learn library and pandas module to load and manipulate data.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to the Pusher Channels API to send and receive messages on a channel.\"",
    "Generate Python code that imports the necessary libraries for interacting with the X Window System, such as `xlib` or `pyxlib`.",
    "Generate Python code that creates a window with a specified title and dimensions using the `xlib.XCreateSimpleWindow` function.",
    "Generate Python code that sets the background color of a window to a specified RGB value using the `xlib.XSetBackground` function.",
    "Generate Python code that creates a button in a window with a specified label and callback function using the `xlib.XCreateButton` function.",
    "Generate Python code that processes events in a window, such as button presses or keyboard input, using the `xlib.XNextEvent` function.",
    "Generate Python code that closes a window and frees associated resources using the `xlib.XDestroyWindow` function.",
    "Generate Python code that creates a font object from a file using the `xlib.XLoadFont` function.",
    "Generate Python code that sets.",
    "\"Generate Python code that imports the pandas library, sets up a dataframe with readable column names and formats, and then saves it as a CSV file.\"",
    "\"Generate Python code that imports the necessary libraries and provides a function to retrieve data from Quandl API, a popular financial data platform, using API keys or OAuth authentication.\"",
    "\"Generate Python code that uses the `unittest` module to create a test suite with subtests and fixtures, like so:\\n```\\nimport unittest\\n\\nclass MyTestSuite(unittest.TestCase):\\n   def setUp(self):\\n       # Set up any shared state for all tests in this suite\\n       pass\\n\\n   def tearDown(self):\\n       # Tear down any shared state after all tests have run\\n       pass\\n\\n   def test_subtest1(self):\\n       # Test 1\\n       self.assertTrue(True)\\n\\n   def test_subtest2(self):\\n       # Test 2\\n       self.assertFalse(False)\\n\\n   @classmethod\\n   def setUpClass(cls):\\n       # Set up class-level shared state for all tests in this suite\\n       pass\\n\\n   @classmethod\\n   def tearDownClass(cls):\\n       # Tear down class-level shared state after all tests have run\\n       pass\\n\\nif __name__ == '__main__':\\n   unittest.main()\\n```\\nThis code defines a test suite called `MyTest\"",
    "\"Generate Python code that imports pytest plugin to disable socket calls during tests, and modifies the `conftest.py` file to include a fixture that sets up a mock socket connection for each test function, allowing tests to run independently of the network environment.\"",
    "\"Generate Python code that implements a domain-independent keyword extraction algorithm using a combination of frequency analysis and co-occurrence statistics to identify important phrases in a given piece of text.\"",
    "\"Generate Python code that uses the `xml.etree.ElementTree` module to parse JavaScript code and create an XML document representing the code's syntax tree.\"",
    "\"Generate Python code that imports the ldap module and connects to an LDAP server using the LDAP_SERVER environment variable.\"",
    "\"Generate Python code that implements a flexible Kconfig system using a dictionary-based approach, allowing for easy configuration of applications and libraries with customizable options and defaults.\"",
    "\"Generate Python code that creates a CloudFront distribution using the CDK Construct Library for AWS, specifying the origin bucket, viewer protocol policy, and enabled SSL protocols.\"",
    "\"Generate Python code that imports the necessary libraries and creates an object to interact with an FTDI device, allowing for the configuration of the device's GPIO pins and the transmission of data over a serial connection.\"",
    "\"Generate Python code that implements an identity management system for Flask, including user authentication, login, logout, and registration functionality using Flask-Login and Flask-SQLAlchemy.\"",
    "\"Generate Python code that imports the necessary modules and creates a SQLAlchemy connection to an IBM Data Server using the ibm_db_sa module.\"",
    "\"Generate Python code that creates a simple GraphQL server using Ariadne, including a query resolver that returns a list of objects and a mutation resolver that creates a new object in a database.\"",
    "\"Generate Python code that imports the `escapism` package and uses its functions to escape any given string in various contexts, such as SQL injection attacks or markup languages like HTML.\"",
    "\"Generate Python code that defines a decorator `lazy_attribute` that takes a function and returns a new attribute object which will call the function only when its value is first accessed, similar to the `LazyAttribute` class in the `django.utils.functional` module.\"",
    "\"Generate Python code that imports the necessary libraries and creates classes for currency and money, with methods for converting between currencies and calculating total amounts.\"",
    "\"Generate Python code that imports the typepy library and uses it to check, validate, and convert variable types at runtime.\"",
    "\"Generate Python code that sends test results to TeamCity continuous integration server from unittest, nose, py.test, twisted trial, behave using theTeamCity API client library for Python.\"",
    "\"Generate Python code that imports the Jsonnet library and uses it to render a JSON template with placeholders replaced by actual values, similar to how Jinja2 works with HTML templates.\"",
    "\"Generate Python code that uses the requests library to send an HTTP request to speedtest.net and retrieve the JSON response, then prints out the download and upload speeds in Mbps.\"",
    "\"Generate Python code that reads a line-oriented, tab-separated value file using the `csv` module and outputs a dictionary for each row where keys are the column names and values are the corresponding values in the row.\"",
    "\"Generate Python code that imports the necessary libraries, sets up an AWS SigV4 signature, and makes an HTTP request to an AWS API endpoint using the signed request.\"",
    "\"Generate Python code that sets up a temporary PostgreSQL instance in a temporary directory, creates a database and table, inserts data into the table, runs tests on the database, and then destroy the instance after testing is completed.\\n\\nHere's an example of how this could be accomplished using the `psycopg2` library and the `temporary` module:\\n```\\nimport os\\nimport psycopg2\\nfrom temporary import tempdir\\n\\n# create a temporary directory for the PostgreSQL data directory\\ntmp_dir = tempdir()\\n\\n# create a new PostgreSQL instance in the temporary directory\\nconn = psycopg2.connect(host=localhost, dbname='mydatabase', user='myuser', password='mypassword')\\ncur = conn.cursor()\\n\\n# create a new table in the database\\ncur.execute('CREATE TABLE mytable (id SERIAL PRIMARY KEY, name VARCHAR(50))')\\n\\n# insert some data into the table\\ncur.execute('INSERT INTO mytable (name) VALUES (%s)', ('Alice',))\\ncur.execute('INSERT INTO mytable (name) VALUES (%s)', ('\"",
    "\"Generate Python code that defines a Stone IDL file with a simple interface for a calculator API, including methods for adding, subtracting, multiplying, and dividing numbers.\"",
    "\"Generate Python code that imports the necessary libraries and sets up aMailChimpAPIv3Client object to interact with the Mailchimp API.\"",
    "\"Generate Python code that implements a backport of the pickle 5 protocol (PEP 574) and other pickle changes, allowing for compatibility with older versions of Python while maintaining the updated features and performance enhancements of the latest pickle implementation.\"",
    "\"Generate Python code that implements a Flake8 plugin to forbid backslashes for line breaks:\\n```\\nimport flake8\\n\\ndef forbid_backslashes(tree):\\n   for node in tree.iterancestors():\\n       if isinstance(node, ast.Str) and node.s.startswith('\\\\\\\\'):\\n           yield flake8.Flake8Error(node.lineno, node.col_offset, \\\"Backslash used for line break\\\")\\nflake8.add_rule(forbid_backslashes)\\n```\"",
    "\"Generate Python code that imports TensorFlow and its add-on packages, including TensorFlow Probability, TensorFlow Quantization, and TensorFlow Lattice, to provide additional functionality for machine learning model development and deployment.\"",
    "\"Generate Python code that imports the required libraries and creates a simple wrapper library to interact with the Apache Arrow-based Feather File Format, similar to the following package description:\\n\\n\\\"Feather is a lightweight binary columnar storage format designed for use with the Apache Arrow ecosystem. The Feather file format specifies a set of rules and conventions for storing data in a compact, efficient manner. This library provides a simple Python interface for reading and writing Feather files.\\\"\"",
    "\"Generate Python code that imports the required libraries and uses the requests library to programmatically interact with the Packages Index servers to perform the same functionality as the unofficial, importable pip API.\"",
    "\"Generate Python code that creates a cross-platform curses-based monitoring tool using the `curses` library, allowing users to monitor system resources and processes on both Linux and Windows platforms.\"",
    "\"Generate Python code that imports, exports, processes, analyzes, and views triangular meshes using the `numpy`, `scipy`, `matplotlib` libraries, and `meshpy` library.\"",
    "\"Generate Python code that imports the required libraries, such as `asyncio` and `aiohttp`, and creates an asynchronous client class that handles authentication, pagination, and making requests to the GitHub API using the `aiohttp` library, with methods for fetching user information, repositories, issues, pull requests, and other GitHub resources, and includes appropriate error handling and logging.\"",
    "\"Generate Python code that creates an AWS ECS cluster using the CDK Construct Library, including a default VPC, subnets, security groups, and an Amazon Elastic Container Registry repository.\"",
    "\"Generate Python code that defines a meta-class for generating interfaces with enforced method signatures and consistent documentation, using the `abc` module and docstrings to define the interface and its methods.\"",
    "\"Generate Python code that imports the DB2 database driver for LUW, zOS, and i5 platforms and creates a connection to a DB2 database using the IDS authentication method.\"",
    "\"Generate Python code that uses the `publicsuffix` library to get a public suffix for a domain name by calling the `get_public_suffix()` function and passing in the domain name as an argument, then returns the resulting public suffix string.\"",
    "\"Generate Python code that translates Unicode characters to their ASCII equivalents using the `unicodedata` module and the `translate()` function from the `str` class.\"",
    "\"Generate Python code that implements a simple workflow management system, allowing users to define, run, and monitor workflows consisting of multiple steps, each step being a function that takes input from the previous step and produces output for the next step, using a intuitive syntax for defining workflows and supporting features like conditional statements, loops, and functions as building blocks for creating complex workflows.\"",
    "\"Generate Python code that uses the json module in Python to read and write camelCase JSON data, and utilizes the Django REST framework to create APIs that can handle camelCase JSON data.\"",
    "\"Generate Python code that imports the required libraries and sets up a basic HTML page with Bootstrap CSS and JavaScript files included.\"",
    "\"Generate Python code that creates a simple asynchronous process supervisor using the `asyncio` module, allowing you to manage multiple processes in parallel and gracefully handle failures.\"",
    "\"Generate Python code that imports the serial module and creates an asynchronous serial port connection for reading and writing data to a specified serial device using the async-compatible version of the serial module.\"",
    "\"Generate Python code that imports the necessary modules for dependency injection using Injector, sets up bindings for classes and providers, and injects dependencies into objects using the @inject decorator.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple interface to interact with the Skyfield API, allowing users to retrieve information about celestial bodies and their positions in the sky.\"",
    "\"Generate Python code that uses the `airflow` and `prometheus` libraries to export DAG and task-based metrics from Airflow to Prometheus.\"",
    "\"Generate Python code that uses the onnx library to convert trained machine learning models from various frameworks, such as TensorFlow, PyTorch, and Caffe, into the Open Neural Network Exchange (ONNX) format for deployment on multiple platforms.\"",
    "\"Generate Python code that implements the Munkres (Hungarian) algorithm for solving the Assignment Problem, which takes in input matrices of costs and preferences, and outputs a matrix of assigned labels for each element in the input matrices.\"",
    "\"Generate Python code that imports the required libraries and establishes a connection to the Microsoft Exchange Web Service (EWS) to retrieve and manipulate email messages, calendar items, contacts, and other data.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function to encode and decode DNS wire-format packets, using the struct module to manipulate binary data and the socket module to handle network communications.\"",
    "\"Generate Python code that implements Wilkinson formulas for approximating definite integrals, using the `scipy.integrate` module and its `quad` function, which provides an efficient way to compute the integral by exploiting the symmetry of the integrand.\"",
    "\"Generate Python code that imports the datetime module, defines a function that takes a string parameter representing a date in RFC3339 format, and returns True if the date is valid according to RFC3339 standards and False otherwise.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to interact with the Keycloak API, similar to how the python-keycloak package provides access to the Keycloak API.\"",
    "\"Generate Python code that implements an event checkpointer using Microsoft Azure Event Hubs and the Blob Storage Client Library for Python, allowing you to save event data to blob storage for later processing.\"",
    "\"Generate Python code that creates a JupyterLab extension adding launcher items for configured server processes using the PyPI package jupyter-server-proxy.\"",
    "\"Generate Python code that uses the pyautogui library to simulate keyboard events on Windows and Linux, and the pynput library to hook keyboard events and simulate them on both platforms.\"",
    "\"Generate Python code that creates an Azure Machine Learning inferencing server using the `azureml` library, allowing for the deployment of trained models to the cloud for scalable inference and predictions.\"",
    "\"Generate Python code that imports the `unittest` module and creates a simple assertion library with a fluent API for unit testing in Python, using a descriptive syntax for assertions and providing methods for comparing values and raising errors when expectations are not met.\"",
    "\"Generate Python code that uses astroid to parse Python source files, and checks for \\\"blind\\\" except statements (i.e., except clauses without an associated exception type) and reports any violations found using pycodestyle's reporting mechanism.\"",
    "\"Generate Python code that imports the necessary modules for PPMd compression/decompression and uses them to compress and decompress files.\"",
    "\"Generate Python code that imports the necessary libraries and creates a NETCONF client object to connect to a network device and manage its configuration using the NETCONF protocol.\"",
    "\"Generate Python code that uses the `subprocess` module to run a JavaScript file using the `node` command, like so:\\n```\\nimport subprocess\\nsubprocess.run([\\\"node\\\", \\\"javascript_file.js\\\"])\\n```\\nThis will run the JavaScript file specified in the `javascript_file.js` variable, using the `node` command. The `subprocess` module provides a way to execute shell commands from within Python, allowing you to run external programs and capture their output.\"",
    "\"Generate Python code that imports the datetime module and uses its functions to create RFC3339 compliant dates and times, including support for years, months, days of the week, hours, minutes, seconds, and fractions of a second.\"",
    "\"Generate Python code that imports the required libraries, sets up the basic HTML structure, and adds Bootstrap 3 components and styles to a Django project.\"",
    "\"Generate Python code that creates an AWS Route53 alias target using the CDK Construct Library, specifying the alias name, DNS name, and VPC endpoint.\"",
    "\"Generate Python code that creates a class called MultiVolumeFileWrapper that takes a list of files as input and wraps them into a single file-like object, allowing for reading and writing to the individual files transparently.\"",
    "\"Generate Python code that imports the necessary modules and defines a custom SSH provider class with the required methods to connect to a remote host using SSH, implementing the logic for establishing a secure connection and executing commands on the remote host, and raising exception for any errors encountered during the process.\"",
    "\"Generate Python code that imports the necessary libraries and creates a collection of perceptually uniform colormaps for use in data visualization, including at least five different options such as Viridis, Inferno, Plasma, Magma, and Blues, each with its own range of colors and transitions between them.\"",
    "\"Generate Python code that imports the required libraries, creates an asynchronous PostgreSQL connection pool, and defines an asynchronous function that executes a SQL query using the pool.\"",
    "\"Generate Python code that imports the necessary modules and creates a Perforce client object to interact with a Perforce server, similar to the P4Python package.\"",
    "\"Generate Python code that uses the `ast` module to parse Python source code, identifies import statements, and reorganizes them into alphabetical order based on the imported module name.\"",
    "\"Generate Python code that creates a package using `setuptools` and includes a Jupyter notebook for documentation, a Python script for testing, and a README file with installation instructions.\"",
    "\"Generate Python code that imports the Plyvel module and creates a connection to a local LevelDB database.\"",
    "\"Generate Python code that creates a automation tool using `doit` package, which allows user to define tasks and execute them in a flexible and efficient manner, allowing for easy automation of repetitive tasks.\"",
    "\"Generate Python code that imports the required libraries and sets up a client object for interacting with the Google Cloud Compute API, allowing users to create, modify, and delete resources such as virtual machines, networks, and firewall rules.\"",
    "\"Generate Python code that uses the ruamel.yaml library to parse a restricted version of YAML, specifying allowed keywords and data types in the YAML files, and raising an error for any syntax errors or unauthorized keywords.\"",
    "\"Generate Python code that imports the `validators` library and uses its functions to validate and parse input data, such as email addresses, phone numbers, and dates, and returns formatted output for further processing.\"",
    "\"Generate Python code that imports the Graphviz library and creates a graph with nodes and edges, using the `digraph` function from the `graphviz` module.\"",
    "\"Generate Python code that imports the necessary libraries and allows users to create, modify, and manipulate Dockerfiles, including adding, removing, and modifying instructions, as well as building and exporting the resulting Docker image.\"",
    "\"Generate Python code that uses the `ast` module to parse source code and compare it to docstrings in comments, raising an error if the docstrings are outdated or missing.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple interface for communicating with a Controller Area Network (CAN) bus using the CAN standard, including sending and receiving messages, reading and writing data, and managing errors.\"",
    "\"Generate Python code that creates a Discord bot that uses the discord.py library to provide useful tools for bot development and debugging, such as logging, command handling, and error handling.\"",
    "\"Generate Python code that creates a CDK construct library for AWS StepFunctions, allowing developers to define cloud infrastructure in code and manage resources across AWS services, using CDK's object-oriented programming model and AWS CLI integration.\"",
    "\"Generate Python code that implements a function for encoding and decoding binary data using the Concise Binary Object Representation (CBOR) format, as specified in RFC 7049, including support for major types 0x01 through 0x06 and 0x14 through 0x18.\"",
    "\"Generate Python code that imports the necessary libraries and uses ctypes to interact with an ODBC database, similar to the `pyodbc` package.\"",
    "\"Generate Python code that imports the random and requests libraries, then uses the random library to select a random user agent from a list of popular user agents, and sends a GET request using the selected user agent.\"",
    "\"Generate Python code that imports the Django framework, creates a new Django app, and sets up a basic admin interface with a jazz-inspired color scheme and styling.\"",
    "\"Generate Python code that uses the scipy.optimize library to fit a piecewise linear function to data, defined as a set of x-y points, by minimizing the residual sum of squares between the observed y values and the predicted y values from the fitted function.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API client object to interact with the Delighted API, similar to the Delighted API Python Client package.\"",
    "\"Generate Python code that imports the requests library and creates a CircleCI API wrapper class with methods for authentication, retrieving job statuses, and posting build jobs.\"",
    "Generate Python code that implements a library for working with CSV files, including reading and writing data to CSV files, handling missing values and data types, and providing convenient data manipulation functions.",
    "Generate Python code that creates an interactive dashboard using Plotly, allowing users to explore and visualize data from a CSV file, including filtering, sorting, and styling options.",
    "Generate Python code that implements a machine learning model using Scikit-learn, training a random forest classifier on a dataset and evaluating its performance using metrics such as accuracy, precision, recall, and F1 score.",
    "Generate Python code that performs web scraping using BeautifulSoup, extracting information from a website and saving it to a CSV file, including handling pagination and dealing with different types of HTML elements.",
    "Generate Python code that implements a natural language processing task using NLTK, performing tokenization, stemming, and lemmatization on text data, and analyzing word frequencies and sentiment analysis.",
    "Generate Python code.",
    "\"Generate Python code that creates a line plot using matplotlib, labels the x-axis, y-axis, title, and legend, and saves the plot as a PNG file named \\\"line_plot.png\\\".\"",
    "\"Generate Python code that uses the `pytest` framework to create factories for generating test data, using the `Factory Boy` library to define the factory functions.\"",
    "\"Generate Python code that uses TensorFlow and PyTorch to implement a neural network for translating between two languages, including encoding and decoding modules, attention mechanisms, and model training.\"",
    "\"Generate Python code that uses the keyring library to store and retrieve Google Authentication tokens securely on behalf of a user, allowing them to access Google services without re-entering their credentials every time.\"",
    "\"Generate Python code that uses the `pytest` framework to create a plugin for parallel and concurrent testing, utilizing the `multiprocessing` module to run tests in multiple processes.\"",
    "\"Generate Python code that imports the necessary modules and converts Python values to C bit fields structs represented as Python byte strings, and vice versa, using the struct module and bytearray class.\"",
    "\"Generate Python code that creates an AWS CodeBuild project with a specified name, builds the project using a specified buildspec, and uploads the built artifacts to a specified Amazon S3 bucket.\"",
    "\"Generate Python code that uses the pyexifread library to read EXIF metadata from an image file and then modifies the metadata before writing it back to the file using pyexifwrite.\"",
    "\"Generate Python code that adds a JSON field to a Django model, allowing flexible data storage and serialization using the JSON format.\"",
    "\"Generate Python code that imports the biplist library and uses it to read and write binary Property List files, which are used to store data in macOS and iOS devices.\"",
    "\"Generate Python code that implements a real-time operating system (RTOS) with features such as task management, interrupt handling, and synchronization mechanisms.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes a multi-byte character string as input, decodes it using the appropriate encoding scheme, and returns the decoded string.\"",
    "\"Generate Python code that imports the necessary libraries for deep metric learning using PyTorch, including torch, torchvision, and any additional libraries required by the specific implementation.\"",
    "\"Generate Python code that imports the MISP API library and creates a MISP client object to interact with the MISP instance, including creating and managing events, adding and removing attributes, and searching for events using various criteria.\"",
    "\"Generate Python code that imports the necessary libraries and creates a JSON Web Token using the given payload and secret key, then verifies the token when provided with a request.\"",
    "\"Generate Python code that creates a class called `StatisticalDataValidator` that takes in a dictionary of statistical data and a list of validation rules, and returns a boolean indicating whether the data passes all the rules.\"",
    "\"Generate Python code that defines a decorator `cache_property` that takes a function and a name, caches the result of the function call and returns it whenever the same named property is accessed again within the same class instance.\"",
    "\"Generate Python code that imports the necessary modules and creates a Kinesis stream using the CDK Construct Library for AWS.\"",
    "\"Generate Python code that imports the Hachoir library and uses its parsers to open and analyze binary files, such as executable files, device drivers, and firmware, by calling the appropriate parser based on the file format and performing further analysis using the generated AST.\"",
    "\"Generate Python code that imports the geolite2 library and uses it to retrieve IP address information from the MaxMind database.\"",
    "\"Generate Python code that creates thumbnails for images and videos in Django by using the Pillow library to resize and crop images, and the MoviePy library to create video thumbnails.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Bolt connection to a Neo4j database, allowing the user to execute Cypher queries and retrieve the results.\"",
    "\"Generate Python code that uses TensorFlow to create and manipulate meshes, including mesh optimization, smoothing, and rendering.\"",
    "\"Generate Python code that creates an AWS Service Discovery service with a private DNS namespace, configure DNS TTL, and health checks.\"",
    "\"Generate Python code that imports the necessary libraries and creates a SQLAlchemy Dialect for BigQuery, allowing users to interact with BigQuery databases using the SQLAlchemy API.\"",
    "\"Generate Python code that imports the necessary libraries to access a multitude of neuroimaging data formats, such as NIfTI, DICOM, and Analyze format, and provides functions for reading, writing, and manipulating data in these formats.\"",
    "\"Generate Python code that defines a class `MutableTuple` which takes in a variable number of arguments and allows its instances to be mutable, similar to namedtuple but without the immutability restriction.\"",
    "\"Generate Python code that imports the publicsuffix package and uses its API to get a public suffix for a domain name by calling the `get_public_suffix()` function and passing in the domain name as an argument, then returns the resulting public suffix string.\"",
    "\"Generate Python code that uses the `pyautogui` library to monitor and control user input devices, such as mouse and keyboard, by listening for events and simulating actions.\"",
    "\"Generate Python code that imports the necessary libraries for reading and writing structured data in CSV, zipped CSV, and database formats, such as pandas and sqlite3, and uses them to perform the desired data manipulation tasks.\"",
    "\"Generate Python code that uses the `git` module to automatically add a custom remote prefix to simplify pushing to and pulling from CodeCommit.\"",
    "\"Generate Python code that reads and writes data in various formats, such as CSV, JSON, and TSV, using the TensorFlow IO library, allowing you to interact with large datasets efficiently.\"",
    "\"Generate Python code that plots an SVG graph using the `svg` library, which provides a simple way to create and customize SVG graphics in Python.\"",
    "\"Generate Python code that imports the os module and uses its expandvars function to expand system variables in the current environment, similar to the behavior of the expand command on Unix systems.\"",
    "\"Generate Python code that imports the required libraries and defines a gRPC server stub for the Google Cloud Pub/Sub API, allowing for the creation, publication, and subscription of messages to topics.\"",
    "\"Generate Python code that imports the necessary modules, defines stub classes for SQLAlchemy 1.4, and configures the typing stubs for use with mypy.\"",
    "\"Generate Python code that implements a lifecycle hook for AWS AutoScaling, allowing you to perform custom actions such as running scripts or sending notifications before or after scaling events occur.\"",
    "\"Generate Python code that imports the required modules and defines a function that takes a function and a timeout value as arguments, and returns a new function that calls the original function within a thread and kills it after the specified timeout.\"",
    "\"Generate Python code that uses the subunit module to run multiple tests in parallel, reporting test failures and summarizing results at the end.\"",
    "\"Generate Python code that uses a library like PyObfuscate or Obfuscar to obfuscate Python scripts, binds the obfuscated scripts to a specific machine using a technique such as embedding a MAC address or other unique identifier, and includes an expiration date or time limit for the script to self-destruct after a certain period of time.\"",
    "\"Generate Python code that exports trace data from OpenCensus to Zipkin using the OpenCensus exporter module and the Zipkin HTTP API.\"",
    "\"Generate Python code that uses statistical models and machine learning algorithms to fill in missing data gaps in Pandas DataFrames, similar to the functionality provided by theMissing Data Imputation for Python package.\"",
    "\"Generate Python code that uses the `pytest` framework to write test reports in JSON format, using the `json` module to serialize the reports.\"",
    "\"Generate Python code that creates an API client for interacting with DataBricks using the DataBricks CLI eXtensions (dbx) package, allowing users to manage DataBricks clusters, jobs, and datasets from the command line.\"",
    "\"Generate Python code that creates an Amazon Cognito user pool and associated resources using the AWS CDK library, including a client secret for authentication and an OpenID Connect provider for authentication with external systems.\"",
    "\"Generate Python code that imports the `difflib` module and uses its functions to parse diff files and extract metadata such as file names, line numbers, and modification types.\"",
    "\"Generate Python code that simplifies your setup.py by automatically generating a setup() function for your package, including dependencies and versioning information, using the setuptools library.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Treasure Data Driver instance to interact with a Treasure Data warehouse, allowing you to execute SQL queries, create and manage tables, and perform other data management operations.\"",
    "\"Generate Python code that imports and uses GDAL to read and write geospatial data in various formats, including shapefiles, GeoTIFF, and ArcInfo files, and perform operations such as spatial filtering, buffering, and projection transformations.\"",
    "\"Generate Python code that creates a tee pipe, allowing multiple processes to read from the same input stream simultaneously without blocking, using the `subprocess` module and the `os.dup()` method to create a duplicate file descriptor for the input stream.\"",
    "\"Generate Python code that implements a SOCKS module for establishing connections to servers through a proxy server using the `socket` library and supporting both SOCKS4 and SOCKS5 protocols.\"",
    "\"Generate Python code that uses libraries like Pillow, MoviePy, and Pygame to create video contact sheets, thumbnails, and screenshots by processing frames from input videos and saving them as images.\"",
    "\"Generate Python code that imports the necessary modules for using the cuDNN runtime libraries, initializes the library, creates a device context, and sets up a data type conversion function for efficient memory access.\"",
    "\"Generate Python code that uses the `git` repository data to build a version number according to PEP-440 by importing the `git` module, parsing the commit history to extract the version information, and using the `packaging` module to format the version number correctly.\"",
    "\"Generate Python code that imports the requests library and uses the pyOpenSSL library to read PKCS#12 files and create SSL/TLS certificates for use in requests.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3 EC2 1.34.17 service using mypy-boto3-builder 7.23.1, like so:\\n```python\\nfrom typing import TypeVar, Type\\nfrom mypy_boto3_builder import EC2\\n\\nec2: Type[EC2] = EC2(\\n   client=botocore.client,\\n   config=botocore.config,\\n   region='us-west-2',\\n)\\n```\"",
    "\"Generate Python code that imports the CUDA runtime library and uses it to perform GPU-accelerated linear algebra operations, similar to the CUBLAS native runtime libraries.\"",
    "\"Generate Python code that uses the django-coverage library to measure the coverage of Django templates in a project.\"",
    "\"Generate Python code that imports the `datetime` module and uses its functions to manipulate ISO 8601 duration strings, such as \\\"P3Y6M\\\" or \\\"P12M\\\", by converting them to timedeltas and performing arithmetic operations on them, like adding or subtracting them from dates or other datetimes.\"",
    "\"Generate Python code that uses PySpark to create histogram and density plots from a PySpark Dataframe, using the `display` method to display the plots.\"",
    "\"Generate Python code that imports the necessary CUDA libraries and executes a kernel on a GPU device using the CUDA runtime API.\"",
    "\"Generate Python code that analyzes a given piece of code using the coala tool and provides a report of any issues found, including suggestions for improvement.\"",
    "\"Generate Python code that imports the necessary modules for a minimal Zope/SQLAlchemy transaction integration, defines a custom `Transaction` class that uses SQLAlchemy's `begin`, `commit`, and `rollback` methods to manage transactions, and provides a simple example usage of the `Transaction` class.\"",
    "\"Generate Python code that imports the Flask caching extension and sets up a cache region in the Flask application, allowing for efficient access to frequently used data.\"",
    "\"Generate Python code that uses the nbformat library to create Jupyter notebooks from Markdown documents, allowing for flexible documentation and sharing of data analysis workflows.\"",
    "\"Generate Python code that reads and writes data in various formats, including CSV, JSON, and binary files, using the TensorFlow IO library, allowing for efficient data processing and manipulation.\"",
    "\"Generate Python code that imports the necessary modules for using NVRTC native runtime libraries, including nvrtc and ctypes, and sets up the environment for running CUDA kernels on NVIDIA GPUs.\"",
    "\"Generate Python code that imports the necessary ctypes libraries and wraps the GLFW3 functions using ctypes to provide a Python interface for creating windows, contexts, and managing input events.\"",
    "\"Generate Python code that creates a QR code generator using SVG, EPS, PNG, and terminal output, utilizing Python's built-in libraries for generating QR codes and rendering images.\"",
    "\"Generate Python code that imports and uses the libssh C library to establish an SSH connection, authenticate with a remote server, and execute shell commands.\"",
    "\"Generate Python code that imports the necessary libraries and creates a test runner that executes TestR tests for OpenStack projects, including setup and teardown steps, using the `testr` module.\"",
    "\"Generate Python code that implements a high-level interface for performing common file-system operations, such as creating directories, deleting files, and reading file contents, with a focus on simplicity and ease of use for \\\"lazy\\\" developers.\"",
    "\"Generate Python code that creates an interactive parallel computing environment using IPython, allowing users to execute code in parallel across multiple engines and visualize results in real-time.\"",
    "\"Generate Python code that imports a dictionary of company names and performs operations on them, such as filtering, sorting, and searching for specific words or phrases.\"",
    "\"Generate Python code that imports the necessary libraries and opens a Google Spreadsheet using the `google-auth` and `google-api-python-client` libraries, then uses `pandas` to interact with the worksheets as DataFrames.\"",
    "\"Generate Python code that imports the necessary libraries and implements a function for fast approximate string matching using Jaro and Jaro-Winkler similarity metrics, optionally returns the ratio of similar strings.\"",
    "\"Generate Python code that creates an AWS CodeCommit repository and sets up a continuous integration pipeline using the CDK Construct Library, including installing dependencies, creating a source bucket, configuring the pipeline, and deploying the application.\"",
    "\"Generate Python code that imports the readline module and uses it to provide command-line editing capabilities, such as history recall and line editing, by calling the `readline.readline()` function to read user input and the `readline.addhistory()` function to store commands in the history buffer.\"",
    "\"Generate Python code that uses regular expressions to search for known secret keywords and patterns in the codebase, and reports any matches to the user.\"",
    "\"Generate Python code that imports the necessary libraries, creates a user interface for inputting cassette information, and uses the VCR.py library to manage the cassettes.\"",
    "\"Generate Python code that implements a cache storage system for OpenStack projects using the oslo.cache library, which provides a flexible and efficient caching mechanism for various data types.\"",
    "\"Generate Python code that imports the `os` and `time` modules, uses the `flock` function from the `os` module to acquire a shared lock on a file with a specified name, and implements a timeout mechanism to release the lock after a certain amount of time has passed.\"",
    "\"Generate Python code that uses PyYAML to load and dump YAML files while preserving the order of keys, like so:\\n```\\nimport yaml\\n\\n# Load YAML file\\nwith open('data.yaml', 'r') as f:\\n   data = yaml.load(f)\\n\\n# Dump YAML file\\ndata = {'key1': 'value1', 'key2': 'value2'}\\nwith open('output.yaml', 'w') as f:\\n   yaml.dump(data, f)\\n```\"",
    "\"Generate Python code that implements a shell tab completion feature for Python CLI applications using the argcomplete library and the pycompletion module.\"",
    "\"Generate Python code that imports the necessary libraries and sets up authentication with Google APIs to interact with Google Sheets, Drive, and Calendar through their respective APIs.\"",
    "\"Generate Python code that imports the necessary libraries and creates a PagerDuty client object to interact with the PagerDuty REST API, allowing users to create, read, update, and delete incident, escalation policy, and schedule objects.\"",
    "\"Generate Python code that implements a function `dirty_fields(instance)` that takes a Django model instance `instance` and returns a list of dirty fields (i.e., fields whose value has changed from their original value) based on the `django.db.models.ModelBase.dirty` attribute.\"",
    "\"Generate Python code that takes in a JSON object and formats it into a human-readable format, similar to how Logstash formats its logs, using the `json` module and string manipulation techniques.\"",
    "\"Generate Python code that uses the aiohttp library to create an HTTP server that can render Jinja2 templates, allowing for dynamic content generation and efficient handling of HTTP requests.\"",
    "\"Generate Python code that imports the necessary libraries for multiresolution I/O, analysis, and visualization, such as numpy, scipy, and matplotlib, and uses them to create a user-friendly interface for users to interact with their data.\"",
    "\"Generate Python code that uses the `requests` library to send HTTP requests to control a digital logger's web power switch, using the `urllib` library to parse the HTML response and extract the relevant information.\"",
    "\"Generate Python code that reads and writes EDN format files using the `edn` module, which provides an efficient and convenient way to work with EDN data in Python.\"",
    "\"Generate Python code that imports the necessary libraries and defines a class called Quaternion with attributes for w, x, y, and z components, and methods for addition, multiplication, conjugation, norm, and inversion.\"",
    "\"Generate Python code that implements a pluggable search system for Django, allowing developers to easily swap out different search backends (such as Elasticsearch or Solr) without modifying the application's codebase.\"",
    "\"Generate Python code that imports the robot framework and its libraries, creates a test case, and uses the jsonlibrary to manipulate a JSON object using JSONPath.\"",
    "\"Generate Python code that uses the serial library to communicate with Espressif chips and flash code using the esp32 module.\"",
    "\"Generate Python code that creates an EventBridge event bus, defines an event pattern, and triggers a AWS Lambda function when a matching event is detected.\"",
    "\"Generate Python code that imports the necessary libraries, parses the HTML of colorbrewer2.org, and uses matplotlib to display the color maps.\"",
    "\"Generate Python code that reads a file containing both Markdown and reStructuredText syntax, parses the content using the `markdown` and `restructuredtext` modules, and outputs the parsed contents in a single formatted document.\"",
    "\"Generate Python code that imports a lazy plugin management system, allowing users to load plugins on demand without having to manually specify the plugins' locations or dependencies.\"",
    "\"Generate Python code that imports the scrypt key derivation function library and creates a binding for it, allowing users to derive keys using the scrypt algorithm in their Python applications.\"",
    "\"Generate Python code that defines a pytest plugin which provides variables to tests and fixtures using the `pytest.fixture` decorator and the `pytest.mark.variables` marker.\"",
    "\"Generate Python code that imports the necessary modules for interacting with Apache HBase, creates a connection to an HBase cluster, and performs basic operations such as creating tables, adding data, and retrieving data.\"",
    "\"Generate Python code that uses the `parameterized` package to implement parameterized testing with any Python test framework, allowing for efficient testing of multiple parameters and combinations while maintaining a clean and readable test suite.\"",
    "\"Generate Python code that imports the necessary libraries and initializes an AWS IoT client, allowing you to connect to AWS IoT devices and send/receive data.\"",
    "\"Generate Python code that imports the necessary modules and creates a typing stub for the `freezegun` package, allowing for type-safe interactions with the `freeze` and `gun` functions.\"",
    "\"Generate Python code that defines a base class and utility functions for creating Flake8 plugins.\"",
    "\"Generate Python code that uses natural language processing techniques to reconstruct Arabic sentences into a format that can be read and processed by applications that do not support Arabic script, such as converting Arabic text to Romanization or transliteration, and then processing the resulting string using standard Natural Language Processing techniques to extract meaningful information.\"",
    "\"Generate Python code that monkey-patches and extends the functionality of Django stubs, allowing for more flexible and customizable behavior in Django development.\"",
    "\"Generate Python code that implements a Flake8 plugin to warn about unsafe functions, using the ast module to parse the source code and identify potentially dangerous function calls.\"",
    "\"Generate Python code that imports the C++ Double Metaphone library and wraps its functions in Python classes, allowing users to perform double metaphone computations and compare strings using the C++ implementation.\"",
    "\"Generate Python code that imports the SQLAlchemy library and creates a custom filter method that takes a query object and a list of filtering criteria as input, applies the filters to the query using SQLAlchemy's query methods, and returns the filtered query result.\"",
    "\"Generate Python code that uses the VADER library to perform sentiment analysis on text data, specifically attuned to sentiments expressed in social media and other domains, by calling the VADER API with the text data as input and receiving the sentiment score as output.\"",
    "\"Generate Python code that compares two dataframes using the `pd.concat` function to concatenate the dataframes, `pd.DataFrame.compare` to compare the columns, and `print` to display the comparison result.\"",
    "\"Generate Python code that creates a Django app with custom model, view, template, and URL configurations for a smart object creation facility.\"",
    "\"Generate Python code that imports the ML Collections library and creates an instance of the `Dataset` class, which represents a collection of data that can be used for machine learning tasks.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the BareMetalProvisioningAPIClient class, which can be used to interact with the OpenStack Bare Metal Provisioning API and manage bare metal servers in an OpenStack environment.\"",
    "\"Generate Python code that creates a simple CLI app using a class-based approach, where the user can interact with the app by calling methods on the class instance, and the app responds by printing output to the console.\"",
    "\"Generate Python code that creates a class-based template tag for Django, allowing users to define custom template tags and filters using Python classes, and use them in their templates with ease.\"",
    "\"Generate Python code that creates a tabbed view for Sphinx documents, allowing users to navigate through multiple sections of a document within a single view.\"",
    "\"Generate Python code that imports the required libraries and uses a dictionary to store the dependencies, creating a graph data structure to represent the dependencies between packages.\"",
    "\"Generate Python code that implements a middleware for OpenStack Identity, which authenticates and authorizes users using the OpenStack Authentication and Authorization APIs, and returns a JSON response containing the user's credentials and access information.\"",
    "\"Generate Python code that implements a plugin core for use by pytest-cov, nose-cov, and nose2-cov:\\n```\\nimport sys\\n\\nclass PluginCore:\\n   def __init__(self):\\n       pass\\n\\n   def start_coverage(self):\\n       # Start coverage measurement\\n       sys.stderr.write(\\\"Starting coverage measurement\\\\n\\\")\\n\\n   def stop_coverage(self):\\n       # Stop coverage measurement\\n       sys.stderr.write(\\\"Stopping coverage measurement\\\\n\\\")\\n\\n   def get_coverage(self):\\n       # Return coverage data\\n       return {\\n           \\\"covered\\\": [],\\n           \\\"missed\\\": []\\n       }\\n```\\nThis code defines a basic plugin core class that can be used by pytest-cov, nose-cov, and nose2-cov to measure code coverage. The `start_coverage` method starts coverage measurement, the `stop_coverage` method stops coverage measurement, and the `get_coverage` method returns the coverage data in a dictionary format.\"",
    "\"Generate Python code that imports the necessary libraries and defines a ClickHouse SQLAlchemy dialect class with methods for processing ClickHouse queries, connecting to a ClickHouse database, and executing CRUD operations on ClickHouse tables.\"",
    "\"Generate Python code that implements a dictionary module with basic operations like inserting, searching, and deleting elements, along with support for iterating over key-value pairs, with a focus on efficiency and ease of use.\"",
    "\"Generate Python code that imports the necessary libraries, configures a logging handler to send logs to Microsoft Azure Storage, and sets up a logger that uses the handler to log messages at various levels.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Treasure Data API connection to retrieve data from a database and perform various operations such as creating, reading, updating, and deleting data entities.\"",
    "\"Generate Python code that imports the necessary libraries and implements the required functions to compare sequences, such as calculating the similarity between two DNA strands or finding the differences between two lists of integers.\"",
    "\"Generate Python code that imports the necessary modules, defines a middleware function that generates a unique ID for each incoming request and logs it along with the request data using a customized logging function that filters the logged data based on the request ID.\"",
    "\"Generate Python code that imports the paramiko library and creates an SSH2 connection to a remote server using the username \\\"root\\\" and password \\\"password\\\".\"",
    "\"Generate Python code that uses the `urlparse` module to parse a URL and return a dictionary of query string parameters.\"",
    "\"Generate Python code that uses the `docstring` module to extract documentation from Python functions and classes, and creates an HTML file containing the documentation, using the `mkdir` and `open` functions to create the necessary directory structure and write the files.\"",
    "\"Generate Python code that creates an interactive visualization of a Brunel diagram for Jupyter/IPython notebooks using Plotly library.\"",
    "\"Generate Python code that uses the `ast` module to parse the source code of a project and extract the import statements, then generates a `requirements.txt` file containing the required packages and their versions.\"",
    "\"Generate Python code that imports the required libraries and creates a graph data structure using a suitable data structure such as a list of adjacency lists or a dictionary of adjacency lists, and implements common graph algorithms such as Breadth-First Search, Depth-First Search, Dijkstra's algorithm, and Bellman-Ford algorithm.\"",
    "\"Generate Python code that uses the `moviepy` and `pandas` libraries to automatically organize video files into a library, extracting information from file names and creating a searchable database of TV shows.\"",
    "\"Generate Python code that imports and uses the dbus module to interact with DBus services, including connecting to buses, sending and receiving messages, and introspecting objects.\"",
    "\"Generate Python code that uses the sphinx library to parse reStructuredText documents and generate HTML documentation, similar to the functionality provided by the Sphinx Doxygen renderer.\"",
    "\"I cannot provide a prompt that would generate Python code for a spying framework as it goes against ethical and moral principles, and may also be illegal. It is important to respect individuals' privacy and security. Instead, I suggest focusing on creating tools and frameworks that promote ethical and legal ways of gathering information or data.\"",
    "\"Generate Python code that uses the ast module to parse Python source code, performs transformations to modernize the code, and generates updated source code using the lib2to3 framework.\"",
    "\"Generate Python code that imports the os module and uses its functions to easily access environment variables, including string, boolean, list, tuple, and dictionary types, and supports nested dictionaries.\"",
    "\"Generate Python code that uses the youtube-dl library to download YouTube videos and extract metadata such as title, author, and thumbnail.\"",
    "\"Generate Python code that uses the genius API to download lyrics and metadata from Genius.com by making an API request to the website's endpoint for fetching song information.\"",
    "\"Generate Python code that creates a class called \\\"DIContainer\\\" that takes a list of dependencies as input and returns an instance of itself, then register the dependencies as attributes on the instance.\"",
    "\"Generate Python code that updates multiple objects in a single query using Django ORM's `update()` method, which takes a dictionary of values to update and a list of model instances to update.\"",
    "\"Generate Python code that reads RAR archives using the pyRar library, extracting files and directories from the archive and printing their names and sizes.\"",
    "\"Generate Python code that imports the necessary modules and creates a simple typing stub for cachetools, including a dummy implementation of the cache_function decorator and a few example functions that use it.\"",
    "\"Generate Python code that imports the time module and uses its sleep function to pause the program for a specified amount of time, allowing the user to wait for a particular event or condition to occur before continuing execution.\"",
    "\"Generate Python code that uses boto3 to make fake AWS API calls that mimic real requests, but do not actually perform any changes or operations on the AWS services.\"",
    "\"Generate Python code that implements a user-friendly interface for interacting with AWS CodePipeline, allowing users to easily create, update, and trigger pipelines, as well as view pipeline status and logs.\"",
    "\"Generate Python code that uses the os module to add a custom location to the system's PATH variable, allowing the user to run commands and execute scripts from any directory.\"",
    "\"Generate Python code that creates a simple and flexible badge generator using a template engine like Jinja2, allowing users to customize the design and content of their project badges.\"",
    "\"Generate Python code that imports the Flask and PyMongo libraries and sets up a Flask application with MongoDB support, allowing for CRUD operations on a MongoDB collection.\"",
    "\"Generate Python code that captures the entire screen and saves it as a PNG file using the `pyautogui` library:\\n```\\nimport pyautogui\\npyautogui.screenshot('screenshot')\\n```\"",
    "\"Generate Python code that takes a string as input, splits it into words, capitalizes the first letter of each word, and joins them back together to form a properly titled string, similar to John Gruber's titlecase.pl script.\"",
    "\"Generate Python code that implements a set of extensions for LocalStack, a tool that allows you to run AWS services locally, including an EC2 instance, an S3 bucket, and a DynamoDB table.\"",
    "\"Generate Python code that uses scikit-learn's GridSearchCV and ExplanatoryPowerCheck to fit interpretable models and explain blackbox machine learning.\"",
    "\"Generate Python code that implements ASGI instrumentation for OpenTelemetry using the `opentelemetry` library, including instruments for tracing, metrics, and logging, and utilizes the `asgi3` library for ASGI support.\"",
    "\"Generate Python code that imports the necessary modules and creates an Amazon S3 filesystem object to interact with a file system stored on Amazon S3, using the PyFilesystem2 library.\"",
    "\"Generate Python code that uses the `functools` module to define decorators for profiling, timing, and tracing individual functions, similar to the `decorator` library but with additional functionality for profiling and timing.\"",
    "\"Generate Python code that creates a CLI interface for interacting with DataHub metadata using the datahub-metadata library, allowing users to view, create, update, and delete metadata entities such as datasets, data assets, and business glossaries.\"",
    "\"Generate Python code that imports the thrift library and creates a client for the Hive metastore using the Thrift protocol, allowing interaction with the metastore to perform operations such as querying tables, creating partitions, and managing databases.\"",
    "\"Generate Python code that implements OpenTracing support for Requests using the OpenTracing-Python library, allowing developers to instrument their requests and track traces across multiple services and systems.\"",
    "\"Generate Python code that implements a Reed-Solomon encoder and decoder using pure Python, supporting various codes and able to encode and decode data with flexible lengths.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Kaggle API to interact with Kaggle datasets, submissions, and competitions.\"",
    "\"Generate Python code that uses the numba library to optimize compiler for evaluating mathematical expressions on CPUs and GPUs by specifying the function to be compiled, the input variables, and the hardware target (CPU or GPU).\"",
    "\"Generate Python code that uses the `wasmer` package to compile a WebAssembly module into a native binary using the Cranelift compiler.\"",
    "\"Generate Python code that uses the cdktype library to check CDK v2 applications against a combination of available rule packs, such as AWS CDK Best Practices and PDM Rule Pack, to identify any violations or issues and provide recommendations for improvement.\"",
    "\"Generate Python code that implements a custom statistics collector using the telegraf protocol, similar to pystatsd but with support for tags in the Telegraf format, allowing you to send metrics to InfluxDB or other time-series databases.\"",
    "\"Generate Python code that imports the required libraries and sets up a connection to the Google Cloud Pub/Sub API using the GAPIC library, allowing you to send and receive messages between topics and subscriptions.\"",
    "\"Generate Python code that uses the requests library to send a WHOIS request to the appropriate server for a given domain, parses the response using BeautifulSoup, and returns a dictionary containing the domain's WHOIS information.\"",
    "\"Generate Python code that uses the `pytest` framework to write automated tests for web applications using the Selenium WebDriver.\"",
    "\"Generate Python code that uses the `subprocess` module to run the `gcov` command on a given C/C++ program, capturing the output and parsing it to extract code coverage information.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the FiddlerService class, which can be used to interact with the Fiddler web debugging proxy.\"",
    "\"Generate Python code that imports the necessary modules from the IBM SDK for Python, such as `ibm_security` and `ibm_cloud_sdk`, to authenticate with an IBM Cloud API and perform various security-related tasks, including creating and managing access tokens, handling authentication credentials, and interacting with IBM Cloud services like IAM and KMS.\"",
    "\"Generate Python code that imports the asyncio module and creates an asynchronous FTP server using the asyncftpdlib library, allowing for fast and efficient file transfers.\"",
    "\"Generate Python code that imports the necessary libraries and uses the CADF Library to perform various operations on computer-aided design files, including creating, modifying, and analyzing 2D and 3D models.\"",
    "\"Generate Python code that instruments AWS SDK for Python (Boto3) using OpenTelemetry tracer to collect trace data and send it to Jaeger or other compatible trace agents.\"",
    "\"Generate Python code that imports the necessary modules, sets up a testing environment, and executes the given function with fresh local variables, without modifying the global state.\"",
    "\"Generate Python code that uses image processing techniques, such as edge detection and thresholding, to identify the knee point in an X-ray image of a patient's leg.\"",
    "\"Generate Python code that implements PEP-484 stubs for Django REST framework by creating a subclass of `drf.serializers.Serializer` and overriding the `to_internal_value()` method to use the `PEP484` module for deserialization.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Solr client object to interact with an Apache Solr instance, allowing for querying, indexing, and deleting of documents.\"",
    "\"Generate Python code that uses the Geopy library to perform approximate geocoding by converting addresses into coordinates with a max_results parameter to control the number of nearest locations returned.\"",
    "\"Generate Python code that translates Django models using a registration approach:\\n\\n`from django.db import models; from django.conf import settings; from django.core.exceptions import ImproperlyConfigured; class _ translation_registry():pass;class ModelTranslation(object):def __init__(self, model):pass; def register(app, model, name): pass; def translate(self, **kwargs): pass; translation_registry = {}`;\"",
    "\"Generate Python code that uses the Atari games API to interact with Atari games, including creating game objects, setting game parameters, and running the game loop.\"",
    "\"Generate Python code that creates a Kubernetes deployment script that sets up a JupyterHub cluster on a Kubernetes cluster, using the Kubernetes API to create and manage pods, services, and volumes, and configures JupyterHub to run on each node in the cluster.\"",
    "\"Generate Python code that imports the necessary libraries and modules to perform textile processing, such as Natural Language Toolkit (NLTK) and spaCy, and uses them to perform tasks such as tokenization, part-of-speech tagging, named entity recognition, and sentiment analysis on text data.\"",
    "\"Generate Python code that implements a WebPush publication library, allowing users to send push notifications to subscribed clients via the WebPush protocol.\"",
    "\"Generate Python code that uses the PubNub API to send real-time messages between devices and servers, allowing for efficient communication and data exchange in the cloud.\"",
    "\"Generate Python code that imports the discord.py library and creates a client instance to interact with the Discord RPC API.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client object to interact with Google Cloud Datastore using the NDB library.\"",
    "\"Generate Python code that imports the necessary libraries and interfaces with Plotly's Chart Studio to create, design, and share interactive visualizations.\"",
    "\"Generate Python code that parses and processes AWS IAM policies, statements, ARNs, and wildcards using the Boto3 library and Python's built-in functions, such as json.loads() and re.compile(), to extract and validate policy information and perform actions based on the policy conditions.\"",
    "\"Generate Python code that implements a Watchman client using the `watchman` library, allowing users to interact with Watchman repositories and perform various operations such as listing files, creating/deleting files, and running commands.\"",
    "\"Generate Python code that uses the ast module to parse Python source code, identifies outdated syntax, and updates it to the latest version, such as changing print statements to f-strings.\"",
    "\"Generate Python code that uses the `tox` library to integrate Tox into Travis CI, allowing you to run tests in isolated environments using Docker containers.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `requests` module to send HTTP requests to the Xiaomi smart appliance API, allowing users to control and monitor their devices remotely.\"",
    "\"Generate Python code that implements authentication, authorization, pagination, filtering, and API versioning for Django REST Framework using DRF-specific utilities and classes, such as `UserModelSerializers`, `AuthTokenSerializer`, `limited_queryset`, and `APIView`.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3.CloudFormation 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\\n```python\\nfrom typing import Optional\\nfrom botocore.client import BaseClient\\nfrom mypy_boto3_builder import TypeAnnotator\\n\\nann = TypeAnnotator(services=[\\\"cloudformation\\\"])\\nann.annotate()\\n\\ncfn = ann.client(\\\"cloudformation\\\")\\n```\"",
    "\"Generate Python code that imports the Couchbase SDK and creates a client object to interact with a Couchbase cluster.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Airtable API class, allowing you to interact with Airtable databases and perform various operations such as creating, reading, updating, and deleting records, as well as querying and paginating results.\"",
    "\"Generate Python code that uses the sphinx-lint package to perform style checks on Restructured Text (RST) documentation for Sphinx, including checking for consistency in heading levels, bullet points, and citations, and providing suggestions for improvements.\"",
    "\"Generate Python code that imports TensorFlow and creates a generative adversarial network using TF-GAN, allowing for generating new data samples similar to a given dataset.\"",
    "\"Generate Python code that uses the numba library to perform ahead-of-time compilation of numeric kernels, resulting in optimized machine code for improved performance.\"",
    "\"Generate Python code that uses the requests library to send HTTP requests to the Monsoon Power Monitor API to retrieve data on power consumption, usage, and other related metrics, and parse the JSON responses into Python dictionaries for further analysis and visualization.\"",
    "\"Generate Python code that imports the repoze.who module and creates a basic authentication policy that requires users to provide a valid username and password to access protected resources.\"",
    "\"Generate Python code that imports the urllib module and creates a class called UrlUtil with methods for parsing, validating, and modifying URLs, including converting between absolute and relative URLs, checking if a URL is valid, getting the domain name and port number from a URL, and joining URLs together.\"",
    "\"Generate Python code that uses PyTorch to accelerate deep learning research and development, including data loading, model training, and evaluation.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an instance of the LINE Messaging API SDK for sending messages, managing conversations, and receiving message events.\"",
    "\"Generate Python code that imports the necessary libraries and uses regular expressions to extract relevant information from a semi-structured text file, creating Python tables to represent the data in a structured format.\"",
    "\"Generate Python code that uses the spark-html-profiling library to create HTML profiling reports from Apache Spark DataFrames.\"",
    "\"Generate Python code that uses the nvml library to collect GPU utilization data from an NVIDIA GPU and sends it to Collectd for monitoring and analysis.\"",
    "\"Generate Python code that uses the OpenStack Profiler Library to collect performance data from an OpenStack cloud, analyze it to identify performance bottlenecks, and provide recommendations for optimization.\"",
    "\"Generate Python code that creates an intercepting proxy using the `http.server` module and the `ssl` library to support SSL/TLS, with functionality to handle HTTP/1, HTTP/2, and WebSockets requests.\"",
    "\"Generate Python code that creates a workflow for managing notebook storage, including organizing notes into folders, archiving completed notebooks, and syncing changes across devices.\"",
    "\"Generate Python code that imports the necessary libraries and creates a dataset of market and exchange trading calendars using pandas, including information such as holidays, trading hours, and exchange opens and closes.\"",
    "\"Generate Python code that implements a lunar phase calculator, given the year, month, and day, it returns the illumination percentage of the moon, using the New Moon phase as a reference point, just like Lunr.js.\"",
    "\"Generate Python code that imports the necessary libraries, configures a Redis connection, and uses the RQ module to schedule jobs with various priorities and durations.\"",
    "Generate Python code that takes a list of integers as input and returns the sum of all pairs of integers in the list that add up to a given target value.",
    "Generate Python code that takes a string as input and returns the longest substring that consists only of digits.",
    "Generate Python code that takes a list of integers as input and returns the number of unique permutations of the elements in the list.",
    "Generate Python code that takes a list of strings as input and returns the list of all possible concatenations of the strings in the list.",
    "Generate Python code that takes a list of integers as input and returns the number of ways to choose a subset of the integers that adds up to a given target value.",
    "Generate Python code that takes a string as input and returns the number of occurrences of each digit in the string.",
    "Generate Python code that takes a list of integers as input and returns the number of pairs of integers in the list that differ by 1.",
    "Generate Python code that takes a list of strings as input.",
    "\"Generate Python code that imports the necessary libraries and creates a class called IndexGenerator that takes in a file path and returns a list of indices for each unique word in the file, along with their corresponding line numbers.\"",
    "\"Generate Python code that implements a core proxy system with SOCKS4, SOCKS5, and HTTP tunneling capabilities using the `socket` library and optional third-party libraries for added functionality.\"",
    "\"Generate Python code that imports the tensorflow/datasets library and loads a dataset into memory, such as \\\"import tensorflow_datasets as tfds; d = tfds.load('mnist')\\\".\"",
    "\"Generate Python code that imports the functools module and creates a decorator function called \\\"cached_property\\\" that takes a function argument, wraps it in a property wrapper using functools.wraps, and caches the result of the wrapped function's __get__ method so that it is only called once.\"",
    "\"Generate Python code that imports the click module and creates a typing stub for a command line tool using the @click.command decorator.\"",
    "\"Generate Python code that imports the NATS client library and creates an instance of the NATS async interface, allowing you to send and receive messages using the NATS messaging system within an asynchronous context.\"",
    "\"Generate Python code that uses the `venv` module to create isolated virtual environments for running Python applications, and utilizes the `subprocess` module to activate the environment and run the application within it.\"",
    "\"Generate Python code that implements client-side and server-side support for the OpenAPI Specification v3 using the `pydantic` library for parsing and generating API definitions, and the `fastapi` framework for building and serving APIs.\"",
    "\"Generate Python code that creates a test suite from a directory of test files, runs the tests, and reports the results, using the unittest module.\"",
    "\"Generate Python code that imports the `aiofiles` module and creates a typing stub for it using the `typing` module, allowing for type-safe usage of the `aiofiles` functions without raising any runtime errors.\"",
    "\"Generate Python code that creates a GUI application using PyQt5 and QML, including a custom plugin for data visualization and a designer plugin for creating and editing UI components.\"",
    "\"Generate Python code that implements a CockroachDB dialect for SQLAlchemy, allowing users to interact with CockroachDB databases using the SQLAlchemy API.\"",
    "\"Generate Python code that imports necessary libraries, defines classes and functions for simulating PV system performance, and returns results like power output, energy production, and financial analysis.\"",
    "\"Generate Python code that imports the necessary libraries and creates a custom cross-validator class that inherits from sklearn.utils.validation.SliceSampler and overrides the __init__ method to accept a list of labels and a parameter to indicate whether the labels are mutually exclusive, then in the __call__ method, it iterates through the list of labels and uses sklearn.metrics.pairwise.multilabel_confusion_matrix to calculate the confusion matrix for each label pair, and finally returns a tuple containing the confusion matrices for all label pairs.\"",
    "\"Generate Python code that imports the necessary libraries, loads the trained decision tree or random forest model, and uses it to make predictions on new data.\"",
    "\"Generate Python code that uses the `typing` module to infer the types of variables, function arguments, and return values in a given script or module, providing suggestions for type hints and raising errors for type mismatches.\"",
    "\"Generate Python code that uses the `Flask` framework to create an asset manager that compresses and merges CSS and JavaScript files, using the `cssmin` and `uglifyjs` libraries.\"",
    "\"Generate Python code that implements colour science concepts, including color spaces, color conversion, and color appearance models, using the coloured library.\"",
    "\"Generate Python code that instruments the SQLAlchemy database API using OpenTelemetry, trace queries and errors, and exports traces to a Jaeger agent for distributed tracing.\"",
    "\"Generate Python code that imports the readline module and uses it to provide command line editing capabilities, such as history recall and cursor movement, in a terminal-like fashion.\"",
    "\"Generate Python code that implements a cryptographic library for Telegram, providing end-to-end encryption for secret chats, support for multiple cryptographic algorithms, and secure authentication.\"",
    "\"Generate Python code that implements OpenTracing support for Python DB API, allowing developers to instrument database queries and trace their execution paths using the OpenTracing API.\"",
    "\"Generate Python code that extends Django's built-in features with additional functionality for building robust web applications, including support for user authentication, form validation, and database model management.\"",
    "\"Generate Python code that imports the necessary libraries and defines a class for interacting with table schemas, providing methods for creating, modifying, and querying tables, as well as validating schema consistency.\"",
    "\"Generate Python code that uses the onnx library to convert trained machine learning models from various formats to the Open Neural Network Exchange (ONNX) format, which can then be used in Windows ML, by performing the following steps:\\n\\n1. Importing necessary libraries such as onnx, numpy, and the specific machine learning library (e.g. scikit-learn, TensorFlow, PyTorch)\\n2. Loading the trained model using the appropriate library\\n3. Convert the model to ONNX format using onnx.convert()\\n4. Saving the converted model to a file with the .onnx extension\\n5. Verifying the conversion result using onnx.check_model()\\n6. Providing the option to load the converted model in Windows ML.\"",
    "\"Generate Python code that implements a basic asynchronous I/O multiplexer using the select() function in Python 2.\"",
    "\"Generate Python code that imports the necessary modules from the OpenCV library and provides a simple wrapper around the core functionalities, such as image processing, computer vision, and feature detection.\"",
    "\"Generate Python code that imports the necessary libraries and uses them to perform various operations on Arabic text, such as transliteration, normalization, and text analysis.\"",
    "\"Generate Python code that uses the `html` module to validate, generate, and convert HTML forms.\"",
    "\"Generate Python code that implements a correlation context algorithm for analyzing the relationship between two time series signals using the W3C Correlation Context format, which provides a standardized way of representing and exchanging correlation data on the web.\"",
    "\"Generate Python code that uses the Apache Airflow library to create and manage workflows, allowing for the creation of DAGs (directed acyclic graphs) to model workflows, and the use of sensors and operators to execute tasks and handle failures.\"",
    "\"Generate Python code that imports the necessary libraries and implements fuzzy string matching using techniques such as Levenshtein distance, Jaccard similarity, and N-gram models.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of variables and function parameters in a manner similar to how type hints are used in Python, and also provides code completion suggestions based on the inferred types for unittest tests in an AWS CDK project using awscrt.\"",
    "\"Generate Python code that imports the required modules and sets up an exit stack for asynchronous context management, allowing for proper cleanup of resources when exceptions are raised or the program is exited, using the async-exit-stack library for Python 3.5+.\"",
    "\"Generate Python code that imports the svglib library and uses it to read and convert SVG files into other formats, such as PNG or PDF.\"",
    "\"Generate Python code that implements a Quart extension for Cross Origin Resource Sharing, access control, and support:\\n```python\\nfrom quart import Quart, request, response, jsonify\\nfrom quart_cors import CORS, cross_origin\\n\\napp = Quart(__name__)\\n\\n# Configure CORS\\nCORS(app, resources={r\\\"*\\\": {\\\"origins\\\": [\\\"*\\\"], \\\"methods\\\": [\\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"DELETE\\\"], \\\"headers\\\": [\\\"Content-Type\\\", \\\"Authorization\\\"]}})\\n\\n# Define a function to check if the request is valid\\ndef validate_request(request):\\n   # Check if the request method is allowed\\n   if request.method not in (\\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"DELETE\\\"):\\n       return False\\n   \\n   # Check if the request origin is allowed\\n   origin = request.environ[\\\"HTTP_ORIGIN\\\"]\\n   if origin not in (\\\"http://localhost\\\", \\\"https://example.com\\\"):\\n       return False\\n   \\n   # Check if the request headers are valid\\n   content_type = request.headers.get(\\\"Content-Type\\\")\\n   authorization = request.headers.\"",
    "\"Generate Python code that creates an API wrapper/client with both blocking and asynchronous interfaces using the `asyncio` library and the `aiohttp` library for HTTP requests.\"",
    "\"Generate Python code that imports the OpenSSL library and creates typing stubs for its functions and classes, allowing for more robust type checking in Python applications that use OpenSSL.\"",
    "\"Generate Python code that implements EfficientNet using PyTorch, a neural network architecture that adjusts depth, width, and resolution to efficiently represent images at various sizes.\"",
    "\"Generate Python code that creates a simple wrapper script that captures and forwards signals received by the script to a child process.\"",
    "\"Generate Python code that imports the required libraries and loads pretrained word embeddings into a dictionary, allowing users to perform various NLP tasks such as text classification, sentiment analysis, and language modeling.\"",
    "\"Generate Python code that implements a Django live settings system with pluggable backends, including Redis, allowing for dynamic changes to settings without server restarts.\"",
    "\"Generate Python code that implements a distributed evolutionary algorithm, such as a genetic algorithm or evolution strategies, that can solve optimization problems in a parallel and efficient manner using multiple processors or computing nodes.\"",
    "\"Generate Python code that imports the required modules and implements the PBKDF2 algorithm as specified in PKCS#5 v2.0 for password-based encryption, using a salt and iteration count to enhance security.\"",
    "\"Generate Python code that implements a persistent dict using SQLite3 and Pickle, while ensuring multithread safety, as follows:\\n```python\\nimport threading\\nimport sqlite3\\nimport pickle\\n\\nclass PersistentDict(dict):\\n   def __init__(self, db_path):\\n       self.db_path = db_path\\n       self.dict = {}\\n       self.lock = threading.Lock()\\n   \\n   def __getitem__(self, key):\\n       with self.lock:\\n           if key not in self.dict:\\n               self.dict[key] = pickle.load(open(f\\\"{self.db_path}.pickle\\\", \\\"rb\\\"))[key]\\n               return self.dict[key]\\n           else:\\n               return self.dict[key]\\n   \\n   def __setitem__(self, key, value):\\n       with self.lock:\\n           self.dict[key] = value\\n           pickle.dump(self.dict, open(f\\\"{self.db_path}.pickle\\\", \\\"wb\\\"))\\n   \\n   def __delitem__(self, key):\\n       with\"",
    "\"Generate Python code that imports the BigQuery client library and provides a clean API for interacting with Google BigQuery, including methods for querying data, inserting data, and fetching data from a database.\"",
    "\"Generate Python code that implements the SHA-3 (Keccak) algorithm for Python 2.7 - 3.5, allowing users to perform hash operations on strings and binary data, and providing a range of output sizes for the generated hash values.\"",
    "\"Generate Python code that imports the necessary libraries and performs a conditional independence test using the G-square statistic, reporting the p-value and conclusion about the independence of the variables.\"",
    "\"Generate Python code that configures Crawlera as a middleware for Scrapy, allowing you to easily manage and rotate IP addresses for your web scraping tasks.\"",
    "\"Generate Python code that creates a simple command-line interface for a Python module using the argparse library, allowing users to run the module with various options and arguments.\"",
    "\"Generate Python code that imports the necessary modules and creates a collection of transforms for the Apache Beam Python SDK using the `Beam` and `apache_beam` libraries.\"",
    "\"Generate Python code that sends data to Honeycomb using the `honeycomb-python` library, which offers a simple and effective way to send events and metrics to Honeycomb.\"",
    "\"Generate Python code that defines a class called LazyString that takes a callable object as its argument in the constructor, said callable returns a string, and overrides the __str__ method to return the result of calling the given callable when it's first accessed.\"",
    "\"Generate Python code that creates a Flask API using Flask-RESTful and documents it using Apidoc.\"",
    "\"Generate Python code that imports the necessary modules and creates an immutable wrapper around a dictionary, similar to the frozendict package but with additional features, such as allowing keys to be added multiple times and preserving the order in which keys were added.\"",
    "\"Generate Python code that defines a class for an Avro record and creates a specific record reader using the `avro` library.\"",
    "\"Generate Python code that imports the os, json, and configparser modules, and uses them to read configuration files and environment variables to retrieve program settings in a consistent manner.\"",
    "\"Generate Python code that imports a collection of common modules used in various research projects within the FAIR computer vision team, such as data loading, preprocessing, feature extraction, model training, and evaluation.\"",
    "\"Generate Python code that creates a slick ORM cache with automatic granular event-driven invalidation for Django by subclassing Django's ORM and implementing a custom caching system that listens for events and invalidates cache entries accordingly.\"",
    "\"Generate Python code that uses the ast module to parse and analyze static Python code, extracting semantic information such as function signatures, class definitions, and variable assignments.\"",
    "\"Generate Python code that implements a Circuit Breaker pattern using a decorator to wrap a function, tracking the number of consecutive failures and automatically retrying the function after a certain amount of time if necessary.\"",
    "\"Generate Python code that defines a versioned object class with attributes and methods for creating, updating, and comparing versions of the object, similar to the Oslo Versioned Objects library.\"",
    "\"Generate Python code that creates an Amazon DaxClient object to interact with AWS DAX, allowing users to perform operations such as creating clusters, deleting clusters, and updating cluster configurations.\"",
    "\"Generate Python code that implements a simple schema-based serialization and deserialization library, allowing users to define custom data structures and their corresponding schemas, and providing functions for serializing and deserializing data between Python objects and JSON or YAML strings.\"",
    "\"Generate Python code that defines a schema with union fields using Marshmallow, similar to the `union` field in the `marshmallow` package, but without the need for a separate DSL.\"",
    "\"Generate Python code that creates a runtime environment for AWS Python projects using the `aws_python_runtime` package, including setting up the necessary dependencies and configurations for running the project on AWS services such as Lambda, EC2, or S3.\"",
    "\"Generate Python code that imports the necessary libraries to interact with Cloudinary's API, including requests and json, and creates a Django SDK that provides an easy-to-use interface for uploading and managing files on Cloudinary's platform, including support for uploading multiple files at once, adding metadata and tags, and retrieving and deleting files.\"",
    "\"Generate Python code that creates a micro web framework with routing, handling HTTP methods, and supporting template engines.\"",
    "\"Generate Python code that creates a command-line interface for managing package files, including subcommands for setting up file layouts.\"",
    "\"Generate Python code that uses the openpyxl library to write data to an Excel file in xlsx format, with support for both Python 2 and 3.\"",
    "\"Generate Python code that creates a report using the oslo.reports library, including a table of contents, section headers, and a list of figures.\"",
    "\"Generate Python code that creates a Cloud Development Kit (CDK) construct for an Amazon DynamoDB table, complete with attributes like table name, attribute definitions, primary index, and backup settings.\"",
    "\"Generate Python code that imports the asyncio module and creates an asynchronous version of the DataLoader class using async/await syntax, allowing for efficient and concurrent loading of data from a dataset.\"",
    "\"Generate Python code that implements a command line interface for managing Procfile-based applications, similar to Foreman, using the Honcho package.\"",
    "\"Generate Python code that uses the `pytest` and `anskul` packages to format pytest output for Azure Pipelines UI, similar to the `ansible-format` command.\"",
    "\"Generate Python code that imports the necessary libraries and creates an OpenStack DNS-as-a-Service client instance, allowing for easy management of DNS records within an OpenStack environment.\"",
    "\"Generate Python code that uses the `ast` module to parse the token stream and reconstruct the original source code, while preserving whitespace, like the `untokenize` function from the `pycodestyle` package does.\"",
    "\"Generate Python code that imports a multi-vendor library to establish a connection to a network device using a command line interface, parses the output of the commands to extract relevant information, and provides a simplified interface for interacting with the device.\"",
    "\"Generate Python code that imports the required libraries and creates a graph framework with common data structures and functions for graph manipulation, traversal, and visualization.\"",
    "\"Generate Python code that uses the nltk library to perform English word segmentation by tokenizing text into individual words, removing punctuation and stopwords, and converting all words to lowercase.\"",
    "\"Generate Python code that imports the required libraries and creates a simple lens system with a single lens element.\"",
    "\"Generate Python code that imports the required libraries and uses the round robin algorithm to schedule tasks in a computer system, ensuring that each task gets a chance to run and maximizing throughput while avoiding starvation.\"",
    "\"Generate Python code that imports the necessary libraries, parses the input data, and extracts the desired properties using a combination of list comprehensions, dictionary manipulation, and method calls.\"",
    "\"Generate Python code that imports the selectors module and creates a selector object to handle events from multiple file descriptors, implementing a simple event loop that can be used to wait for events on any of the registered file descriptors.\"",
    "\"Generate Python code that implements an open-source machine learning framework for automating text- and voice-based conversations, including natural language understanding (NLU), dialogue management, and integration with popular messaging platforms such as Slack and Facebook, as well as voice assistant technology.\"",
    "\"Generate Python code that creates an Expo server using the Expo Server SDK for Python, allowing developers to easily create and manage Expo projects, scaffold new apps, and support continuous integration and deployment workflows.\"",
    "\"Generate Python code that imports the `certifi` package and creates a typing stub for it, allowing for type hints and autocompletion in your IDE.\"",
    "\"Generate Python code that imports the requests library and uses it to send an HTTP GET request to the IMDb API to retrieve data from their database, then parse the JSON response using the json library and extract the desired information such as movie titles, ratings, and plot summaries.\"",
    "\"Generate Python code that validates fully-qualified domain names against RFC 1123 using the `socket` library and the `dnscrypt` module, and returns True if the domain name is valid and False otherwise.\"",
    "\"Generate Python code that imports the Elasticsearch library and creates an Elasticsearch client object to interact with an Elasticsearch cluster.\"",
    "\"Generate Python code that imports the necessary libraries for data typing in machine learning, such as numpy and scipy, and defines custom data types for common machine learning data structures like matrices and vectors.\"",
    "\"Generate Python code that imports the grpc module and uses it to define a server service and a corresponding client stub, allowing for the creation of test double objects that mimic the behavior of a gRPC server.\"",
    "\"Generate Python code that uses natural language processing techniques to analyze text data and identify potential bugs, errors, and security vulnerabilities in software systems, similar to the functionality provided by the Codespell package.\"",
    "\"Generate Python code that parses the GDB machine interface output using the `subprocess` module to run GDB and capture its output, then uses regular expressions or parsing libraries like `pyparsing` or `ast` to extract relevant information from the output.\"",
    "\"Generate Python code that imports the Google Cloud IAM API client library and creates a client object to interact with the Google Cloud Identity and Access Management service.\"",
    "\"Generate Python code that creates a mixed synchronous-asynchronous queue, allowing for interoperability between asyncio tasks and classic threads.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper function for tshark, allowing users to run tshark commands and parse packets using Wireshark dissectors.\"",
    "\"Generate Python code that creates an AWS Signer resource using the CDK Construct Library, providing a name and specifying the signing algorithm and credentials.\"",
    "\"Generate Python code that creates a logo for a biological sequence using the WebLogo library, which provides a similar functionality to the R Bioconductor `seqlogo` package.\"",
    "\"Generate Python code that uses the `re` module to check if a given string matches a specified format pattern, and raises an error if it does not match, for use as a plugin for flake8.\"",
    "\"Generate Python code that uses the `setuptools` library to create a package that can be installed via `pip`, including a setup script and a `MANIFEST.in` file, which will allow IPython notebook extension authors to distribute their extensions easily.\"",
    "\"Generate Python code that uses the ast module to parse Python source code and checks for various issues such as unused variables, unnecessary imports, and redundant code.\"",
    "\"Generate Python code that imports the croniter package and creates a typing stub for it using the `typing` module, allowing for auto-completion and type checking of croniter objects in your IDE.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `time.strptime()` function to parse timestamps in the format of \\\"YYYY-MM-DD HH:MM:SS\\\" into seconds since the epoch, and then converts them to nanoseconds using the `time.clock_gettime()` function, similar to the `nanotime` package in Python.\"",
    "\"Generate Python code that imports relevant libraries for data analysis and machine learning, such as NumPy, Pandas, Matplotlib, Scikit-learn, and TensorFlow, and sets up a development environment for building real-world applications.\"",
    "\"Generate Python code that uses the ast module to parse source code and implements a custom algorithm to identify bug variants with patterns that resemble source code.\"",
    "\"Generate Python code that imports the necessary modules for creating a GUI application using the Qt framework, creates a window with a widget, and handles user input events.\"",
    "\"Generate Python code that imports the required libraries and uses the OpenStack Barbican Key Management API to manage encryption keys for various OpenStack services, including Nova, Swift, and Cinder.\"",
    "\"Generate Python code that imports the pytest plugin and sets up a dummy fault handler module for tests, using the `pytest` and `pytest_plugins` modules:\\n```python\\nimport pytest\\nfrom pytest_plugins import FaultHandlerPlugin\\n\\nclass DummyFaultHandler(FaultHandlerPlugin):\\n   def handle_fault(self, excinfo):\\n       pass\\n\\npytest.main([__file__], plugins=[DummyFaultHandler])\\n```\"",
    "\"Generate Python code that calculates Word Mover's Distance using an accelerated function, which quickly computes the distance between two words by utilizing a pre-computed matrix of pairwise distances between all words in a vocabulary.\"",
    "\"Generate Python code that implements a Flake8 extension to check for mutable defaults in Python code, using the `ast` module to parse the source code and raise a Flake8 violation if any mutable defaults are found.\"",
    "\"Generate Python code that implements a set of Superlance plugins for Supervisord, which provide additional functionality for managing and monitoring processes, including job scheduling, resource management, and customizable workflows.\"",
    "\"Generate Python code that imports and combines multiple data connectors, such as Apache Kafka, Amazon S3, and MySQL, into a single interface for seamless data processing in distributed computing environments.\"",
    "\"Generate Python code that imports the required libraries and sets up a gRPC connection to the Stackdriver Logging service, allowing users to send log entries and retrieve logs from the service.\"",
    "\"Generate Python code that uses the WMI module to perform various system management tasks, such as querying hardware information, monitoring system performance, and managing software installations.\"",
    "\"Generate Python code that creates a FastAPI application with reusable utilities for handling common tasks such as pagination, filtering, and authentication.\"",
    "\"Generate Python code that imports the necessary libraries for image processing and manipulation, such as Pillow, and allows users to perform various operations on images, including opening, displaying, modifying, and saving images in various formats.\"",
    "\"Generate Python code that imports the necessary libraries and uses the PyPSD module to read and manipulate PSD files, allowing users to access and modify layers, pixels, and other elements within the images.\"",
    "\"Generate Python code that uses the `unittest` module to create a test runner that generates human-readable HTML reports.\"",
    "\"Generate Python code that imports the Pipeline library and uses it to package assets for a Django application.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the GitHub API, authenticating with a username and password or OAuth token, and parsing the JSON responses to interact with GitHub repositories, issues, pull requests, and users.\"",
    "\"Generate Python code that imports the tweepy library and creates an object to access the Twitter API, supporting both normal and streaming APIs.\"",
    "\"Generate Python code that uses the `exec` function to execute a JavaScript minification script, passing in the source code as a string and writing the minimized output to a file.\"",
    "\"Generate Python code that imports the required libraries, sets up a Ketama cluster, creates a consistent hashing ring, and allows for the addition and removal of nodes from the ring while maintaining consistency and handling node failures.\"",
    "\"Generate Python code that sets up an Apache-style combined logging system for WSGI web applications using the standard library `logging` and `logging.config`.\"",
    "\"Generate Python code that takes a color as input and returns a hierarchy of names for that color, using a dictionary to store the names and their corresponding levels in the hierarchy, and recursively calling a function to traverse the hierarchy and return the names at each level.\"",
    "\"Generate Python code that imports the datadiff library and uses it to generate human-readable differences between two Python data structures, such as lists, dictionaries, or Pandas DataFrames.\"",
    "\"Generate Python code that uses the `diff` and `merge` functions from the `deep_diff` library to compare and combine changes between two Jupyter Notebooks, respectively.\"",
    "\"Generate Python code that imports the necessary libraries for LBFGS and OWL-QN optimization algorithms, defines the objective function and constraints, and uses these algorithms to minimize the function while satisfying the constraints.\"",
    "\"Generate Python code that creates a robust and powerful, fully asynchronous Lavalink wrapper for discord.py by using async-capable libraries like aiohttp and discord.py, and includes features such as voice channel connection management, music playback, and user authentication.\"",
    "\"Generate Python code that imports the logging module, creates a logging handler that sends log messages to Logstash via HTTP, sets up a formatter and logger, and logs information at different levels.\"",
    "\"Generate Python code that creates a Kubernetes operator for Dagster using the Kubernetes API client library and the Dagster Python SDK, allowing users to define Dagster pipelines in Kubernetes manifest files and manage their deployment and execution on a Kubernetes cluster.\"",
    "\"Generate Python code that implements a Flake8 plugin which disallows certain forms of imports by creating a custom import rewriter that modifies the ast.NodeVisitor class and overrides the visit_ImportFrom method to raise a Flake8 violation for unwanted imports.\"",
    "\"Generate Python code that uses the cryptography library to implement AES encryption for zipfiles, similar to the `zipfile` module but with added security through encryption.\"",
    "\"Generate Python code that imports the necessary modules for a variety of common tasks, such as file manipulation, data analysis, and web scraping.\"",
    "\"Generate Python code that imports TensorFlow and creates a Sonnet module for building neural networks.\"",
    "\"Generate Python code that imports the os and stat modules, uses the os.path.getxattr() function to retrieve extended file system attributes, and raises a ValueError if the attribute is not found.\"",
    "\"Generate Python code that implements a browser abstraction layer for web acceptance testing, allowing you to write tests against the behavior of a web application in a browser-agnostic way, without requiring access to the browser's source code.\"",
    "\"Generate Python code that uses the boto3 library to interface with AWS services, including but not limited to EC2, S3, DynamoDB, and CloudWatch, by importing the necessary modules and calling their respective methods to perform various AWS tasks such as creating resources, updating configurations, and retrieving information.\"",
    "\"Generate Python code that uses setuptools to create a package for an Odoo addon, including setup scripts and metadata, and handles dependencies and installation.\"",
    "\"Generate Python code that imports the Neo4j Bolt driver and creates a connection to a Neo4j database, allowing the user to execute Cypher queries and manipulate data in the graph database.\"",
    "\"Generate Python code that implements a function for transparent calculations with uncertainties on the quantities involved, using a method such as Monte Carlo simulation or Bayesian inference, and includes fast calculation of derivatives via automatic differentiation or finite differences.\"",
    "\"Generate Python code that creates a Django app with custom model administration tools using the `django.contrib.admin` module.\"",
    "\"Generate Python code that parses and builds URLs for packages, including handling authentication and formatting, using the `requests` library and PyPI's API.\"",
    "\"Generate Python code that uses the `napoleon` extension of Sphinx to create documentation for Python projects, allowing developers to write documentation in reStructuredText and automatically generating corresponding Python docstrings.\"",
    "\"Generate Python code that uses the `yaml` module to parse a YAML file with strict typing constraints, raising a `TypeError` if any type mismatches are found.\"",
    "\"Generate Python code that imports the necessary modules for Keras Tuner and sets up the tuning process using the legacy import names, like this:\\n```\\nfrom kerastuner.legacy import *  # pylint: disable=import-error\\nfrom keras.models import Sequential\\nfrom keras.layers import Dense\\nfrom keras.callbacks import EarlyStopping\\n\\n# Define the model architecture\\nmodel = Sequential()\\nmodel.add(Dense(64, activation='relu', input_shape=(784,)))\\nmodel.add(Dense(32, activation='relu'))\\nmodel.add(Dense(10, activation='softmax'))\\n\\n# Set up the tuning process\\ntuning = GridSearchCV(model, param_grid={'hidden_layer_sizes': [[64, 32], [128, 64], [256, 128]]}, cv=5, n_jobs=-1)\\n\\n# Add an early stopping callback\\ntuning.fit(X_train, y_train, batch_size=32, validation\"",
    "\"Generate Python code that creates a configuration system for a Python project, allowing users to manage dependencies, settings, and environment variables in a structured and easily accessible way.\"",
    "\"Generate Python code that uses the `pip` module to extract the licenses of all packages installed using pip, and writes them to a file named \\\"license_list.txt\\\" in the current working directory:\\n```\\npip_licenses = []\\nfor package in pip.get_installed():\\n   license = package.license\\n   if license:\\n       pip_licenses.append(f\\\"{package.name}: {license}\\\")\\n   else:\\n       pip_licenses.append(package.name)\\nwith open(\\\"license_list.txt\\\", \\\"w\\\") as f:\\n   for license in pip_licenses:\\n       f.write(license + \\\"\\\\n\\\")\\n```\"",
    "\"Generate Python code that renames import statements in a file, updating references to match the new names, using a dictionary of old and new import names.\"",
    "\"Generate Python code that imports and uses the TensorFlow or PyTorch libraries to interact with trained machine learning models.\"",
    "\"Generate Python code that implements a set of functional data structures, including lists, sets, and maps, using type classes to define the behavior of each structure.\"",
    "\"Generate Python code that wraps the oslo command-line tool to provide a more user-friendly interface for running Oslo commands, including handling authentication and providing sensible defaults for common options.\"",
    "\"Generate Python code that uses the `nose` testing framework and `multiprocessing` module to run unit tests in parallel and produces an XML output file compatible with XUnit test results.\"",
    "\"Generate Python code that imports the Sanic framework, defines a decorator for CORS support using the `functools` module, and registers the decorator with Sanic; based on the `flask-cors` package by Cory Dolphin.\"",
    "\"Generate Python code that imports the Singer.io utility library and uses it to interact with popular music streaming services, such as Spotify and Apple Music, by providing a simple and consistent API for accessing and manipulating music libraries, playlists, and tracks.\"",
    "\"Generate Python code that imports the necessary libraries and uses nmap to perform an access scan, then parses and returns the scan results.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper function to read, manipulate, and write data in different Excel formats using the openpyxl, pandas, and xlsxwriter libraries.\"",
    "\"Generate Python code that implements collaborative filtering for implicit feedback datasets using matrix factorization techniques, such as Singular Value Decomposition (SVD) or Non-negative Matrix Factorization (NMF), to predict missing ratings and generate personalized recommendations for users based on their past behavior and similarities with other users.\"",
    "\"Generate Python code that imports the necessary modules and sets up pyinstrument to collect profiling data for the script, then uses ctypes to call the C functions from the shared library and perform the desired operations.\"",
    "\"Generate Python code that uses the scikit-learn library to perform machine learning tasks, including data preprocessing, feature engineering, model selection, training, and evaluation.\"",
    "\"Generate Python code that uses the PortAudio library to perform cross-platform audio I/O, allowing for the reading and writing of audio data to and from various devices and file formats.\"",
    "\"Generate Python code that imports the necessary modules, defines a function for converting file sizes between different units of measurement (such as bytes, kilobytes, megabytes, gigabytes, etc.), and returns the converted file size using a specified prefix notation.\"",
    "\"Generate Python code that creates a high-quality drawing interface for PIL using the `PIL` library, providing tools for creating and manipulating images, including support for various file formats, color management, and advanced compositing operations.\"",
    "\"Generate Python code that uses the pyinfra library to define infrastructure as code and perform static analysis on it, raising alerts for any violations of best practices or potential issues.\"",
    "\"Generate Python code that imports the necessary libraries and creates a client for Scrapyd, a distributed crawling system, to interact with the Scrapyd server and send requests for crawls, pause and resume crawls, and retrieve the crawl status.\"",
    "\"Generate Python code that uses APIs from openweathermap and pymeter to retrieve weather data and display it on an LED display connected to a Raspberry Pi, while also logging energy consumption data to a CSV file for analysis.\"",
    "\"Generate Python code that uses the MaxMind GeoLite2 database to perform IP address geolocation lookups and return information such as country, region, city, latitude, and longitude.\"",
    "\"Generate Python code that imports the necessary modules, defines configurations, and sets up the application's infrastructure using a modular and extensible architecture.\"",
    "\"Generate Python code that uses a Bayesian optimization algorithm to optimize a given objective function, possibly with constraints, by iteratively building a probabilistic model of the function and using it to guide the search for the optimum.\"",
    "\"Generate Python code that uses the `requests` library to make HTTP requests to Tableau Server's REST API, allowing developers to call any method seen in the API documentation.\"",
    "\"Generate Python code that implements a custom filter backend for Django REST Framework, allowing developers to easily create and manage filters for their APIs.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Python wrapper around HubSpot's APIs using hapipy as a starting point, with modifications for Python 3 compatibility.\"",
    "\"Generate Python code that creates an interactive 3D scene of a building using Pygame, allowing users to navigate through the building using arrow keys and interact with various objects in the scene using mouse clicks.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Watson Machine Learning API Client, authenticating with IBM Cloud credentials or API keys, and configures the service to use a specific version of the API.\"",
    "\"Generate Python code that imports the necessary modules for interacting with Open vSwitch and creates an instance of the OVS class, allowing you to manage virtual switches and ports.\"",
    "\"Generate Python code that creates a Django application with a custom form field widget that uses TinyMCE as its editor, using the TinyMCE JavaScript library to render the editor in the browser.\"",
    "\"Generate Python code that imports the `parsing` module and uses its functions to create a parser that can recognize and parse data in the format of a given grammar.\"",
    "\"Generate Python code that imports the necessary modules and creates a CRF suite wrapper similar to scikit-learn, allowing for efficient and accurate statistical modeling and prediction.\"",
    "\"Generate Python code that imports the necessary modules and uses the CLD2 library to detect the language of a given string, returning the detected language as a Python str object.\"",
    "\"Generate Python code that uses the `py.test` framework to parse environment files before running tests, using the `py.test.plugin` mechanism to register a custom plugin that loads and parses environment files and sets up test fixtures accordingly.\"",
    "\"Generate Python code that uses the Core ML library to build custom machine learning models, performs data processing and feature engineering, and trains and deploys models for predictive tasks.\"",
    "\"Generate Python code that creates a Django app with a custom model for storing blog posts, a views module for rendering templates, and a URL configuration for mapping URLs to views.\"",
    "\"Generate Python code that imports the Honeycomb library and instruments a function, tracking the duration and memory usage of the function using Honeycomb's API.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3.SecretsManager service with mypy-boto3-builder.\"",
    "\"Generate Python code that imports the docutils library and creates a typing stub for each module in the library, using the `typing` module to define the types of the functions and classes in the stubs.\"",
    "\"Generate Python code that uses the xlrd and networkx libraries to read an Excel spreadsheet, convert its data into a graph structure, and visualize it using matplotlib.\"",
    "\"Generate Python code that parses durations in human-friendly format, such as \\\"2 weeks\\\" or \\\"3h\\\", and returns the equivalent timestamp value, using a context-aware approach that understands the nuances of natural language.\"",
    "\"Generate Python code that binds to the ZSTD library, allowing for compression and decompression of data using the ZSTD algorithm.\"",
    "\"Generate Python code that creates a Flask app with a documentation page using the Sphinx Bootstrap Theme, including a navigation bar with links to pages for the documentation, a search bar, and a menu with links to other relevant pages.\"",
    "\"Generate Python code that imports the requests library and uses it to make API calls to the Random Stuff API to retrieve various types of random data, such as numbers, words, and images, and wraps the functionality in a simple API for easy use.\"",
    "\"Generate Python code that uses the botocore library to retrieve AWS API documentation and generates ReST documents based on the retrieved information.\"",
    "\"Generate Python code that implements an Affine Gap String Distance using Cython, which takes two strings as input and returns the distance between them, calculated using an affine transformation.\"",
    "\"Generate Python code that creates a toolbar overlay for debugging Flask applications, with buttons to toggle debugging, dump SQL queries, and display request information.\"",
    "\"Generate Python code that uses the `pytest` framework and the `pyspark` library to run Spark tests with the same functionality as the `pytest-spark` plugin.\"",
    "\"Generate Python code that imports the pymysql library and creates a connection to a MySQL database, allowing you to interact with the database using Python.\"",
    "\"Generate Python code that imports the async MySQL driver, creates a connection pool, and executes a query using await syntax:\\n```\\nimport mysql.connector\\n\\nasync def execute_query(query):\\n   connection = await mysql.connector.connect(user='username', password='password', host='hostname', database='database_name')\\n   cursor = await connection.cursor()\\n   await cursor.execute(query)\\n   result = await cursor.fetchall()\\n   await connection.close()\\n   return result\\n\\n# Example usage:\\nquery = \\\"SELECT * FROM users\\\"\\nresults = await execute_query(query)\\nprint(results)\\n```\"",
    "\"Generate Python code that creates a simple web application using the Flask framework, allowing users to create and retrieve data from a MongoDB database, utilizing SQLalchemy for database interactions, and featuring a user-friendly interface designed with Bootstrap.\"",
    "\"Generate Python code that uses the ast module to evaluate Python expressions in a safe and minimalistic way, without executing arbitrary code.\"",
    "\"Generate Python code that imports the csv module and uses its methods to read and write CSV files, allowing users to interact with tabular data using command-line tools.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureCognitiveSearchClient class, authenticating with an Azure subscription key and using the desired search service name.\"",
    "\"Generate Python code that filters a sequence of DNA nucleotides using the BCJ filter library, which is designed to efficiently filter out low-complexity sequences from high-throughput sequencing data.\"",
    "\"Generate Python code that posts HTML content to a Telegraph blogging service using the `requests` library to send an HTTP POST request to the Telegraph API with the HTML content as the payload.\"",
    "\"Generate Python code that imports the tzlocal module and creates a typing stub for it using the `typing` module, allowing for type-safe interactions with time zones in Python.\"",
    "\"Generate Python code that creates an asynchronous wrapper for Discord webhooks using the `discord.py` library, allowing users to register webhooks and handle incoming messages without blocking the main event loop.\"",
    "\"Generate Python code that creates a random user agent string for each request, including a fake browser and operating system version, to simulate diverse user traffic and avoid bot detection.\"",
    "\"Generate Python code that uses the `requests` and `beautifulsoup4` libraries to scrape zip code data from a website like USPS.com, then uses the `geopy` library to geocode the zip codes and calculate their proximity to a given address.\"",
    "\"Generate Python code that imports the necessary libraries and uses the OptBinning library to perform optimal binning on a dataset, producing a set of bins that maximizes the homogeneity within each bin and minimizes the number of bins needed.\"",
    "\"Generate Python code that imports the necessary libraries and creates a VAPID header using the specified fields, such as \\\"https://example.com\\\" for the iss field, \\\"1234567890\\\" for the sub field, and \\\"Bearer\\\" for the typ field.\"",
    "\"Generate Python code that creates a package named `packager` that takes a package name as input and packages the package into a tarball file, which can then be installed using pip.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Google Cloud Scheduler client object to schedule and manage jobs on Google Cloud Platform.\"",
    "\"Generate Python code that imports xlrd and xlwt libraries and uses them to read and write Excel files, respectively.\"",
    "\"Generate Python code that imports the genie python client module and creates a genie client object to interact with the Genie service, allowing users to create, read, update, and delete wishes, as well as manage their account information.\"",
    "\"Generate Python code that imports the necessary modules, creates a WSGI application object, defines routes for handling HTTP requests, and runs the application on a development server.\"",
    "\"Generate Python code that uses the `inspect` module to create typing stubs for packages installed using `pkg_resources`, including functions to retrieve information about the package versions, dependencies, and other metadata.\"",
    "\"Generate Python code that uses libraries like PyQRCode, PIL, and ZXing to read one-dimensional barcodes and QR codes from images in both Python 2 and 3.\"",
    "\"Generate Python code that creates a script which uses the Ansible module to automate the process of creating, testing, and deploying Ansible roles.\"",
    "\"Generate Python code that imports the necessary modules from the Stanford NLP Library to perform various natural language processing tasks, such as tokenization, part-of-speech tagging, named entity recognition, dependency parsing, and sentiment analysis on texts in multiple languages.\"",
    "\"Generate Python code that uses the OpenCensus library to collect metrics and trace requests made using the `requests` library, including automatically instrumenting HTTP request headers and query parameters.\"",
    "\"Generate Python code that uses the ANTLR library to parse and translate SQL queries into Python scripts, allowing for easy customization of the parsing process through the use of Antlr's grammar definition language.\"",
    "\"Generate Python code that creates a window using the GLFW library, sets up an OpenGL context, and renders a basic scene using the ModernGL library.\"",
    "\"Generate Python code that uses the Graphene SQLAlchemy integration to create a graph database using SQLAlchemy, allowing for efficient querying and manipulation of data through Graphene's intuitive API.\"",
    "\"Generate Python code that imports the necessary modules for working with LaTeX code, such as `re` for regular expressions and `ast` for abstract syntax trees, and creates a lexer class that tokenizes LaTeX code into a stream of tokens, and a codec class that converts between LaTeX code and its tokenized representation.\"",
    "\"Generate Python code that processes bibliographic data and generates BibTeX-compatible files, utilizing the `bibtex` module for parsing and formatting citations, and the `string` and `os` modules for manipulating text and accessing file system operations.\"",
    "\"Generate Python code that imports the CityHash library and provides bindings for its functions, allowing users to compute hash values for strings and buffers using the CityHash algorithm.\"",
    "\"Generate Python code that uses the `hcl2` library to parse HCL2 configuration files and extract desired information, such as resource definitions and their attributes.\"",
    "\"Generate Python code that uses the `requests` library to send HTTP requests to a RESTful API, checks the response status code and body for expected values, and raises an exception if any tests fail.\"",
    "\"Generate Python code that imports the `ofx` library and uses it to read and write OFX files, performing various operations such as creating a new OFX file, adding transactions, and converting between different date formats.\"",
    "\"Generate Python code that creates an AWS Lambda function using the `lambda` module, and sets up an API endpoint using API Gateway, including a simple \\\"Hello World\\\" response.\"",
    "\"Generate Python code that imports the necessary libraries, configures an AWS logging handler to write logs to an S3 bucket and a Kinesis stream, and uses multiple threads to log messages in parallel.\"",
    "\"Generate Python code that imports the NumPy module and adds type hints for its functions, similar to how the `typing` module provides type hints for other Python code.\"",
    "\"Generate Python code that imports the necessary libraries and defines a timeout control decorator and context managers that can raise any exception in another thread.\"",
    "\"Generate Python code that creates a command line interface for interacting with Transifex, allowing users to perform actions such as login, create and manage projects, upload and download translations, and manage teams and permissions.\"",
    "\"Generate Python code that uses the `pytest` framework to write a plugin that checks for compliance with PEP 8 styleguidelines in Python code, similar to the `flake8` tool but integrated directly into `pytest`.\"",
    "\"Generate Python code that imports the PyTorch library and uses it to implement a BERT model, similar to the Google AI BERT model, and includes a script to load pre-trained models from Google's repository.\"",
    "\"Generate Python code that uses the `imapclient` library to connect to an IMAP server, retrieves email messages and attachments from Microsoft Outlook's .msg files, and saves them locally in a designated folder.\"",
    "\"Generate Python code that loads AMPL/GLPK data into Python data structures using the `amply` library, allowing for manipulation and analysis of the data.\"",
    "\"Generate Python code that imports the datetime module, creates a function that takes a timedelta object as input, converts it to a Go duration string using the format method, and returns the resulting string.\"",
    "\"Generate Python code that implements a low-level, data-driven core for an IBM SDK using Python, including classes and functions for working with IBM services and APIs, data structures and algorithms for efficient data processing, and error handling and logging mechanisms.\"",
    "\"Generate Python code that uses the NLTK library to perform sentence segmentation and word tokenization on a given text, outputting the sentences and tokens in separate lists.\"",
    "\"Generate Python code that uses the Boto3 library to manage Amazon S3 transfers, including uploading files from on-premises storage to S3, downloading files from S3 to on-premises storage, and monitoring transfer progress.\"",
    "\"Generate Python code that uses the `pycodestyle` library to check C++ files for compliance with Google's style guide, reporting any violations found.\"",
    "\"Generate Python code that imports the required libraries, sets up a Cloud SQL connection using the provided credentials, and executes a sample query.\\n\\nHere's an example of what the generated code might look like:\\n```\\nfrom google.cloud import sql\\n\\n# Create a client instance\\nclient = sql.Client()\\n\\n# Define the database configuration\\ndatabase_name = \\\"my-database\\\"\\ninstance_id = \\\"my-instance\\\"\\nregion = \\\"us-central1\\\"\\n\\n# Connect to the database\\nconnection = client.connect(\\n   database_name=database_name,\\n   instance_id=instance_id,\\n   region=region\\n)\\n\\n# Execute a sample query\\ncursor = connection.cursor()\\ncursor.execute(\\\"SELECT * FROM my_table\\\")\\nresults = cursor.fetchall()\\n\\n# Print the results\\nfor row in results:\\n   print(row)\\n\\n# Close the cursor and connection\\ncursor.close()\\nconnection.close()\\n```\\nThis code uses the `google.cloud` library to create a Client instance, define the database configuration, and connect to the database. It then executes a sample query using the `cursor()`\"",
    "\"I cannot provide a prompt that generates Python code to bypass Cloudflare's anti-bot page as it goes against ethical and legal standards. It is important to respect websites' security measures and not attempt to circumvent them. Instead, I suggest using legitimate methods to access the content you need, such as using a valid IP address and following the website's terms of service.\"",
    "\"Generate Python code that uses the `sphinx` and `plantuml` libraries to create documentation with diagrams and flowcharts.\"",
    "\"Generate Python code that defines a smart replacement for plain tuples used in `__version__` by creating a custom class with a version number attribute and a constructor that takes a tuple of three values (major, minor, patch) and sets the appropriate attributes.\"",
    "\"Generate Python code that imports the necessary libraries and performs robust piecewise regression using the Least Absolute Deviation (LAD) criterion, similar to the R package RoPWR.\"",
    "\"Generate Python code that implements a URI template processor, following the guidelines of RFC 6570, to parse and expand URI templates, resolving variables and placeholders, and returning an expanded URI string.\"",
    "\"Generate Python code that imports the ANTLR 4.13.0 runtime module for Python 2.7.12 and uses it to parse and analyze a given input file using the specified grammar.\"",
    "\"Generate Python code that imports the required packages and loads the data:\\n```\\nimport pandas as pd\\nimport numpy as np\\nfrom sklearn.model_selection import train_test_split\\nfrom tensorflow.keras.models import Sequential\\nfrom tensorflow.keras.layers import Dense, Dropout\\nfrom tensorflow.keras.optimizers import Adam\\nfrom sklearn.metrics import accuracy\\n```\"",
    "\"Generate Python code that creates a high-level wrapper for Plotly.py, allowing users to easily create and customize interactive visualizations with minimal code.\"",
    "\"Generate Python code that creates a dot-accessible dictionary using the `types` module, similar to JavaScript objects.\"",
    "\"Generate Python code that imports the Twitter API and uses it to post a tweet with a given message, hashtag, and mention.\"",
    "\"Generate Python code that creates a dictionary class called DotDict that supports addressing keys in dot notation, similar to the python package described.\"",
    "\"Generate Python code that creates a Django app with customizable dashboards, layouts, and widgets for data visualization and analysis, utilizing Django's ORM for database interactions and featuring user authentication and authorization through OAuth.\"",
    "\"Generate Python code that implements a library for the ISO 639 standard by creating a dictionary of language codes and their corresponding language names, and providing functions to convert between language codes and language names.\"",
    "\"Generate Python code that imports the necessary libraries and creates a ReportPortalClient object to interact with ReportPortal v5, using the default API endpoint and authentication method.\"",
    "\"Generate Python code that imports the requests and BeautifulSoup libraries, allowing you to send HTTP requests and parse HTML documents to interact with websites programmatically.\"",
    "\"Generate Python code that implements a compatibility layer for Django versions 1.4, 1.7, 1.8, 1.9, 1.10, and 1.11 using a combination of version checks and polyfills to ensure consistent behavior across different versions.\"",
    "\"Generate Python code that imports the necessary libraries, loads a time series dataset, decomposes the time series into its trend, seasonality, and residuals using STL decomposition with Loess, and visualizes the results.\"",
    "\"Generate Python code that uses the Azure Artifacts API to automatically retrieve credentials for authenticating with Azure Artifacts.\"",
    "\"Generate Python code that implements a friendly state machine using the State pattern, allowing for concise and readable definitions of complex state-based workflows.\"",
    "\"Generate Python code that implements an Aho-Corasick algorithm for searching multiple patterns in a text, using a Trie data structure for storing the pattern prefixes andsuffixes, and returning a list of matches for each pattern.\"",
    "\"Generate Python code that creates migrations for Django applications using the south migration framework.\"",
    "\"Generate Python code that imports the Discord module and creates a bot instance using the commands extension, allowing you to use the various functions provided by the DiscordUtils library in conjunction with the bot.\"",
    "\"Generate Python code that implements a remote server using the Robot Framework, allowing for automation of tasks and interactions with the server through HTTP requests.\"",
    "\"Generate Python code that imports the RethinkDB driver library and creates a connection to a RethinkDB database server, allowing for querying and manipulation of data within the database.\"",
    "\"Generate Python code that uses the `requests` library to make HTTP requests to the CKAN Action API, parsing the responses into usable data structures such as lists, dictionaries, and lists of dictionaries, and provides a simple CLI interface using `argparse` to facilitate common actions such as searching, filtering, and creating resources on the platform.\"",
    "\"Generate Python code that replaces the line `df = pd.read_csv('data.csv')` with `df = modin.read_csv('data.csv', acceleration=True)` to accelerate the reading of CSV files using the Modin library, resulting in faster performance.\"",
    "\"Generate Python code that implements a SockJS server using the Tornado framework, allowing for real-time communication between clients and servers, by creating a tornado application that handles WebSocket connections and sends messages back and forth between clients and servers.\"",
    "\"Generate Python code that imports and uses the objc module to interact with Objective-C classes, methods, and functions in an iOS app.\"",
    "\"Generate Python code that implements a coordination library for distributed systems, providing tools for node registration, leader election, and group management, utilizing a distributed lock mechanism to ensure consistency and integrity of data across nodes.\"",
    "\"Generate Python code that reads a YAML file and extracts the values of specified keys, using the `yaml` module.\"",
    "\"Generate Python code that imports and uses the `requests` library to make an API call to a VAT number validation service, then returns a boolean value indicating whether the provided VAT number is valid or not.\"",
    "\"Generate Python code that imports the required libraries and creates a basic state machine using Taskflow, allowing you to manage states and transitions in a structured and scalable way.\"",
    "\"Generate Python code that creates a CloudFormation template to deploy an Amazon SNS topic, an AWS Lambda function, and an AWS CodeStar Notifications rule to notify developers of code changes.\"",
    "\"Generate Python code that uses the Pandas library's apply() method to efficiently apply any given function to a Pandas DataFrame or Series in the fastest available manner.\"",
    "\"Generate Python code that creates a class called ComponentManager that manages the lifecycle of components, such as initializing, starting, stopping, and destroying them, and registers them with a unique identifier, like the ESP-IDF component manager.\"",
    "\"Generate Python code that imports the necessary libraries, sets up an connection to an Artifactory instance, and uses the Artifactory REST API to perform CRUD operations on artifacts and repositories.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes an OSM file as input, processes it using libosmium, and returns the processed data in a suitable format for further analysis or visualization.\"",
    "\"Generate Python code that uses the ` cryptography` library to decrypt Microsoft Office files with passwords or other keys.\"",
    "\"Generate Python code that uses the `str.find()` method to search for approximately matching strings in a list of documents, where the search string is input by the user.\"",
    "\"Generate Python code that implements a distributed training framework for TensorFlow, Keras, PyTorch, and Apache MXNet using Ray, a high-performance distributed computing library, by defining a custom training loop that utilizes Ray's parallelization capabilities to distribute the training process across multiple machines.\"",
    "\"Generate Python code that imports the necessary modules for disassembling and marshaling bytecode across different Python versions, such as `dis` and `marshal`, and uses them to analyze and manipulate bytecode files.\"",
    "\"Generate Python code that imports the necessary libraries, creates a class to interact with Google Drive, and uses said class to download shared files from Google Drive.\"",
    "\"Generate Python code that uses the `pydantic` library to create a code editor extension for Komodo Edit that provides AI-powered code intelligence, including code completion, code refactoring, and code analysis.\"",
    "\"Generate Python code that imports the unittest module and creates a mock object class called \\\"MockObject\\\" that can be used to mock any object, method or function in Python.\"",
    "\"Generate Python code that imports the necessary libraries and creates a connection to a Neo4j database, allowing the user to interact with the graph data using Cypher queries and Python variables.\"",
    "\"Generate Python code that imports the required modules, sets up the connection to an Exasol database, creates a cursor object to execute queries, implements a function to convert data types, and defines a wrapper function for executing SQL statements with parameter binding and error handling, all with the aim of providing an enhanced version of the Exasol Python driver with additional functionalities.\"",
    "\"Generate Python code that imports the necessary libraries, including Keras, TensorFlow, and NumPy, and creates a RetinaNet model for object detection using a pre-trained convolutional neural network and a custom loss function.\"",
    "\"Generate Python code that uses the Django-RQ library to integrate Redis Queue with Django, allowing you to use Redis Queue as a message broker for your Django application.\"",
    "\"Generate Python code that imports the necessary libraries and creates a helper class to interact with Google APIs using the `python-google-api-client` library, providing a simple and consistent interface for common use cases.\"",
    "\"Generate Python code that creates a web-based user interface for interacting with Dagster pipelines, allowing users to view and trigger pipeline runs, inspect pipeline definitions, and monitor pipeline execution status.\"",
    "\"Generate Python code that imports the Discord API library and creates a client object to interact with a Discord server, allowing users to create, update, and delete messages, as well as manage roles and channels.\"",
    "\"Generate Python code that imports and uses the libvirt library to interact with virtual machines, including creating, starting, stopping, and managing virtual machines, as well as accessing their metadata and performance metrics.\"",
    "\"Generate Python code that imports the requests library and uses it to send HTTP requests to the Anticaptcha.com API to solve captchas.\"",
    "\"Generate Python code that uses the `pydanny` library to validate reStructuredText documents conforming to the Python Docstring format, reporting any errors or warnings through the `flake8` tool.\"",
    "\"Generate Python code that imports the necessary libraries and creates an Azure Event Hubs client that can send events to an event hub, including authentication and error handling.\"",
    "\"Generate Python code that creates a PKCE (Public Key Cryptography for Eclipse) generator using the cryptography library, capable of generating a key pair and creating a self-signed certificate request for the public key.\"",
    "\"Generate Python code that uses the `google-cloud-texttospeech` library to calculate a token for running the Google Translate text-to-speech engine.\"",
    "\"Generate Python code that imports the boto3 library and adds type hints for the version 1.34.18 of the master module, using mypy-boto3-builder version 7.23.1, like this:\\n```\\nfrom typing import TypeVar\\nfrom botocore.client import BaseClient\\nfrom boto3.s3 import S3Client\\n\\nclass MyBoto3Client(BaseClient):\\n   def __init__(self) -> None:\\n       super().__init__()\\n       self.s3 = S3Client(config=self.config)\\n   \\n   def some_method(self) -> None:\\n       # Some method implementation\\n       pass\\n```\"",
    "\"Generate Python code that imports the necessary libraries and uses a pre-trained CLD3 model to classify a given text sample into one of the supported languages.\"",
    "\"Generate Python code that imports the necessary modules and sets up a connection to a LocalStack instance, allowing you to interact with the LocalStack API.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper function for a C++ function, allowing Python callers to pass Python objects as arguments and returning a Python object representing the result.\"",
    "\"Generate Python code that implements OpenTracing support for PyMongo by using the OpenTracing API to create a tracer, decorating PyMongo methods with the tracer, and exporting traces to the OpenTracing collector.\"",
    "\"Generate Python code that implements a JSON RPC 2.0 server using the `jsonrpc` package, allowing for the creation of a server that can handle incoming requests and send responses in JSON format.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an authentication token for accessing the Polyaxon API.\"",
    "\"Generate Python code that imports the messagepack library and uses it to serialize and deserialize messages in a portable and lightweight manner.\"",
    "\"Generate Python code that imports the required libraries and sets up a connection to an OpenStack cloud, allowing you to create, modify, and delete resources such as virtual machines, networks, and volumes.\"",
    "\"Generate Python code that imports the necessary modules and defines a set of custom data types for scientific computing, similar to those provided by the scipy library.\"",
    "\"Generate Python code that uses PySpark to perform distributed time-series analysis on a Spark cluster, including data loading, cleaning, aggregation, and visualization.\"",
    "\"Generate Python code that uses the py2exe or pyinstaller libraries to create a standalone Windows executable for a Python script, including integrating with .NET and Mono frameworks for running on both Windows and Linux platforms.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a simple RPC server using JSON-RPC and ZeroMQ, with support for multiple transports and protocols.\"",
    "\"Generate Python code that imports the necessary modules and classes from the apache-airflow-providers-microsoft-mssql package to connect to a Microsoft SQL Server database and perform CRUD operations on tables using Apache Airflow providers.\"",
    "\"Generate Python code that uses the `sqlalchemy` library to define a database migration script that can be used to upgrade or downgrade a database schema through a series of reversible steps, using SQL to represent the changes.\"",
    "\"Generate Python code that uses a dictionary to convert number words to numbers, like \\\"three hundred and forty two\\\" to 342.\"",
    "\"Generate Python code that uses string formatting to create URIs based on templates with placeholders for dynamic values, similar to URL parameters in web development.\"",
    "\"Generate Python code that replaces contractions such as \\\"you're\\\" with their expanded forms like \\\"you are\\\" using a dictionary-based approach where the keys are the contractions and the values are their expanded forms, and then uses regular expressions to apply the substitutions in a given string.\"",
    "\"Generate Python code that imports the Python Imaging Library and creates a collection of utilities and processors for image processing and manipulation, such as resizing, cropping, thresholding, and converting between different image formats.\"",
    "\"Generate Python code that imports the necessary libraries and uses Open3D to perform 3D data processing, including loading and visualizing 3D meshes, performing mesh editing operations, and creating 3D models from scratch.\"",
    "\"Generate Python code that uses the pyarrow library to read the metadata of a Parquet file and display it in a human-readable format.\"",
    "\"Generate Python code that imports the necessary modules to interact with the Cocoa frameworks on macOS, such as `pyobjc` or `py2app`, and creates a wrapper class for a specific framework, such as the Foundation framework, providing a Python interface for its classes and methods.\"",
    "\"Generate Python code that implements a hidden alignment conditional random field and computes a discriminative string edit distance using the scikit-learn library and the EditDistance module.\"",
    "\"Generate Python code that imports the necessary libraries for image registration and segmentation using ITK, specifically `itk.Image` and `itk.Registration` modules, and creates a simple interface for users to perform these tasks.\"",
    "\"Generate Python code that uses the Ansible module to check if a given version of Ansible is compatible with the installed version of Python.\"",
    "\"Generate Python code that reads the requirements.txt file, hashes each requirement using a chosen algorithm, and writes the hashed requirements back to the file.\"",
    "\"Generate Python code that imports the necessary modules, extends the RDFLib class with a custom subclass, defines a new method for parsing JSON-LD data, and overrides the serialize method to output JSON-LD format.\"",
    "\"Generate Python code that imports the required libraries and creates a function that takes two dictionary arguments, merges them recursively, and returns the merged dictionary.\"",
    "\"Generate Python code that imports the `ipaddress` module and creates a typing stub for its `IPv4Address` and `IPv6Address` classes.\"",
    "\"Generate Python code that creates a flexible and capable API layer for Django using the `django-api-flex` package, which provides a modular and extensible architecture for building APIs, including support for routing, serialization, validation, and authentication.\"",
    "\"Generate Python code that imports the Django framework and defines a custom `ClusterModel` class which can be used to represent a cluster of related models, and includes methods for creating, updating, and querying the cluster and its members.\"",
    "\"Generate Python code that uses the `graphql` and `dagster` libraries to create a GraphQL frontend for interacting with Dagster graphs.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API connection to interact with the DataRobot API using the client library.\"",
    "\"Generate Python code that implements a full-featured, pure-Python Kafka client that supports all the standard Kafka features, such as producing and consuming messages, managing topics, and handling errors, using the Confluent Python SDK.\"",
    "\"Generate Python code that exports OpenTelemetry traces as Datadog spans, using the OpenTelemetry API to gather trace data and the Datadog API to create and upload spans.\"",
    "\"Generate Python code that imports the geohash module and uses it to decode a geohash string into a tuple of latitude and longitude, then encodes the latitude and longitude back into a geohash string.\\n\\nHere is an example of how this might look:\\n```\\nimport geohash\\n\\n# Decode a geohash string into a tuple of latitude and longitude\\ngeohash_string = \\\"dsf456789\\\"\\nlatitude, longitude = geohash.decode(geohash_string)\\n\\n# Encode the latitude and longitude back into a geohash string\\nnew_geohash_string = geohash.encode(latitude, longitude)\\nprint(new_geohash_string)\\n```\"",
    "\"Generate Python code that uses the Cython language to provide a Python interface to c++filt/abi::__cxa_demangle, allowing users to demangle C++ function names and convert them into human-readable format.\"",
    "\"Generate Python code that imports the requests library and uses it to make API calls to The Movie Database API v3 to retrieve information about movies, TV shows, and people.\"",
    "\"Generate Python code that implements a profiling plugin for py.test, which uses the cProfile module to collect profiling data during test runs and provides detailed reports on performance statistics such as execution time, memory usage, and function call counts.\"",
    "\"Generate Python code that uses the `minify` library to minify HTML, JS, or CSS files before writing them to disk, using the `MkDocs` plugin architecture.\"",
    "\"Generate Python code that implements a hierarchical clustering algorithm using the information theory framework, such as the AgglomerativeClustering class in scikit-learn, taking in a dataset and returning a hierarchy of clusters.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API connection to the NeverBounce service, allowing me to validate email addresses, perform email verification checks, and retrieve information about email domains.\"",
    "\"Generate Python code that uses the docx module to extract text and images from docx files, for example:\\n```\\nimport docx\\n\\ndef extract_text_and_images(docx_file):\\n   document = docx.Document(docx_file)\\n   text = ''\\n   images = []\\n   for paragraph in document.paragraphs:\\n       text += paragraph.text + '\\\\n'\\n       for image in paragraph.images:\\n           images.append(image.url)\\n   return text, images\\n```\"",
    "\"Generate Python code that creates a flexible, modular, and extensible test framework for Python applications using pytest, param, and fixture libraries.\"",
    "\"Generate Python code that imports the json and sys modules, reads a newline-delimited JSON file, parses each line as JSON, and writes the parsed data to standard output.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an Airflow environment to interact with Google Cloud services, including authentication and configuration setup, using the Google Cloud Client Library for Python.\"",
    "\"Generate Python code that implements a version of the \\\"colored diff\\\" command-line tool, but with several improvements, such as support for more than 16 colors, customizable color schemes, and the ability to display differences in binary files.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Kana kanji simple inversion library to perform basic character manipulation operations, such as converting hiragana characters to their corresponding katakana counterparts.\"",
    "\"Generate Python code that uses a combination of computer vision and natural language processing techniques to automatically generate subtitles for videos in real-time, with a focus on speed and accuracy.\"",
    "\"Generate Python code that uses the packrat library to parse and interpret a Packrat grammar, allowing users to define and manipulate data structures represented by the grammar.\"",
    "\"Generate Python code that implements a generic drag-and-drop sorting feature for the List, Stacked- and Tabular-Inlines Views in the Django Admin, utilizing JavaScript and HTML5 draggable attributes to enable rearranging of items within a list, stacked inline, or tabular display, while maintaining proper data integrity and updating the underlying database tables accordingly.\"",
    "\"Generate Python code that creates a Scout Application Performance Monitoring Agent, which tracks performance metrics of web applications and provides real-time visibility into application behavior and health.\"",
    "\"Generate Python code that implements a generic key manager interface for OpenStack, allowing for the creation, management, and retrieval of encryption keys for various OpenStack services, including Nova, Swift, and Cinder.\"",
    "\"Generate Python code that imports the required libraries, creates a database connection, and executes a query using async/await syntax, similar to the following example:\\n```\\nimport asyncpg\\n\\nasync def run_query(db_url):\\n   conn = await asyncpg.connect(dsn=db_url)\\n   result = await conn.execute(\\\"SELECT * FROM users\\\")\\n   return result\\n\\n# Example usage\\nprint(await run_query(\\\"postgresql://user:password@localhost/mydatabase\\\"))\\n```\\nThis code defines an `run_query` function that takes a database URL as input and returns the result of a SELECT query executed on the connected database. The function uses the `asynpg` library to establish a connection to the database and execute the query asynchronously.\"",
    "\"Generate Python code that creates a synthetic dataset of school-level mathematics questions by randomly generating question types, such as addition, subtraction, multiplication, and division, with varying levels of difficulty and number of choices, using the numpy and random modules.\"",
    "\"Generate Python code that implements XML support for Django REST Framework by creating a custom renderer that uses lxml to parse and generate XML documents, similar to the built-in JSONRenderer but with modifications to handle XML-specific syntax and namespace conventions.\"",
    "\"Generate Python code that parses environment variables and returns their values, using the os module's getenv() function.\"",
    "\"Generate Python code that implements a command line interface for managing and running web applications, similar to the uWSGI top-like interface, using the argparse library for parsing command line arguments and the Flask or Django framework for building the web application.\"",
    "\"Generate Python code that imports the publicsuffixlist module and uses its API to determine whether a given domain name is in a public suffix, similar to how the publicsuffixlist command line tool works.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Kubernetes asynchronous client that can perform various operations such as creating, updating, and deleting resources, as well as watching for changes in the cluster.\"",
    "\"Generate Python code that uses the Sphinx docstring parser to parse BibTeX-style citations in reStructuredText documents, converts them to LaTeX citations using a BibTeX database, and includes them in the generated PDF document.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API connection to the Salesforce Marketing Cloud Fuel SDK, allowing for the creation, management, and analysis of marketing campaigns and customer interactions.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `re` module to split the input text into tokens based on the rules of Japanese morphology, such as particle and inflectional morphology, and output a list of tokens.\"",
    "\"Generate Python code that creates standard barcodes using a provided barcode number, including support for multiple barcode types and optional image output using Pillow.\"",
    "\"Generate Python code that creates a CLI tool that displays a spinner when a function is executed, similar to the `click` package's `spinner` decorator.\"",
    "\"Generate Python code that imports the necessary libraries and uses the LUSID API to retrieve data, perform calculations, and create visualizations for financial analysis and modeling.\"",
    "\"Generate Python code that uses the `sphinx` library to create documentation for an OpenStack project, including support for multiple languages, cross-referencing between documents, and integration with Git.\"",
    "\"Generate Python code that implements a package that can be used to extract information from a website, specifically the homepage of a university, including the name of the university, the names of the departments, and the names of the people in those departments.\"",
    "\"Generate Python code that imports the necessary libraries and establishes a connection to a server sent event stream, allowing you to receive and parse events in real-time.\"",
    "\"Generate Python code that imports a library providing an all-in-one infinity value for Python, which can be compared to any object.\\n\\nHere is a possible implementation:\\n```\\nfrom infinity import Infinity\\n```\\nThis code imports the `Infinity` class from the `infinity` module, which provides a singlton infinite object that can be compared to any other object.\"",
    "\"Generate Python code that uses the jieba library to perform Chinese word segmentation on input text, and provides functions for handling different types of word segmentation, such as cutting by character, cutting by syllable, and cutting by meaning.\"",
    "\"Generate Python code that uses BeautifulSoup to scrape the HTML of a website and extract the feed URLs, which can be done using the `find_all` method to search for elements with the `feed` attribute.\"",
    "\"Generate Python code that uses the H2O library to integrate Sparkling Water's fast scalable machine learning algorithms with Spark, allowing for efficient distributed processing of large datasets.\"",
    "\"Generate Python code that uses the `github` and `tox` libraries to integrate tox into GitHub Actions, allowing you to run tests and validate code quality within your GitHub workflows.\"",
    "\"Generate Python code that builds data pipelines using AWS services like Glue, Spark, and S3, and automates data processing and transformation tasks using Apache Beam.\"",
    "\"Generate Python code that uses the `typing` module to create type hints for Markdown files, allowing for more robust and auto-completable documentation.\"",
    "\"Generate Python code that imports the necessary modules, specifically 'django' and 'py-moneyed', and creates a custom Django model field that uses py-moneyed to represent money values, allowing for proper validation and formatting of monetary amounts in Django models and forms.\"",
    "\"Generate Python code that creates an automatic slug field for Django models, using a combination of the Django built-in `slugify` function and a custom validation method to ensure uniqueness.\"",
    "\"Generate Python code that creates a Django admin class with nested inlines using the `TabularInline` and `StackedInline` classes from the `django.contrib.admin.options` module, like so:\\n```python\\nfrom django.contrib.admin.options import TabularInline, StackedInline\\n\\nclass MyModelAdmin(admin.ModelAdmin):\\n   inlines = [\\n       TabularInline(model='myapp.MyRelatedModel', fields=['name', 'age']),\\n       StackedInline(model='myapp.MyOtherRelatedModel', fields=['description'])\\n   ]\\n```\"",
    "Generate Python code that implements a dictionary data structure with key-value pairs, support for indexing, and methods like `.keys()`, `.values()`, and `.items()`.",
    "Generate Python code that implements a list data structure with index-based access, slicing, and methods like `append()`, `insert()`, `remove()`, and `sort()`.",
    "Generate Python code that implements a set data structure with support for union, intersection, difference, and methods like `add()`, `discard()`, and `isdisjoint()`.",
    "Generate Python code that implements a hash table data structure with support for hashing values and methods like `hash()` and `hexdigest()`.",
    "Generate Python code that implements a queue data structure with support for enqueuing, dequeuing, and methods like `queue_empty()`, `queue_not_empty()`, and `size()`.",
    "Generate Python code that implements a stack data structure with support for pushing, popping, and methods like `stack_empty()`, `stack`.",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes an address as input, uses the Google Geocoding API V3 to geocode or reverse geocode the address, validates the address, and formats the address according to the user's specifications.\"",
    "\"Generate Python code that compares two categorical variables using the chi-squared test and displays the results in a contingency table, including expected values and p-values for independence, using the scipy library.\"",
    "\"Generate Python code that implements image transformation, compression, and decompression codecs using libraries such as Pillow and SciPy.\"",
    "\"Generate Python code that imports the necessary libraries and defines a Kinesis Firehose resource using the CDK Construct Library for AWS, specifying the firehose name, source and destination ARNs, and optionally sets up IAM role associations and filtering rules.\"",
    "\"Generate Python code that imports and combines the functionalities of Pillow, Wand, and OpenCV to create a comprehensive image processing library.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an asynchronous Prometheus client using the aiohttp library, allowing for efficient monitoring of Prometheus metrics in an asyncio-based application.\"",
    "\"Generate Python code that imports the IPAddress class from the backports library and creates an instance of it with a given address, like so: `ip = backports.IPAddress('192.168.0.1')`.\"",
    "\"Generate Python code that creates a schedule for periodic tasks using the schedule module, allowing users to define tasks with their corresponding time intervals in a human-readable format and automatically running them at the specified times.\"",
    "\"Generate Python code that implements a recursive descent parser using functional combinators to parse strings and produce abstract syntax trees.\"",
    "\"Generate Python code that creates a CLI tool for AWS Lambda developers, allowing them to easily deploy and manage their functions, including creating and updating function codes, configuring triggers and environments, and monitoring function execution.\"",
    "\"Generate Python code that creates a simple GUI window using EasyGUI, including a text input field, a button to submit user input, and a label to display the output.\"",
    "\"Generate Python code that compresses and decompresses data using the Zopfli algorithm, similar to the Zopfli module for Python.\"",
    "\"Generate Python code that imports the necessary libraries and creates a conjurer object to interact with the Conjure API for creating, reading, updating, and deleting entities in a PostgreSQL database.\"",
    "\"Generate Python code that imports the necessary modules for creating a cross-platform GUI application using Phoenix.\"",
    "\"Generate Python code that imports the necessary modules for building command-line apps, such as `argparse` for parsing command-line arguments, and `sys` for accessing system information.\"",
    "\"Generate Python code that uses web scraping techniques to extract query titles, descriptions, and links from search engine pages using libraries like Beautiful Soup and Requests.\"",
    "\"Generate Python code that implements a set of simple financial functions, including calculating present value, future value, and net present value for a given investment, as well as calculating interest rates and compounding periods.\"",
    "\"Generate Python code that imports the uuid module and creates a universally unique lexicographically sortable identifier, such as a version 4 UUID, using the `uuid.uuid4()` function.\"",
    "\"Generate Python code that imports the os and shutil modules, and uses them to manipulate directories and files in the manner described by the twitter.common package.\"",
    "\"Generate Python code that creates a secure editor for encrypting and decrypting files using cryptography library, allowing users to edit sensitive information without revealing the plaintext.\"",
    "\"Generate Python code that imports the Snowflake Python API library and creates a connection to a Snowflake account, allowing you to execute SQL queries and interact with Snowflake tables.\"",
    "\"Generate Python code that imports the geoip2 library and uses it to retrieve information about an IP address, such as country, region, city, latitude, and longitude.\"",
    "\"Generate Python code that implements a machine learning model that can handle large datasets, performs efficient feature engineering, and supports distributed training for deep neural networks using TensorFlow or PyTorch.\"",
    "\"Generate Python code that parses BBCode-formatted strings and formats them into HTML, using a dictionary-based approach to map BBCode tags to their corresponding HTML elements.\"",
    "\"Generate Python code that imports the necessary libraries and modules for network utility functions, such as socket, subprocess, and os, and creates a collection of functions for various network-related tasks, such as DNS resolution, IP address manipulation, and network connection management, for use in Mozilla testing environments.\"",
    "\"Generate Python code that implements a gRPC server using the asyncio library, allowing for asynchronous handling of incoming requests and responses.\"",
    "\"Generate Python code that implements a TensorFlow version of focal loss, which modifies cross-entropy loss to give more weight to samples near the decision boundary, using the formula from the original paper by Lin et al. (2017) and applying it to a binary classification problem.\"",
    "\"Generate Python code that imports the necessary libraries and uses the cybersecurity tools in CycloneDX to perform supply chain security checks on software packages.\"",
    "\"Generate Python code that imports the necessary libraries and creates a datetime variable type for deduping data.\"",
    "\"Generate Python code that uses Scrapy and Selenium to scrape data from websites that require JavaScript rendering, handling common web pages like login, cookies, and JavaScript loading, and extracting data using XPath, CSS selectors, or RegEx.\"",
    "\"Generate Python code that creates a Git repository with a specified branch, initializes a new Git layer, and stages changes for a single file in the root directory of the repository using the `git` module and the `os` module to interact with the file system.\"",
    "\"Generate Python code that imports the necessary libraries and uses the OpenStack Cinder API to manage local volume attaches, including creating, updating, and deleting volumes, attaching and detaching volumes from instances, and retrieving volume information.\"",
    "\"Generate Python code that creates an interactive dashboard using Plotly to display a Facets Overview visualization, allowing users to explore and filter data by various facets.\"",
    "\"Generate Python code that implements a learnable edit distance algorithm using PyHacrf, a library for probabilistic inference and learning in graphical models.\"",
    "\"Generate Python code that uses the `contextlib` module to create a context manager that captures C-level output, similar to the `capture` function from the `unittest.mock` module, but for use outside of unit tests.\"",
    "\"Generate Python code that uses the `xml.etree.ElementTree` module to parse an XML file and convert its elements into Python objects.\"",
    "\"Generate Python code that uses the \\\"deprecated\\\" module to warn about deprecated method calls, similar to how the \\\"warnings\\\" module is used in the package description.\"",
    "\"Generate Python code that imports the necessary libraries, loads the time series data, preprocesses the data using appropriate methods such as normalization, filters out any noise, performs anomaly detection using statistical methods such as mean squared error or seasonal decomposition, and visualizes the results using a suitable library such as Matplotlib or Seaborn.\"",
    "\"Generate Python code that imports the Freetype library and uses it to render fonts in a graphics environment, allowing for the creation of high-quality font rendering with anti-aliasing and hinting.\"",
    "\"Generate Python code that creates a Django library for Heroku apps by defining a set of views, templates, and models that can be used to build and deploy web applications on Heroku's cloud platform.\"",
    "\"Generate Python code that imports the splunklib library and uses it to send log messages to a Splunk server, using the Splunk server's HTTP Event Collector endpoint to submit the logs.\"",
    "\"Generate Python code that uses OpenCV to automate testing on Android devices, including taking screenshots, simulating user input, and checking app behavior.\"",
    "\"Generate Python code that downloads files from URLs and saves them to the file system, with optional support for authentication and cookies.\"",
    "\"Generate Python code that imports the necessary libraries and creates a DartsClone object to interact with the Darts Clone API.\"",
    "\"Generate Python code that uses the `requests` library to send HTTP requests to a domain, IP address, or URL and checks the response status code to determine availability, while also using regular expressions to validate the format of the input string as either a domain, IP address, or URL.\"",
    "\"Generate Python code that imports the requests library and uses it to make API calls to the Taskcluster service, allowing users to create, read, update, and delete tasks, as well as retrieve task results.\"",
    "\"Generate Python code that uses the OpenTelemetry API to instrument Psycopg2 database operations, providing detailed performance metrics and distributed tracing for PostgreSQL databases.\"",
    "\"Generate Python code that implements OpenTracing extensions for gRPC using the OpenTracing API, allowing for seamless distributed tracing of gRPC requests and responses in a microservices architecture.\"",
    "\"Generate Python code that imports the necessary libraries and creates a polling function with configurable options, such as poll frequency, timeout, and callback functions for response handling.\"",
    "\"Generate Python code that takes an integer input and returns its equivalent Roman numeral, using the standard Roman numeral symbols (I, V, X, L, C, D, M) and formatting rules (e.g., \\\"IV\\\" for 4, \\\"XC\\\" for 90).\"",
    "\"Generate Python code that creates a process executor for running tests, using the `concurrent.futures` module, which provides a high-level interface for parallelism and concurrent execution of callables, allowing for efficient testing and optimization of system resources.\"",
    "\"Generate Python code that imports the necessary modules for OpenStack deployment and configures the environment for privilege separation, using the least privileged approach possible.\"",
    "\"Generate Python code that imports the Django JSON widget package and uses it to easily edit the JSONField field in a Django application.\"",
    "\"Generate Python code that calculates the cosine distance between two vectors using the numpy library and returns the result as a float value.\"",
    "\"Generate Python code that imports the socket.io library and creates a client object to connect to a server, allowing for real-time communication and data exchange between the client and server.\"",
    "\"Generate Python code that implements a web framework plugin for API Spec using Flask or Django, which integrates API specification documentation and validation into the development workflow, allowing developers to easily document and test their APIs.\"",
    "\"Generate Python code that creates a command line interface (CLI) for interacting with Polyaxon, allowing users to easily manage and execute experiments, create and modify workflows, and visualize results.\"",
    "\"Generate Python code that imports the Pandas library, creates a user-friendly schema for validating data frames, and uses the schema to validate the data frame against the schema, raising an error if there are any validation issues.\"",
    "\"Generate Python code that imports the necessary modules for efficient IP address storage and lookup, such as `ipaddress` or `socket`, and creates a function or class that can store and retrieve IP addresses in an efficient manner.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Google Cloud Dataproc Metastore API client library, allowing interaction with a Hive metastore in a Google Cloud environment.\"",
    "\"Generate Python code that imports the required libraries, creates data arrays, and uses matplotlib to plot area-proportional two- and three-way Venn diagrams.\"",
    "\"Generate Python code that uses the py2lua library to embed a Lua interpreter in Python, allowing for seamless interaction between Python and Lua code, and leveraging the performance benefits of LuaJIT.\"",
    "\"Generate Python code that imports the necessary libraries, defines a class for a neural network, and implements the forward pass method using PyTorch.\"",
    "\"Generate Python code that uses the Apache Tika library to extract useful information from various types of files, including Word documents, PDFs, images, and audio files.\"",
    "\"Generate Python code that imports the necessary libraries and calculates the LPIPS similarity metric between two images using the provided image paths.\"",
    "\"Generate Python code that implements a common code library for Amundsen, including functions for data processing, data transformation, and data visualization, with a focus on efficiency and modularity.\"",
    "\"Generate Python code that interfaces with CAN bus devices and performs actions such as sending and receiving messages, parsing data, and controlling devices on the bus.\"",
    "\"Generate Python code that creates a locked-down AWS IAM policy using the `boto3` library, including policies for EC2, S3, and CloudWatch, with minimal permissions necessary for an application to function, and including a custom resource-based policy for an Amazon EFS file system.\"",
    "\"Generate Python code that imports Flask, MongoEngine, and WTF, and creates a Flask application with MongooEngine support and WTF model forms.\"",
    "\"Generate Python code that imports the necessary modules for creating DAGs in Apache Spark using the Dagster framework, including dagster.core, dagster.DAG, and spark.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `datetime` module to compare the distance between two datetime objects, such as dates, timestamps, or datetime objects, using a specified distance metric, such as absolute difference, relative difference, or Kullback-Leibler divergence.\"",
    "\"Generate Python code that parses and manipulates structured data for TensorFlow using the `struct2tensor` package:\\n```python\\nimport struct2tensor\\n\\n# Load a structured data file\\ndata = struct2tensor.load(\\\"data.csv\\\")\\n\\n# Convert the data into a TensorFlow dataset\\ndataset = struct2tensor.convert(data, feature_spec=[\\\"feature1\\\", \\\"feature2\\\"])\\n\\n# Manipulate the data using TensorFlow operations\\ndataset = dataset.map(lambda x: x + 1)\\ndataset = dataset.batch(32)\\n\\n# Save the manipulated data to a new file\\nstruct2tensor.save(dataset, \\\"output.csv\\\")\"",
    "\"Generate Python code that uses the `hyperv` module to interact with Hyper-V virtual machines and networks in an OpenStack environment, similar to the `openstack-python-hyperv` package.\"",
    "\"Generate Python code that imports the random module and uses its randint function to create a string of random characters, such as \\\"\\\".join([random.randint(0, 25) for _ in range(10)])\\\"\"",
    "\"Generate Python code that imports the necessary libraries and uses peak detection algorithms to identify peaks in 1D data, such as maxima or minima, within a specified threshold or tolerance.\"",
    "\"Generate Python code that uses the tweepy library to interface with the Twitter API, allowing users to send Tweets, follow accounts, and track hashtags from the command line.\"",
    "\"Generate Python code that implements a list-like type with better asymptotic performance and similar performance on small lists:\\n```\\nclass FastList(list):\\n   def __init__(self, *args, **kwargs):\\n       self.data = []\\n       for arg in args:\\n           self.data.append(arg)\\n       self.size = len(self.data)\\n   \\n   def append(self, value):\\n       if self.size == 0:\\n           self.data.append(value)\\n       else:\\n           self.data[self.size - 1] = value\\n       self.size += 1\\n   \\n   def insert(self, index, value):\\n       if index == self.size:\\n           self.append(value)\\n       else:\\n           self.data[index] = value\\n           self.size += 1\\n   \\n   def remove(self, index):\\n       del self.data[index]\\n       self.size -= 1\\n   \\n   def pop(self, index=None):\\n       if index is None:\\n           return self.data.pop()\\n       else:\\n         \"",
    "\"Generate Python code that imports the AKShare library and uses it to retrieve historical stock prices for a given ticker symbol.\"",
    "\"Generate Python code that uses the `xml.etree.ElementTree` module to parse a JSON document and extract data using XPath expressions, similar to the `jsonpath` package.\"",
    "\"Generate Python code that creates a parameter configuration space using a dictionary or list comprehension, allowing for the manipulation of various parameters and their possible values, which can then be used for automated algorithm configuration and hyperparameter tuning.\"",
    "\"Generate Python code that implements an async JSON-RPC 2.0 protocol and server using asyncio, allowing for asynchronous handling of remote procedure calls and responses.\"",
    "\"Generate Python code that imports the necessary libraries and creates a class to wrap the NVIDIA Management Library, providing a Pythonic interface for managing NVIDIA GPUs on Linux systems.\"",
    "\"Generate Python code that uses the Fabric library to execute commands remotely on multiple servers and perform deployment tasks.\"",
    "\"Generate Python code that imports the `ujson` module and provides typing stubs for it, allowing for more robust type checking and improved code readability.\"",
    "\"Generate Python code that uses the ast module to parse source code and check for consistent quoting styles, raising a PyLint warning for any inconsistencies found.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that takes in a list of intervals and returns the overlap between them.\"",
    "\"Generate Python code that imports the requests library and uses it to make a GET request to the specified URL, then prints the response status code and content.\"",
    "\"Generate Python code that imports and uses the neutron module to share routing between tenants and provide network services, such as load balancing and firewalling, in a multi-tenant environment.\"",
    "\"Generate Python code that parses a given HTML file or string and extracts the readable text content, using BeautifulSoup and Requests libraries for fetching the HTML content, and featuring Python 3 support.\"",
    "\"Generate Python code that implements an AWS Lambda function using the ASGI protocol to process requests from an Application Load Balancer, utilizing the aiohttp library for asynchronous HTTP request handling and the awscli library for AWS API interactions.\"",
    "\"Generate Python code that implements the CRC-32C algorithm in hardware and software using the binascii module for computing the checksum in software and utilizing a hardware implementation from a library like pyparallel or numba for optimum performance.\"",
    "\"Generate Python code that implements a spell checker using the NLTK library and allows users to interactively correct misspelled words in a document, similar to the Sphinx spelling extension.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Feast client to interact with a Feast server, including authentication and configuration options.\"",
    "\"Generate Python code that uses the Draft.js API to extract the raw ContentState of a rich text document, and then converts it to HTML using a library like BeautifulSoup or PyQuery.\"",
    "\"Generate Python code that imports the Zenroom library and creates a Zenroom object to interact with the Zenroom server, allowing users to create, read, update, and delete data entities within the Zenroom platform.\"",
    "\"Generate Python code that imports and uses the `deb` module to interact with Debian packages, such as creating a new package, modifying an existing package, and installing packages from the Debian repositories.\"",
    "\"Generate Python code that imports the necessary libraries, retrieves current foreign exchange rates from an API, converts currencies based on user input, and displays the converted amount in the desired currency.\"",
    "\"Generate Python code that implements a scalable, probabilistic data linkage algorithm to connect records across multiple datasets, utilizing efficient data structures and parallel processing techniques to minimize computational time.\"",
    "\"Generate Python code that implements a Circuit Breaker pattern, which protects against cascading failures in distributed systems by using a toggle switch to control the flow of traffic to a service, automatically opening or closing the circuit based on failure rates and time limits.\"",
    "\"Generate Python code that imports the Twitter API and common logging libraries, sets up a logging handler to write logs to a file, and uses the Twitter API to post updates to a user's Twitter account.\"",
    "\"Generate Python code that imports the necessary libraries and implements case weighted L2 regularized logistic regression using scikit-learn's LogisticRegression class with the AlgebraicRegularization class to incorporate the weighted L2 regularization term.\"",
    "\"Generate Python code that wraps the Twitter API using the `optparse` library to parse command-line options, allowing users to easily use the Twitter API from the command line.\"",
    "\"Generate Python code that uses the Sphinx renderer to display markdown tables in documentation.\"",
    "\"Generate Python code that uses the `ddl` library to parse SQL and dialect-specific DDL files to extract column information, including data types, default values, primary keys, and other entities, and convert it into JSON or Python dictionaries.\"",
    "\"Generate Python code that implements a stream processing system using Polyaxon's deployment and serving tools, including streams, sandbox, ML-API, and spaces.\"",
    "\"Generate Python code that reads and writes WARC (Web Archive) files, including ARC (Internet Archive) format, with efficient streaming capabilities for working with large archives.\"",
    "\"Generate Python code that uses natural language processing and web scraping techniques to discover and extract articles from online sources, simplified for easy use and integration into various applications.\"",
    "\"Generate Python code that uses the `requests` library to interface with the Shodan API, allowing users to search for IP addresses, domains, and CVEs, and retrieve information about them, including metadata, network reconnaissance results, and vulnerability scans.\"",
    "\"Generate Python code that converts between different document formats, such as Markdown, LaTeX, and HTML, using the pandoc library.\"",
    "\"Generate Python code that validates RFC 3986 URLs using the `urllib.parse` module, specifically checking for proper syntax and scheme, and raising a `ValueError` if invalid.\"",
    "\"Generate Python code that imports the necessary libraries and creates a thread-safe, minimalistic, and pythonic RabbitMQ client library, supporting common messaging patterns and providing easy-to-use APIs for sending and receiving messages.\"",
    "\"Generate Python code that imports the necessary modules and creates a basic QWebEnginePage instance, demonstrating the integration of the Qt WebEngine framework with Python.\"",
    "\"Generate Python code that imports the C++ library for BLS signatures and creates a Python wrapper module to interface with the C++ implementation, allowing users to perform BLS signature operations from Python.\"",
    "\"Generate Python code that imports the termcolor module and creates a typing stub for it using the `typing` module, allowing for static type checking of termcolor functions without actually calling them.\"",
    "\"Generate Python code that creates a custom Django application that monkey-patches various aspects of the Django framework to remove annoyances and improve developer experience, such as modifying the built-in authentication system to allow for more flexible password hashing, implementing a custom cache backend that provides more advanced caching capabilities, and adding support for a wider range of database backends.\"",
    "\"Generate Python code that imports the chia-vdf library, which provides an efficient implementation of the Verifiable Delay Function (VDF) concept, and uses it to verify the integrity and correctness of data stored on disk.\"",
    "\"Generate Python code that creates a configuration file parser for managing project settings, allowing users to access and modify settings using a convenient API.\"",
    "\"Generate Python code that imports the necessary libraries and performs efficient similarity searches and clustering of dense vectors using an appropriate algorithm, such as k-d trees or ball trees, and returns the cluster labels or a matrix of similarities between the input vectors.\"",
    "\"Generate Python code that uses the Microsoft Interpret Extensions SDK to enable natural language processing and AI capabilities in your Python applications, including sentiment analysis, entity recognition, and language understanding.\"",
    "\"Generate Python code that imports the necessary libraries and classes to interact with IBM Cloud Services, such as `ibmc_sdk` and `ibm_cloud_sdk`, and includes functions to perform common tasks like authentication, service management, and resource retrieval.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a client object for interacting with the Google Cloud Dataplex API, such as `from google.cloud import dataplex_v1; client = dataplex_v1.DataplexClient()`\"",
    "\"Generate Python code that creates a browser-based frontend to gdb, allowing users to debug C, C++, Go, or Rust programs using a web interface.\"",
    "\"Generate Python code that uses the `requests` library to download updated GeoIP2 databases from MaxMind and replaces the old database files with the new ones, then refreshes the cache for the changes to take effect.\"",
    "\"Generate Python code that uses the PyPDF2 library to convert images to PDF by directly inserting JPEG data into a PDF document, allowing for efficient batch processing of image files.\"",
    "\"Generate Python code that implements a docutils backend for pybtex, allowing users to convert LaTeX documents to HTML5 using pybtex's parsing capabilities and docutils' rendering functionality.\"",
    "\"Generate Python code that implements a portable, distributed, remote execution and configuration management system using the SaltStack library, which provides a flexible and scalable way to manage infrastructure, applications, and services across diverse environments.\"",
    "\"Generate Python code that uses Django's built-in image processing tools to automatically process images associated with Django models, such as resizing and cropping, before they are saved to the database.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API key for interacting with the OpenAI API, similar to how the `openai` package does it.\"",
    "\"Generate Python code that imports the necessary modules, sets up a mock Redis connection, and defines a function that takes a Redis connection object as an argument and returns a mocked response.\"",
    "\"Generate Python code that uses the `yaml` and `json` modules to read and write YAML and JSON files, and the `argparse` module to parse command-line arguments for processing YAML and JSON data using command-line tools.\"",
    "\"Generate Python code that creates an interactive command-line interface for managing Wi-Fi networks, including connecting to existing networks, creating new networks, and configuring network settings.\"",
    "Generate Python code that imports the necessary libraries for data analysis, including NumPy, Pandas, Matplotlib, and Seaborn.",
    "Generate Python code that loads and cleans a dataset, handling missing values and data type conversions as needed.",
    "3. Generate Python code that performs exploratory data analysis (EDA) on a given dataset, including summary statistics, visualization, and feature engineering.",
    "Generate Python code that implements supervised learning algorithms, such as linear regression, decision trees, random forests, and support vector machines, on a given dataset.",
    "Generate Python code that implements unsupervised learning algorithms, such as k-means clustering and principal component analysis, on a given dataset.",
    "Generate Python code that performs model evaluation and selection, including cross-validation, grid search, and hyperparameter tuning.",
    "Generate Python code that deploys machine learning models to a production environment, including model serving and prediction APIs.",
    "Generate Python code that performs data storytelling, including data",
    "\"Generate Python code that imports the necessary modules and configurations to establish a connection to Datadog, create a Datadog client, and use it to send metrics and log data to Datadog from an Apache Airflow task.\"",
    "\"Generate Python code that imports the Pyramid web framework and extends it to provide a basic server component for the OEReb project, using the `pyramid_oereb` package.\"",
    "\"Generate Python code that imports the necessary libraries for probabilistic modeling and inference, such as NumPy and SciPy, and creates classes and functions for building and manipulating probability distributions, performing Bayesian inference, and visualizing results.\"",
    "\"Generate Python code that creates a directory containing a isolated Python environment, including all necessary dependencies, using `conda create --name myenv --directory /path/to/myenv`.\"",
    "\"Generate Python code that defines a module with utility functions for monkey-patching other Python code, including a function to modify the behavior of existing functions and another function to add new functionality to existing classes.\"",
    "\"Generate Python code that uses Boto3 to retrieve IAM policies and role information, performs least privilege assessments, and generates a risk-prioritized HTML report using Jinja templates.\"",
    "\"Generate Python code that implements a hierarchical nearest-neighbor search algorithm for efficient similarity search in high-dimensional spaces, using a tree-like data structure to organize points and facilitate searches.\"",
    "\"Generate Python code that imports and uses the statsmodels library to perform various time series data mining tasks, such as statistical modeling, forecasting, and anomaly detection.\"",
    "\"Generate Python code that uses the `unittest` module to create test cases for a PyMySQL module, including test cases for connection, query, and error handling.\"",
    "\"Generate Python code that implements an encrypted content encoding system for HTTP requests and responses, using a symmetric key block cipher and a hash function for message authentication.\"",
    "\"Generate Python code that implements fast phonetic algorithms for converting words into phonetic codes, such as Soundex, Metaphone, and NYSIIS, and performs operations like phonetic matching and distance calculations.\"",
    "\"Generate Python code that reads and writes PLY files using the `ply` module, which provides a simple and efficient way to read and write Polygon File Format (PLY) data.\"",
    "\"Generate Python code that implements a command-line interface for optimizing machine learning models using techniques such as feature engineering, hyperparameter tuning, and model selection, with support for various machine learning libraries and frameworks.\"",
    "\"Generate Python code that writes a simple TOML file with a single key-value pair, where the key is \\\"name\\\" and the value is \\\"Alice\\\".\"",
    "\"Generate Python code that parses a binary package description and extracts the dependencies listed in the package description, using the `ast` module to parse the package description and the `re` module to search for dependency patterns.\"",
    "\"Generate Python code that uses the `fsspec` and `dask` libraries to access and manipulate data stored in an Azure Data Lake Gen1 storage account, including reading and writing data to files and directories, creating and deleting files and directories, and listing the contents of directories.\"",
    "\"Generate Python code that implements a Laravel-style collection class with a pipeline programming interface, allowing for method chaining and flexible processing of data through a series of pipes.\"",
    "\"Generate Python code that creates an Azure profile using the `azure config` command, sets the default subscription and resource group, and lists the available profiles.\"",
    "\"Generate Python code that imports the required libraries, sets up a Pyramid route, and uses the `transaction.join()` method to join the active transaction for the request.\"",
    "\"Generate Python code that utilizes boto3 to provide assistance for any API in any Integrated Development Environment (IDE) and keeps the code up to date.\"",
    "\"Generate Python code that implements a RESTful API for the Django authentication system, including endpoints for registering, logging in, and logging out users, using Django's built-in authentication module and the `django.urls`, `django.views`, and `django.http` modules.\"",
    "\"Generate Python code that creates an asynchronous web framework using async/await syntax, supporting RESTful APIs, WebSocket connections, and WebSockets-over-TCP.\"",
    "\"Generate Python code that extends the Sphinx documentation generator to support rendering OpenStack-specific documentation, including a custom theme and layout.\"",
    "\"Generate Python code that imports the necessary modules, defines a Django model, and uses the elasticsearch-dsl-py library to create an Elasticsearch index and map the Django model to it.\"",
    "\"Generate Python code that creates an integrated development environment for Apache Airflow using a GUI-based code editor and file manager, allowing users to write, edit, and manage Airflow DAGs and supporting files in a user-friendly interface.\"",
    "\"Generate Python code that imports and uses the `recaptcha` library to create a custom form field/widget for Django, which validates user input by checking it against the Google reCAPTCHA service.\"",
    "\"Generate Python code that imports the necessary modules and defines a Dagster framework solid and resource component for AWS, similar to the `aws_ec2` module in the `dagster-awesome-cards` library.\"",
    "\"Generate Python code that imports the necessary libraries and creates a basic GUI window using the Tkinter library, which can run on desktop, mobile, and embedded platforms.\"",
    "\"Generate Python code that uses the `airflow` and `yaml` modules to read YAML files containing DAG definitions and creates corresponding DAG objects in Airflow, allowing for dynamic modification of the DAG structure without having to manually modify the DAG code.\"",
    "\"Generate Python code that uses the YUI Compressor library to compress CSS files, similar to the YUI CSS compression algorithm.\"",
    "Generate Python code that implements a custom data structure for efficiently storing and querying large amounts of data.",
    "Create a Python module that provides additional functionality to the built-in collections module, such as a customizable dictionary or a specialized list class.",
    "Develop a Python package that enhances the standard library's support for regular expressions by adding new syntax features or improving performance.",
    "Write a Python program that integrates with the operating system to provide a custom command-line interface for performing common tasks more efficiently.",
    "Design a Python framework that simplifies the process of building web applications by providing a set of reusable components and tools.",
    "Generate Python code that creates a custom GUI toolkit that is optimized for building high-performance, visually appealing user interfaces.",
    "Build a Python package that extends the capabilities of the popular NumPy and Pandas libraries for scientific computing and data analysis.",
    "Write a Python module that provides a simple and intuitive API for interacting with popular databases, allowing developers to easily perform CRUD operations.",
    "\"Generate Python code that imports the necessary libraries and defines functions to calculate fiscal year, fiscal quarter, and fiscal month from a given date, as well as determining the number of days in a fiscal year, quarter, or month.\"",
    "\"Generate Python code that imports the necessary libraries, loads the data, and applies the Fisher-Jenks algorithm to compute natural breaks in the data.\"",
    "\"Generate Python code that imports the `requests` library and uses it to send a GET request to a GraphQL endpoint, parsing the response as a JSON object and returning the data as a Python dictionary.\"",
    "\"Generate Python code that uses regular expressions to find all dates, times, emails, phone numbers, links, emails, IP addresses, prices, Bitcoin addresses, and street addresses in a given string.\"",
    "\"Generate Python code that imports the VTK library and creates a 3D renderer for displaying scientific data.\"",
    "\"Generate Python code that uses the str.find() method and the re module to search for specified strings or words in a given text, leveraging the optimized performance of the C implementation for efficiency.\"",
    "\"Generate Python code that uses the `coverage` module to calculate the coverage of a project and creates badges for different platforms (GitHub, Travis CI, AppVeyor, CircleCI) using the `badges` module.\"",
    "\"Generate Python code that imports the agate-sql module and uses it to add SQL read/write support to an Agate data frame.\"",
    "\"Generate Python code that uses the `databricks` library to create and run tests for Notebooks on Databricks clusters, simulating user interactions and verifying expected output.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Linux input handling subsystem to capture keyboard presses and simulate mouse clicks.\"",
    "\"Generate Python code that imports the requests library and sends a GET request to the Google Trends API to retrieve the top 10 search trends for a given date range, then prints the trending searches in descending order.\"",
    "\"Generate Python code that uses the `xmltodict` library to parse an XML template file, replaces placeholders with values from a dictionary, and produces a compiled HTML file.\"",
    "\"Generate Python code that creates a package manager that can create, share, install, and manage reusable packages of Python code.\"",
    "\"Generate Python code that creates a custom authentication backend for Django that allows superusers to login as other users, using the built-in request object and Django's built-in authentication system.\"",
    "\"Generate Python code that uses the PySpark module to create a spark context, load data into a DataFrame, and perform various data processing operations such as filtering, mapping, and saving the results to a file.\"",
    "\"Generate Python code that integrates Select2 into a Django application, allowing users to search and select items from a database table, using the Select2 widget in forms and templates.\"",
    "\"Generate Python code that exports Prometheus metrics from Starlette applications using the `starlette.prometheus` module, which provides a simple way to instrument Starlette apps with Prometheus metrics.\"",
    "\"Generate Python code that reads a JSON file, removes unnecessary characters and whitespace, and outputs a minified version of the JSON data, using C/C++ style comments to document the code.\"",
    "\"Generate Python code that imports the necessary libraries and creates a functional Gmail client that can send emails, view email threads, mark messages as read, and search for specific emails using imapclient library.\"",
    "\"Generate Python code that installs Apache/mod_wsgi using a simple script that automates the installation process, including downloading and configuring the necessary packages, setting up the virtual environment, and enabling mod_wsgi in the Apache server.\"",
    "\"Generate Python code that imports the necessary libraries for high performance graph data structures and algorithms, such as NumPy and SciPy, and creates an adjacency matrix and adjacency list representation of a graph, allowing for efficient manipulation and querying of the graph data structure.\"",
    "\"Generate Python code that imports the requests library and uses it to make API calls to the Authy API to perform various tasks such as creating a new account, generating a token, and sending a verification code.\"",
    "\"Generate Python code that imports the necessary libraries and uses the pyperclip module to copy and paste text between different platforms, including Windows, Mac, and Linux.\"",
    "\"Generate Python code that uses the TensorFlow API to convert a trained TensorFlow model into an ONNX format, allowing for deployment on platforms that support ONNX models.\"",
    "\"Generate Python code that uses the gobject-introspection library to provide bindings for GObject-based libraries, allowing developers to easily interact with GLib and other GNOME technologies in their Python applications.\"",
    "\"Generate Python code that uses the `re` module to parse string data, extracting specific information such as names, addresses, and phone numbers, and outputs a parsed dictionary containing the extracted data.\"",
    "\"Generate Python code that encodes and decodes vector tiles using the Mapbox Vector Tile format, allowing for efficient storage and transmission of geospatial data.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3.STS 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\\n```python\\nfrom typing import Callable, Dict, List, Optional, Tuple\\nfrom botocore.client import BaseClient\\nfrom boto3.s3 import S3Client\\nfrom boto3.sts import STSClient\\n\\ndef get_credentials(profile: str) -> Dict[str, str]:\\n   credentials = {}\\n   session = Session()\\n   session.load(profile)\\n   credentials['access_key'] = session.access_key_id\\n   credentials['secret_key'] = session.secret_access_key\\n   return credentials\\n\\ndef assume_role(role_arn: str, role_session_name: str, **kwargs: Any) -> None:\\n   sts = STSClient(aws_access_key_id=credentials['access_key'], aws_secret_access_key=credentials['secret_key'])\\n   response = sts.assume\"",
    "\"Generate Python code that implements the SimHash algorithm for computing similarities between two strings, including hash function, similarity calculation, and thresholding for defining near duplicates.\"",
    "\"Generate Python code that imports the requests library and uses it to make an API request to the Civis Platform API, authenticating with a provided API key or username and password, and parsing the JSON response into a Python dictionary for further analysis and manipulation.\"",
    "\"Generate Python code that imports the `packaging` library, creates a dictionary of version information using the `packaging.version` function, updates the version number in the dictionary based on user input, and then updates the package file with the new version number using the `packaging.PackFile` function.\"",
    "\"Generate Python code that uses the OpenTracing API to instrument traces of a program's execution, allowing for the creation, propagation, and reporting of tracer instances, and providing an interface for customizing the behavior of the tracer.\"",
    "\"Generate Python code that imports the necessary modules and configures an Apache Spark connection to create a Spark session and execute a SQL query on a Spark DataFrame.\"",
    "\"Generate Python code that implements inter-process locks using the `multiprocessing` module and plays nice with Curator, a popular Python library for distributed locking and synchronization.\"",
    "\"Generate Python code that uses mypy to create type-checked stubs for gRPC APIs.\"",
    "\"Generate Python code that implements the Kalman Filter, Kalman Smoother, and EM algorithm using NumPy and SciPy libraries to perform linear regression and Gaussian probability distributions.\"",
    "\"Generate Python code that defines a class enum module with named constants for Django, similar to Django's built-in ENUM setting in settings.py, but as a reusable Python package.\"",
    "\"Generate Python code that uses the `docx` library to read and write Microsoft Word documents, allowing you to create templates with placeholders for dynamic data and use Python code to populate those placeholders and generate finalized documents.\"",
    "\"Generate Python code that implements a simple and secure encryption and decryption module for Python 2.7 and 3 using cryptography library.\"",
    "\"Generate Python code that imports the requests library and uses it to make API calls to coveralls.io to submit coverage data for a Python project.\"",
    "\"Generate Python code that bundles Gaia Composite Data Types (GCDT) files into a single file using the `gcdt-bundler` plugin for the Go CDT toolchain.\"",
    "\"Generate Python code that uses Django's built-in `StaticFilesStorage` class to serve production static files from a directory named `staticfiles` in the root of your project, and configures the storage path for collected static files to be stored in a directory named `collected_static` within the project root.\"",
    "\"Generate Python code that imports the necessary libraries and creates aFiles object to interact with the Files.com API, allowing users to upload, download, and manage files on the platform.\"",
    "\"Generate Python code that uses the `ast` module to analyze Python, Java, C/C++, JavaScript, Ruby, Swift, and Objective-C code without requiring C/C++ header files, and calculates metrics such as cyclomatic complexity number.\"",
    "\"Generate Python code that imports the required libraries, creates a connection to a database using DBAPI-2.0, executes a query, and retrieves the results.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3.Athena 1.34.0 service using mypy-boto3-builder 7.21.0, like this:\\n```python\\nfrom typing import List, Dict\\nfrom mypy_boto3_builder import TypeAnnotator\\n\\nannotator = TypeAnnotator(modules=[\\\"boto3\\\", \\\"boto3.athena\\\"])\\n\\n# Define type hints for Athena methods and properties\\nathena_service = annotator.get_type_hints(\\\"Athena\\\")\\n\\n# Print the generated type hints\\nprint(athena_service)\\n```\"",
    "\"Generate Python code that creates a Django model field that stores a bitfield (a compact representation of multiple boolean values) and provides methods for manipulating and querying individual bits within the field.\"",
    "\"Generate Python code that uses the Apache Spark backend to distribute jobs across a cluster, allowing for efficient parallel processing of large datasets.\"",
    "\"Generate Python code that uses the cryptography library to encrypt and decrypt files and streams in AES Crypt format (version 2).\"",
    "\"Generate Python code that filters Django views to perform simple arithmetic operations on incoming requests, such as adding a fixed value to a query parameter or multiplying a request body field by a constant factor.\"",
    "\"Generate Python code that imports the Flask framework, creates a simple login page, and authenticates users using a hardcoded dictionary of usernames and passwords.\"",
    "\"Generate Python code that creates a set of typing stubs for the Werkzeug library, allowing for more robust type checking in Python projects that use Werkzeug.\"",
    "\"Generate Python code that imports the necessary modules and creates an AWS Global Accelerator accelerator with the specified name, description, and attributes.\"",
    "\"Generate Python code that imports the asyncIO library and creates a class that inherits from the multiprocessing.Process class, overrides the run method, and uses asyncio.create_task to schedule the task to run in a separate process.\"",
    "\"Generate Python code that uses the `addresses` library to parse, normalize, and render postal addresses from raw address data, resulting in standardized and human-readable formats for display or further processing.\"",
    "\"Generate Python code that wraps the C++ Chia proof of space implementation, providing a Python interface for plotting, proving, and verifying the proofs.\"",
    "\"Generate Python code that imports the necessary libraries for asynchronous I/O operations and creates a function that uses the asyncio module to perform non-blocking reads and writes on a file, allowing for efficient handling of multiple simultaneous connections.\"",
    "\"Generate Python code that imports the necessary libraries and creates a basic neural network model for text classification using the open-source NLP research library and PyTorch.\"",
    "\"Generate Python code that simplifies the writing of REST APIs and extends them with additional protocols using the Flask web framework and its various extensions, such as Flask-RESTful and Flask-SocketIO.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a basic authentication for interacting with the Sailthru API.\"",
    "\"Generate Python code that imports the necessary libraries and sets up the environment for large-scale and high-performance training using FairScale, including installing and configuring the library, setting up data loading and preprocessing, and defining the model architecture and optimization algorithms.\"",
    "\"Generate Python code that implements a Django model field which displays a color picker in the admin interface, allowing users to select a color value that is stored in the database.\"",
    "\"Generate Python code that imports the necessary modules, parses a DBF file using agate-dbf, and extracts the data into a Pandas DataFrame.\"",
    "\"Generate Python code that imports the required packages, such as NumPy, SciPy, and Matplotlib, and uses them to implement a range of machine learning algorithms, including decision trees, random forests, support vector machines, and neural networks, to perform classification tasks on various datasets, and visualizes the results using confusion matrices and ROC curves.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API connection to interact with a backlog.\"",
    "\"Generate Python code that imports the aiohttp library and creates an asynchronous proxy connector using the aiohttp.ClientSession class, allowing for the sending of HTTP requests through a proxy server.\"",
    "\"Generate Python code that uses the Google Translate API to translate text from one language to another using a command line interface.\"",
    "\"Generate Python code that implements a fast and scalable distributed SCM system using the Git library, allowing users to manage and track changes to their codebase across multiple branches and repositories.\"",
    "\"Generate Python code that solves the problem of heuristically distributing weighted items to bins using the following approach:\\n\\n* Read in the data from a list, dictionary, list of tuples, or CSV file\\n* Define a function that takes in the item weights and bin capacities as input\\n* Use a heuristic algorithm such as the greedy algorithm or the nearest neighbor algorithm to distribute the items to the bins\\n* Output the final bin assignments and their corresponding total weight\\n\\nHere is an example of what the code might look like:\\n```\\ndef heuristic_bin_assignment(item_weights, bin_capacities):\\n   # Initialize empty lists to store the bin assignments and total weight\\n   bin_assignments = []\\n   total_weight = 0\\n   \\n   # Iterate through the items and assign them to the first available bin\\n   for item_weight in item_weights:\\n       # Find the first bin with enough capacity to hold the item\\n       for i in range(len(bin_capacities)):\\n           if bin_capacities[i] >= item_weight:\\n               # Add the item\"",
    "\"Generate Python code that imports the necessary modules and creates a Telegram client using the tgcrypto module for encryption.\"",
    "\"Generate Python code that imports the `uuid` module, generates a version 4 UUID using the `uuid.uuid4()` function, encodes it using base64 encoding with the `base64.b64encode()` function, and returns the resulting string.\\n\\nHere is an example of what the generated Python code could look like:\\n```\\nimport uuid\\nimport base64\\n\\ndef generate_base64_encoded_uuid():\\n   uuid_string = str(uuid.uuid4())\\n   encoded_string = base64.b64encode(uuid_string.encode()).decode()\\n   return encoded_string\\n```\"",
    "\"Generate Python code that imports the necessary modules, classes, and functions from the `apache-airflow-backport-providers-snowflake` package to use its functionality in an Apache Airflow DAG.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an interactive environment with async auto-updates and non-blocking cell execution using the IPython library.\"",
    "\"Generate Python code that uses the Oracle Cloud Infrastructure CLI to manage Oracle Cloud resources, including creating and managing virtual machines, networks, and storage volumes, using the oci-cli module; utilizing the commands and flags provided by the cli to interact with the Oracle Cloud Infrastructure API.\"",
    "\"Generate Python code that imports the necessary libraries and defines a shared API for binary quadratic model samplers, including functions for generating samples and calculating posterior summaries.\"",
    "\"Generate Python code that uses the Boto3 library to monitor an Amazon S3 bucket for new objects and send notifications to a specified Lambda function or SNS topic.\"",
    "\"Generate Python code that wraps Clang static code analysis tool and provides an interface to run Clang analyzers on C, C++, and Objective-C code.\"",
    "\"Generate Python code that implements a language server for the Language Server Protocol, providing syntax highlighting, code completion, and debugging capabilities for a variety of programming languages.\"",
    "\"Generate Python code that imports the necessary modules and defines a function that takes a callable object as an argument, returns a decorator that applies the retry logic to the decorated function.\"",
    "\"Generate Python code that uses the ` flask_babel` package to add i18n/l10n support to a Flask application, allowing for easy translation of strings and formatting of dates, numbers, and currencies for different languages and locales.\"",
    "\"Generate Python code that uses the `argparse` module to parse command-line arguments and generates documentation for the commands and options using Sphinx.\"",
    "\"Generate Python code that imports the necessary modules, defines a new assertion function that uses the `diff` module to highlight differences between expected and actual values in a colorful way, and displays the result in a console-friendly format.\"",
    "\"Generate Python code that uses the yanglib library to validate YANG models against the YANG schema, and convert YANG data to other formats such as JSON and XML.\"",
    "\"Generate Python code that implements a module for on-the-fly debugging and data extraction for applications in production, with features such as dynamic code execution, interactive debugging, and data exploration using various libraries like IPython and Pandas.\"",
    "\"Generate Python code that uses the Oslo VMware library to interact with VMware virtual machines, including creating, updating, and deleting virtual machines, as well as managing networks and storage.\"",
    "\"Generate Python code that imports the required modules, creates an AIOHTTP server with session support enabled, and handles user authentication using sessions.\"",
    "\"Generate Python code that imports the necessary libraries and creates an event source for AWS Lambda, allowing the user to specify the event source type, such as an S3 bucket or a DynamoDB table, and configure it according to their needs.\"",
    "\"Generate Python code that uses the pypcap library to capture and analyze network packets, allowing users to filter, search, and manipulate packet data.\"",
    "\"Generate Python code that sets up a debugger in PyCharm or PyDev, allowing you to step through your code line by line, inspect variables, and set breakpoints.\"",
    "\"Generate Python code that unpacks and repacks Android backups using the `zip` and `tar` modules, and the `android-backup-utils` library.\"",
    "\"Generate Python code that imports and uses the `playwright` library to automate web browsing and testing, using its simple API to perform various operations such as launching browsers, navigating to websites, filling out forms, clicking buttons, and verifying page content.\"",
    "\"Generate Python code that creates a CDK construct for an AWS Batch compute environment, including a job definition, a job queue, and a compute environment, using the AWS CDK library.\"",
    "\"Generate Python code that imports the Django settings module and provides a convenient way to access and modify settings values, such as database connections, authentication systems, and email configurations, in a centralized location.\"",
    "\"Generate Python code that creates a Flask API that allows users to register, login, and retrieve their personalized playlist based on their music preferences.\"",
    "\"Generate Python code that uses the `google-auth` and `google-api-python-client` libraries to authenticate with Google Drive API and export tables from a database to a Google Sheet.\"",
    "\"Generate Python code that creates a Flask-based GraphQL API using the graphql-python library, including a schema definition, resolvers, and a flask endpoint for querying the API.\"",
    "\"Generate Python code that imports the required modules and annotates the EventBridge service with type hints using mypy-boto3-builder.\"",
    "\"Generate Python code that implements a pure Python version of ROUGE-1.5.5, a popular natural language processing metric, using the Rouge library.\"",
    "\"Generate Python code that creates a command runner with debug capabilities, using the subprocess module to execute commands and the pdb module for debugging.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API connection to the LUSID platform using the LUSID API Python SDK, allowing users to interact with the LUSID database and perform various operations such as creating, reading, updating, and deleting data entities.\"",
    "\"Generate Python code that imports the necessary libraries for data manipulation and visualization, such as Pandas and Matplotlib, and creates a multi-tool interface for users to easily clean, transform, and visualize their data, with functionality for publishing data to various formats and platforms.\"",
    "\"Generate Python code that sends push notifications to mobile devices and browsers through Firebase Cloud Messaging (FCM) in Django using the following steps:\\n\\n1. Install the required packages: `pip install django-fcm`\\n2. Add the FCM API key and app ID to your Django settings file.\\n3. Create a Django view that sends a push notification to a user's device using the FCM API.\\n4. In the view, use the `django_fcm` library to send a message to the user's device.\\n5. Test the push notification by visiting a URL in your browser that triggers the view.\"",
    "\"Generate Python code that sets up a scientific computing environment with NumPy, SciPy, Matplotlib, and Pandas for data analysis and visualization, including a debugger and project explorer, using the conda package manager and Spyder IDE.\"",
    "\"Generate Python code that implements writable nested helpers for django-rest-framework's serializers, allowing developers to easily create and manipulate data in a flexible and efficient manner.\"",
    "\"Generate Python code that takes a string as input and returns a Unicode slug generated from that string using the `slugify` function, which replaces non-ASCII characters with their ASCII equivalent and converts all characters to lowercase.\"",
    "\"Generate Python code that imports PyTorch and defines a class `GaussianProcess` that implements the basic methods of a Gaussian process, such as `sample`, `log_prob`, and `predict`, using PyTorch tensors and autograd system for computation.\"",
    "\"Generate Python code that imports the necessary libraries and creates a unified framework for machine learning with time series data, including data preprocessing, feature engineering, model selection, training, validation, and forecasting.\"",
    "\"Generate Python code that creates a command-line interface for executing Cassandra Query Language (CQL) commands on a Cassandra cluster using the cassandra driver.\"",
    "\"Generate Python code that uses marshmallow3 to serialize data with annotations, like titles and descriptions, for a simple blog application.\"",
    "\"Generate Python code that reformats docstrings to adhere to PEP 257 using the `docstring` module, which provides functions for parsing and modifying docstrings according to PEP 257 guidelines.\"",
    "\"Generate Python code that creates a pipeline of data processing functions using the pipe() function from the funcy library, allowing for chaining together multiple functions in a modular and reusable way.\"",
    "\"Generate Python code that uses ctypes to implement an inet_pton and inet_ntop function for Windows, allowing for the conversion of IP addresses between human-readable strings and binary data.\"",
    "\"Generate Python code that imports the enum module and creates a stub file for enum34, containing empty definitions for all enumerations and values defined in the original package.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the ObjectMapper class, allowing for the automated mapping of objects between different layers of a project.\"",
    "\"Generate Python code that imports the necessary libraries and uses agate-excel to read an Excel file (xls or xlsx) and extract its data, such as sheet names, row and column counts, and cell values.\"",
    "\"Generate Python code that imports the necessary libraries for mouse, keyboard, and ASCII animation functionality, such as `pyautogui`, `pynput`, and `ASCIIArt`.\"",
    "\"Generate Python code that imports the wsgiref module, creates a WSGIServer, and uses it to serve static files from a directory.\"",
    "\"Generate Python code that parses a CSS file and returns a dictionary where keys are CSS selectors and values are their corresponding CSS properties.\"",
    "\"Generate Python code that imports the necessary libraries and uses the pandas library to read_csv, convert_objects, drop_duplicates, and pivot_table functions to extract, transform, and load tables of data from a CSV file.\"",
    "\"Generate Python code that imports the curses module, creates a cursor object, and uses its hide() and show() methods to toggle the visibility of the cursor.\"",
    "\"Generate Python code that creates a DNS client that can perform DNS lookups, zone transfers, and DNSSEC validation using the PyDNS library.\"",
    "\"Generate Python code that reads a text file and extracts all adjectives, nouns, and verbs, then prints them in separate lists.\"",
    "\"Generate Python code that imports the `requests` library and adds async-await support using the `asyncio` library, allowing you to write asynchronous HTTP requests that can be awaited in your code.\"",
    "\"Generate Python code that uses the `setuptools` module to create a setup script for a Python project, including support for installing dependencies and distributing the package to PyPI.\"",
    "\"Generate Python code that parses a HAProxy configuration file using the `configparser` module, extracting relevant settings and data structures such as frontend and backend servers, listeners, and health checks.\"",
    "\"Generate Python code that uses the pyarrow library to connect to a Redshift database, retrieve data, and convert it into a Pandas DataFrame, and also use the pandas-to-sql library to write the DataFrame back to Redshift.\"",
    "\"Generate Python code that imports the necessary modules for automated testing, sets up test cases, and runs them with the ability to mock dependencies and assert expected results.\"",
    "\"Generate Python code that imports the required libraries and uses the `glob` module to search for files matching a specified pattern in a given directory, similar to the `re` module.\"",
    "\"Generate Python code that interfaces with eBay's API to perform various tasks such as listing items, managing inventory, and retrieving order information using the eBay SDK for Python.\"",
    "\"Generate Python code that creates a Flask API with typing hints for parameters and return types, using the `typing` module and the `Flask` framework.\"",
    "\"Generate Python code that imports the necessary modules, defines a generic API for dispatching tasks to Pyro backends, and implements the logic for sending tasks to the appropriate backend based on the task type.\"",
    "\"Generate Python code that creates a Flask API with a Swagger UI blueprint, allowing users to interactively explore and test the API endpoints.\"",
    "\"Generate Python code that uses the SWIG tool to create Python wrappers for C/C++ libraries, allowing developers to access and use the libraries' functions and data types in their Python applications.\"",
    "\"Generate Python code that imports the Django framework and creates a new Django application, then uses the watchdog library to monitor the file system for changes and updates the status of the backing services accordingly.\"",
    "\"Generate Python code that imports the urlparse and re modules, parses a given URL using urlparse.urlparse, splits the path component into segments using re.split, and returns a dictionary containing the parsed components.\"",
    "\"Generate Python code that imports json and numpy modules, parses a JSON-like string into a NumPy array, performs operations on the array using NumPy-like idioms, and then dumps the result back to a JSON-like string.\"",
    "\"Generate Python code that instruments URLlib3 requests using OpenTelemetry's API for distributed tracing and monitoring.\"",
    "\"Generate Python code that uses the OpenTelemetry library to instrument an aiohttp client, allowing for the collection of performance metrics and distributed traces for incoming requests and outgoing HTTP requests.\"",
    "\"Generate Python code that uses a mocking library such as unittest.mock to replace real objects with fake ones during testing, allowing for isolated unit tests and more efficient test execution.\"",
    "\"Generate Python code that implements a function decorator similar to functools.singledispatch, but instead of dispatching on function names, it dispatches on values.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an access token for the Facebook Ads API SDK, allowing you to create and manage Facebook ad campaigns programmatically.\"",
    "\"Generate Python code that imports the requests library and uses it to send HTTP requests to the USPS API to retrieve information such as shipping rates, track packages, and validate addresses.\"",
    "\"Generate Python code that imports the necessary modules and defines a function that uses multiprocessing to run a given function in parallel, similar to the way the multiprocessing package works in Python 3.\"",
    "\"Generate Python code that establishes a connection to Xiaomi's cloud services and allows for authentication, data transfer, and control of Xiaomi devices using their official API.\"",
    "\"Generate Python code that imports the asyncio module and creates an event loop to manage background tasks, allowing for efficient scheduling and handling of multiple jobs simultaneously.\"",
    "\"Generate Python code that imports the schedule module and creates a scheduler object to schedule tasks at specific times or intervals, allowing for flexible and efficient automation of repetitive tasks.\"",
    "\"Generate Python code that uses the `dis` module to decompile byte-code files from different versions of Python into their original source code, allowing for cross-version code analysis and debugging.\"",
    "\"Generate Python code that creates a curses-like terminal wrapper with colored strings using the `termcolor` library.\"",
    "\"Generate Python code that imports the necessary modules and creates a DynamoDB client using the AWS SDK for Python, similar to the Java-based DynamoDB client from AWS Labs.\"",
    "\"Generate Python code that imports the required packages for schema validation using Tentaclio, such as `tentaclio` and any additional dependencies, and sets up the necessary configurations for validating data against a schema in an S3 bucket.\"",
    "\"Generate Python code that implements a Sentry component for Scrapy, which logs errors and exceptions encountered during web scraping to the Sentry platform for error tracking and analysis.\"",
    "\"Generate Python code that imports the necessary libraries for working with Gaussian processes, such as NumPy and SciPy, and creates a function for performing Bayesian non-parametric regression using a Gaussian process model.\"",
    "\"Generate Python code that imports the necessary modules and classes from the `apache-airflow-providers-sftp` package to connect to an SFTP server and perform file transfers.\"",
    "\"Generate Python code that imports the necessary libraries and creates a CFFI binding for libsecp256k1, allowing developers to use the library's functionalities in their Python applications, regardless of the platform they are running on.\"",
    "\"Generate Python code that imports the geolite2 library and uses it to retrieve GeoLite2 data from the MaxMind website.\"",
    "\"Generate Python code that imports the ruamel.yaml library and uses it to read a YAML configuration file, parsing the contents into a Python dictionary.\"",
    "\"Generate Python code that implements JOSE (JSON Web Tokens, JSON Web Signature, and JSON Web Encryption) using pycryptodome, including functions for generating and verifying tokens, signing and verifying signatures, and encrypting and decrypting data.\"",
    "\"Generate Python code that uses the re module to parse a CoNLL-U formatted string and convert it into a nested dictionary using split and groupdict methods.\"",
    "\"Generate Python code that cleans U.S. addresses according to USPS Pub 28 and RESO standards using a library like 'usaddress'.\"",
    "\"Generate Python code that posts log events to Slack via API using the `requests` library to send HTTP requests to the Slack API, the `logging` library to format log messages, and the `json` library to parse and generate JSON data.\"",
    "\"Generate Python code that uses the configparser module to read, modify, and write INI files, allowing for flexible configuration management in your applications.\"",
    "\"Generate Python code that implements a mercantile system with features for managing inventory, tracking orders, and generating invoices, using modular design principles for easy extensibility.\"",
    "\"Generate Python code that uses `icdiff` to enhance error messages in pytest assertions by running the command `pytest --Assertion-module=icdiff`.\"",
    "\"Generate Python code that imports the necessary modules and creates an instance of the Hdfs class, which can be used to interact with HDFS files and directories.\"",
    "\"Generate Python code that imports the necessary modules and creates a basic constraint solving problem (CSP) using the `python-constraint` module, specifying a finite domain for the variables and constraints.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the OpenMlApi class, which can be used to interact with the OpenML platform and perform various machine learning-related tasks, such as creating and managing datasets, models, and experiments, as well as retrieving metadata and other information.\"",
    "\"Generate Python code that imports the necessary modules, sets up a Django middleware to handle CORS requests, and configures the middleware in the Django settings file.\"",
    "\"Generate Python code that creates a module containing typing stubs for Pygments, including classes and functions that mimic the original Pygments API but with updated type hints and docstrings, using the `typing` module and following best practices for type hinting in Python.\"",
    "\"Generate Python code that defines a user-friendly interface for creating and manipulating objects, using the principles of Pythonic design to create an intuitive and easy-to-use API.\"",
    "\"Generate Python code that implements a Japanese morphological analysis engine, capable of breaking down words into their individual components, such as roots, prefixes, and suffixes, and performing various linguistic analyses on them.\"",
    "\"Generate Python code that imports the yara library and creates a Yara engine to scan files for matches against a set of rules, also it should allow to define custom plugins to extend the functionality of the engine.\"",
    "\"Generate Python code that creates a flexible, customizable automation framework for managing and executing complex build processes, using modular components and extensible architecture to accommodate diverse project requirements and workflows.\"",
    "\"Generate Python code that imports the necessary modules for using Mixer as a fixtures replacement, supporting Django ORM, SqlAlchemy ORM, Mongoengine ODM, and custom Python objects.\"",
    "\"Generate Python code that imports the necessary modules for the Appier Framework Extra Elements, including `appier.extra_elements` and any other required packages, and sets up the necessary variables and functions to use the framework's features.\"",
    "\"Generate Python code that takes a string as input and returns a slugified version of that string, using a customizable separator and allowing for flexible handling of digits and underscores, while maintaining a consistent style and format.\"",
    "\"Generate Python code that imports the CityHash and FarmHash libraries, providing binding functions for their respective hashing algorithms, allowing developers to easily integrate these popular hash functions into their Python applications.\"",
    "\"Generate Python code that creates a Celery Beat scheduler using Redis for persistent storage:\\n```\\nimport celery\\nfrom celery[ypes]: 'Task'\\nfrom celery_beat import *\\nfrom redis: 'Redis'\\n\\napp = Celery('tasks', broker='redis://localhost:6379/0')\\n\\n@task(name='my_task')\\ndef my_task():\\n   # Task code here\\n\\nschedule = Timedelta schedule({'interval': 1})\\n\\nredis_store = RedisStore(app, 'my_task', timeout=3600)\\n\\ncelery beat -A timer --schedule schedule my_task\\n```\"",
    "\"Generate Python code that minimizes a least squares objective function subject to bounds and constraints using the `scipy.optimize` library, specifically the `minimize` function with the `method` parameter set to 'SLSQP' (Scaled Lagrangian SQP) and the `bounds` and `constraints` parameters set to lists of tuples containing the lower and upper bounds and constraint functions, respectively.\"",
    "\"Generate Python code that imports the required libraries, sets up the HTML structure, and includes the necessary CSS and JavaScript files for a basic Bootstrap-based Sphinx theme, following the guidelines of the PyData community.\"",
    "\"Generate Python code that imports the argparse module and defines a custom action class called \\\"FileExistenceAction\\\" that checks if a file exists before adding it as an argument, and also defines a custom type class called \\\"comma_separated_ints\\\" that parses a comma-separated list of integers.\"",
    "\"Generate Python code that imports the required packages, installs BreadSticks, and sets up the development environment for working with BreadSticks.\"",
    "\"Generate Python code that implements a spell checker using a dictionary-based approach, where words are checked against a list of known words, and misspelled words are suggested corrections based on Levenshtein distance.\"",
    "\"Generate Python code that creates an Azure container registry using the `acr` command module, authenticates with Azure using the `az login` command, and then uses the `acr show` command to display information about the newly created registry.\"",
    "\"Generate Python code that imports the `mbed` module and uses its `enumerate_devices()` function to detect and list mbed-enabled devices connected to the host computer, printing the device names and serial numbers to the console.\"",
    "\"Generate Python code that uses the `requests` library to retrieve the package versions and version control data from a GitHub repository, parses the data using `xml.etree.ElementTree`, and prints the versions in a tabular format.\"",
    "\"Generate Python code that implements a Jupyter server extension to render LaTeX math expressions using MathJax, similar to the `mathjax` package.\"",
    "\"Generate Python code that imports the required libraries and uses the Giphy API to search for and retrieve GIFs based on user input, allowing users to browse and share GIFs.\"",
    "\"Generate Python code that uses the setuptools library to create a setup.py file for a package, including defining the name, version, and dependencies, and then uses the setup() function to install the package as an egg.\"",
    "\"Generate Python code that uses the AWS Encryption SDK to encrypt and decrypt files and directories via a command line tool.\"",
    "\"Generate Python code that uses the `conans` library to interact with the Conan C/C++ package manager, including creating and managing packages, querying the package index, and installing packages.\"",
    "\"Generate Python code that imports the necessary modules and uses the `Azure CLI` module to manage Azure resources, including creating, updating, and deleting resources, as well as managing resource groups and subscriptions.\"",
    "\"Generate Python code that imports the Pillow library and uses its Image.fromFile() method to load an image file, then resizes it using the Image.resize() method before saving it to a new file using the Image.save() method.\"",
    "\"Generate Python code that imports the Twitter API and creates a collection of tweets based on a specified query, using the `twitter.common` library.\"",
    "\"Generate Python code that uses the ast module to parse Python source files, and checks for compliance with PEP 257 conventions by verifying that docstrings adhere to the recommended format for documentation strings in Python.\"",
    "\"Generate Python code that imports the requests library and constructs an API client for interacting with the Intercom API, including authentication, data serialization, and error handling.\"",
    "\"Generate Python code that implements a modern, extensible build backend using the `pybuilder` library, including a default build configuration file (`build.py`) and a custom builder class (`my_builder.py`) that extends the `pybuilder.Builder` class and overrides the `build` method to add additional build steps.\"",
    "\"Generate Python code that implements complete two-factor authentication for Django by using the otplib library to handle time-based one-time passwords, storing user secrets securely, and providing a customizable login template.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an authentication token for the HubSpot API client.\"",
    "\"Generate Python code that creates a KML file with a single placemark using folium library.\"",
    "\"Generate Python code that implements a set of Russian-specific string utility functions, such as converting names to patronymic forms, generating grammatically correct ordinal numbers, and transliterating Russian words into English using the BGN/PCGN standard.\"",
    "\"Generate Python code that imports the required libraries to interact with xlsx and xlsm files, provides functions for reading, manipulating, and writing data in these formats, and offers an easy-to-use interface for users to work with spreadsheets.\"",
    "\"Generate Python code that creates a CLI tool for interacting with GitHub repositories, including features like creating, reading, updating, and deleting repository contents, as well as managing branches and commits.\"",
    "\"Generate Python code that sets up a Databricks environment for data engineering, data science, and data warehousing tasks, including configuring clusters, managing databases, and deploying models.\"",
    "\"Generate Python code that imports the necessary libraries and uses string manipulation functions to create and print out ASCII art trees.\"",
    "\"Generate Python code that creates a Kubernetes operator using the Kubernetes Operator Pythonic Framework (Kopf) to manage a specific domain resource, such as a MySQL database or a RabbitMQ message broker, including the necessary CRD files and custom controller logic.\"",
    "\"Generate Python code that parses an Amazon Resource Name (ARN) into its component parts, including the resource type, resource name, and any additional metadata included in the ARN.\"",
    "\"Generate Python code that uses the `allure` library to integrate Behave tests into a larger test suite, providing a simple way to organize and run acceptance tests along with other types of tests.\"",
    "\"Generate Python code that imports the necessary modules and annotates the function parameters and return types for working with AWS S3 transfers using the `s3transfer` library, providing code completion suggestions for the function calls.\"",
    "\"Generate Python code that imports the necessary libraries and converts universal time to an arbitrary timezone using a minimalistic approach.\"",
    "\"Generate Python code that imports the necessary libraries and allows the user to control YeeLight RGB bulbs by turning them on, off, adjusting their brightness, and changing their color using a simple interface.\"",
    "\"Generate Python code that reads a bash script, parses its syntax, and checks for compliance with PEP 8 style conventions, reporting any violations and suggesting corrections.\"",
    "\"Generate Python code that uses the usaddress library with Pandas to parse addresses, geocode them, and perform various address-related operations in an efficient and convenient way.\"",
    "\"Generate Python code that uses the subprocess module to execute the MS Access command-line utility \\\"ACE\\\" to read a .rdb file and convert its contents into a Pandas DataFrame.\"",
    "\"Generate Python code that uses the Ansible module to interact with AWS Route53, EC2, and S3 resources to manage infrastructure and application deployments, including creating and deleting resources, updating configurations, and performing rolling updates with minimal downtime.\"",
    "\"Generate Python code that imports the necessary libraries, connects to a database, creates tables for robot components, stores data in those tables, and retrieves data from those tables using SQL queries.\"",
    "\"Generate Python code that uses the `google-cloud-bigquery` and `google-auth` libraries to retrieve dependency compatibility status data from a database, authenticate with Google Cloud services, and store the data in a BigQuery table for analysis and reporting.\"",
    "\"Generate Python code that automates the process of creating and managing releases for open-source projects, including creating release notes, generating tarballs, and publishing releases to repositories.\"",
    "\"Generate Python code that imports the necessary modules for interacting with databases, such as SQLAlchemy or PyDBC, and creates a function that takes a database URL, username, and password as input and returns a connection object that can be used to execute queries and manipulate data in the database.\"",
    "\"Generate Python code that wraps GEOS operations in NumPy ufuncs for efficient geometric computations.\"",
    "\"Generate Python code that imports the necessary libraries and sets up authentication with the QuickBooks API using OAuth 2.0, allowing users to interact with their QuickBooks data through Python scripts.\"",
    "\"Generate Python code that creates an Azure container service using the Azure CLI, configures a Docker container registry, and deploys a multi-container application.\"",
    "\"Generate Python code that sends data to a Graphite metrics server using the `carbon` library, which is a Python 3 compatible library for sending metrics to Carbon, a popular graphite server.\"",
    "\"Generate Python code that imports a collection of common utilities, such as string formatting, file manipulation, and debugging tools, and provides a convenient way to access and use them in your projects.\"",
    "\"Generate Python code that implements a security framework for web applications, including authentication and authorization mechanisms, access control lists, and encryption utilities.\"",
    "\"Generate Python code that parses an email reply and extracts the relevant information, such as the name and email address of the sender, using regular expressions or a library like PyMongo.\"",
    "\"Generate Python code that uses the TensorFlow and Apache Airflow libraries to create a workflow for training, validating, and deploying machine learning models.\"",
    "\"Generate Python code that creates an experiment manager and version control system for AI models using TensorFlow, Git, and Docker.\"",
    "\"Generate Python code that uses the `jenkins` library to interact with a Jenkins instance and create, update, and delete jobs using YAML files.\"",
    "\"Generate Python code that imports the necessary libraries and defines a class called `Resource` with methods for retrieving, creating, updating, and deleting resources from a RESTful API.\"",
    "\"Generate Python code that imports the datetime module and uses its strptime() function to convert strings into datetime objects, like so:\\n```\\nfrom datetime import strptime\\n\\n# example usage:\\nstr1 = \\\"2023-02-27 15:45:00\\\"\\ndt1 = strptime(str1, \\\"%Y-%m-%d %H:%M:%S\\\")\\nprint(dt1) # Output: 2023-02-27 15:45:00\\n```\"",
    "\"Generate Python code that provides a set of utilities for DCI jobs, including job submission, monitoring, and management, using the Django framework to create a web-based interface for users to interact with the system.\"",
    "\"Generate Python code that imports the necessary modules for a given task, such as os, shutil, and subprocess, and uses them to perform common development tasks like creating directories, copying files, running commands, and printing helpful messages.\"",
    "\"Generate Python code that implements a modern theme for the Django admin interface, using Bootstrap 4 and Font Awesome, including a customizable layout and styling options.\"",
    "\"Generate Python code that imports a configuration file and loads its settings into a dictionary, using a syntax similar to Flask's configuration system.\"",
    "\"Generate Python code that creates a PDF document using the PyPDF2 library, allowing for the creation of pages, addition of text and images, and customization of layout and styles.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that uses the CMA-ES algorithm to optimize a given objective function, using a covariance matrix adaptation evolution strategy to evolve the population of candidate solutions.\"",
    "\"Generate Python code that imports the necessary libraries and executes a CQL query on a Cassandra database, using the CQL driver.\"",
    "\"Generate Python code that creates a user-friendly interface for interacting with databases, allowing users to easily create, read, update, and delete data in a variety of database systems, using a simple and intuitive syntax similar to natural language queries.\"",
    "\"Generate Python code that uses Django's built-in email system to send emails with dynamic content using Django templates, similar to how the `django.template` module works.\"",
    "\"Generate Python code that imports the necessary libraries (numpy, pandas, datetime) and uses the `json` module to parse and generate JSON data with support for comments, order, and custom data types.\"",
    "\"Generate Python code that imports the necessary libraries and creates a simple wrapper function to send emails using the SendGrid SMTP API, similar to the `sendgrid` package.\"",
    "\"Generate Python code that uses the jsonrpc module to interact with an aria2c daemon process via JSON-RPC, allowing for command-line tool and library interactions.\"",
    "\"Generate Python code that implements a SockJS server using aiohttp, allowing real-time communication between clients and servers, including support for WebSocket protocol and other features such as broadcasting and authentication.\"",
    "\"Generate Python code that uses the pyapk library to modify an APK file by adding a new Java class to the DEX file, while also changing the application's name and version number in the manifest file.\"",
    "\"Generate Python code that imports the necessary modules for POSIX IPC primitives, creates semaphores, shared memory, and message queues, and demonstrates their use in a simple example.\"",
    "\"Generate Python code that imports the alidns module of Aliyun Python SDK and uses its classes and methods to perform DNS operations, such as creating a DNS record, updating a DNS record, and deleting a DNS record.\"",
    "\"Generate Python code that implements a JSON RPC 2.0 server using the `jsonrpc` library, allowing for handling of incoming requests and responses in a simple and efficient manner.\"",
    "\"Generate Python code that implements a microservices framework that allows service developers to focus on application logic and promotes testability, using a modular architecture and dependency injection.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to the statsd server, allowing you to send metrics to it for tracking and visualization on Graphite graphs.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to a Cloud Spanner database using the GAPIC library, allowing you to execute SQL queries and manipulate data in the database.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Cloud Spanner instance using the GAPIC library.\"",
    "\"Generate Python code that creates an object-oriented alternative to the os, os.path, and shutil modules by defining classes for file system operations and providing methods for working with files and directories.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to a Cloud Spanner database using the GAPIC library, allowing you to perform various admin tasks such as creating and managing databases, instances, and databases, as well as executing SQL queries and managing schema changes.\"",
    "\"Generate Python code that imports the required libraries, creates a gRPC channel and stub, and uses the stub to execute a Cloud Spanner Database Admin API request.\"",
    "\"Generate Python code that imports the required libraries and sets up a gRPC connection to the Cloud Spanner API, allowing for the execution of SQL queries and the retrieval of results.\"",
    "\"Generate Python code that imports the typing module and creates a stub file for a deprecated module, including a warning message for users who attempt to import the deprecated module.\"",
    "\"Generate Python code that uses the `grpc` library to implement a client for the Cloud Spanner Instance Admin API, including methods to create, update, and delete instances, as well as to query instance metadata and retrieve logs.\"",
    "\"Generate Python code that imports Jinja2 templates and integrates them into Django views and templates, allowing for dynamic web content generation.\"",
    "\"Generate Python code that imports the requests library and uses it to send an HTTP GET request to a URL, providing a username and password for basic authentication.\"",
    "\"Generate Python code that uses the `requests` library to retrieve a list of U.S. states from an API, then iterates over each state and uses the `requests` library again to fetch a list of zip codes for that state, ultimately printing out all the zip codes in a neat format.\"",
    "\"Generate Python code that uses a library like `jsonschema` to validate a JSON-like document against a schema, raising an exception if any validation errors occur.\"",
    "\"Generate Python code that imports the json module and creates a function that takes in a dictionary of data and returns a JSON-formatted string, using the json.dumps() method.\"",
    "\"Generate Python code that imports the htmlparser module from python 2.7 and uses it to parse HTML strings, returning a parse tree that can be searched and modified.\"",
    "\"Generate Python code that implements a restricted subset of the Python language, allowing for safe execution of user-provided code in a trusted environment, by defining a set of allowed functions, keywords, and data types, and using a custom runtime environment to enforce these restrictions at runtime.\"",
    "\"Generate Python code that creates a data producer for Graphite graphing package, which collects metrics from various sources, performs transformations and aggregations on the data, and sends it to Graphite for visualization and alerting.\"",
    "\"Generate Python code that imports the ast module and uses it to parse source code, identifying instances where simplifications can be made, such as removing unnecessary parentheses or combining adjacent literals, and reports violations using flake8's reporting mechanism.\"",
    "\"Generate Python code that imports the necessary libraries, such as pandas and difflib, to perform record linkage and deduplication on a dataset.\"",
    "\"Generate Python code that imports the Flask framework and uses the `Flask.config` method to set the `SECRET_KEY` and `SSL_ context` parameters, then uses the `Flask.wrap_wsgi` function to wrap the application in an SSL wrapper, and finally calls `Flask.run` to start the application listening on a specific port.\"",
    "\"Generate Python code that imports the datetime module and formats the current date and time as a \\\"time ago\\\" statement using the following code:\\n```\\nfrom datetime import datetime\\n\\nnow = datetime.utcnow()\\nago = now - timedelta(minutes=1)\\nprint(f\\\"{now.strftime('%H:%M')} hours ago\\\")\\n```\"",
    "\"Generate Python code that sets file creation time on Windows using the `os` and `time` modules:\\n```python\\nimport os\\nimport time\\n\\ndef set_creation_time(file_path, timestamp):\\n   # Get the current file timestamp\\n   current_time = os.path.getctime(file_path)\\n\\n   # Set the creation time to the specified timestamp\\n   os.utime(file_path, (timestamp, current_time))\\n```\"",
    "\"Generate Python code that implements a publish-subscribe messaging system for Jupyter notebooks, allowing users to publish events to a topic and subscribe to receive updates from that topic, using a simple API and supporting both synchronous and asynchronous usage patterns.\"",
    "\"Generate Python code that uses the ipaddress library to convert an IP address to an Autonomous System Number (ASN) offline, without requiring an internet connection.\"",
    "\"Generate Python code that imports the necessary modules and creates a simple caching decorator with TTL support and multiple algorithm options using the memoization library.\"",
    "\"Generate Python code that creates a virtual machine using the Microsoft Azure Command-Line Tools VM Command Module:\\n```\\nazure vm create --name myVM --resource-group myResourceGroup --location westus2 --image Ubuntu --admin-username azureuser --admin-password myPassword\\n```\\nThis code will create a virtual machine named \\\"myVM\\\" in the \\\"westus2\\\" location, using the \\\"Ubuntu\\\" image, and with an administrative username of \\\"azureuser\\\" and password \\\"myPassword\\\".\"",
    "\"Generate Python code that imports the requests library, makes a GET request to the IANA TLD database, parses the response to extract the list of valid TLDs, and returns a list of strings representing the TLDs.\"",
    "\"Generate Python code that creates a bash script using `argparse` to manage dependencies for a project, including installing, updating, and removing packages, and utilizes ` poetry` to handle dependency management for Python projects.\"",
    "\"Generate Python code that imports the necessary libraries for Korean natural language processing, such as NLTK and spaCy, and implements functions for tasks like tokenization, stemming, lemmatization, parsing, and text classification.\"",
    "\"Generate Python code that imports the necessary libraries for time-series data manipulation and analysis, such as pandas, numpy, and statsmodels, and performs tasks such as data cleaning, feature engineering, model selection, training, and evaluation for machine learning models specifically designed for time-series data.\"",
    "\"Generate Python code that imports the stem library and creates a Tor controller object to interact with the Tor network.\"",
    "\"Generate Python code that decorates Flask APIs with OpenTracing tracer using the `opentracing-python` library, allowing for distributed tracing of requests and errors in a microservices architecture.\"",
    "\"Generate Python code that uses the Azure CLI module to manage Azure App Service, including creating and configuring app services, managing deployment slots, scaling instances, and monitoring logs and metrics.\"",
    "\"Generate Python code that imports the required libraries and creates an instance of aiohttp.ClientSession, which can be used to send GraphQL queries and retrieve responses asynchronously.\"",
    "\"Generate Python code that imports the necessary libraries, creates a virtual interface, plugs it into an OpenStack network, unplugs the interface, and then deletes it.\"",
    "\"Generate Python code that implements a library for working with the Generic Signature Format (GSF) used in SIEM systems, providing functions for parsing and generating GSF logs, as well as tools for working with the various data structures used in GSF signatures.\"",
    "\"Generate Python code that implements a circle packing algorithm to efficiently place circles of varying sizes within a rectangular container, ensuring minimum overlap and maximum density.\"",
    "\"Generate Python code that implements geographic add-ons for Django Rest Framework, including support for geo-based filtering, distance calculation, and spatial database operations using popular geospatial libraries like GeoDjango or Fiona.\"",
    "\"Generate Python code that creates a Jupyter server extension providing terminals with functionality similar to the `jupyter_server_proxy` package, but with additional features such as customizable keyboard shortcuts and support for multiple simultaneous terminals.\"",
    "\"Generate Python code that imports the necessary modules and uses the az network command-line tools module to manage networks, subnets, virtual networks, and IP addresses in Microsoft Azure.\"",
    "\"Generate Python code that implements an authorization system for Django without using a database, using a custom authentication backend that checks permissions against a hardcoded list of roles and permissions.\"",
    "\"Generate Python code that imports the Slack webhook library and sends a message to a Slack channel using an incoming webhook.\\n\\nHere's an example of what the generated code might look like:\\n```\\nimport slack\\n\\n# Set up the Slack webhook URL and channel name\\nwebhook_url = \\\"https://slack.com/api/v2/webhooks.incoming.create?token=YOUR_TOKEN\\\"\\nchannel_name = \\\"YOUR_CHANNEL_NAME\\\"\\n\\n# Set up the message payload\\npayload = {\\n   \\\"text\\\": \\\"Hello, world!\\\"\\n}\\n\\n# Send the message to the Slack channel using the incoming webhook\\nslack.post(webhook_url, data=json.dumps(payload))\\n```\\nThis code imports the `slack` module, sets up the webhook URL and channel name, defines the message payload, and then uses the `post()` method from the `slack` module to send the message to the Slack channel via the incoming webhook.\"",
    "\"Generate Python code that imports the necessary libraries and uses the simdjson library to parse JSON data in parallel across multiple CPU cores, resulting in faster parsing times for large datasets.\"",
    "\"Generate Python code that imports the LZMA library and uses it to compress and decompress files, using the preset dictionary and Huffman coding algorithms.\"",
    "\"Generate Python code that imports the required libraries and uses the ssl_scan() function from the \\\"ssl-tls\\\" library to scan a given host for SSL/TLS vulnerabilities, printing the results in a human-readable format.\"",
    "\"Generate Python code that creates an asynchronous SMTP client using the asyncio library, allowing for sending emails in the background without blocking the main event loop.\"",
    "\"Generate Python code that imports necessary libraries, such as NumPy and pandas, and uses techniques like seasonal decomposition, statistical modeling, and machine learning algorithms to detect anomalies in time series data.\"",
    "\"Generate Python code that imports the required libraries for working with Lottie files and Telegram animated stickers (TGS), creates a function for converting Lottie files to TGS, and uses the Telegram API to send the TGS to a chat.\"",
    "\"Generate Python code that imports the required modules, defines types for AWS credentials and an EC2 instance, and creates a stub function for running an EC2 instance using Boto3.\"",
    "\"Generate Python code that imports the required libraries, loads resources from a package, and defines symbols for those resources.\"",
    "\"Generate Python code that imports the necessary modules from the MXNet Gluon NLP Toolkit to perform various natural language processing tasks, such as tokenization, named entity recognition, part-of-speech tagging, and language modeling.\"",
    "\"Generate Python code that imports the TensorFlow library and creates a simple neural network for image classification.\"",
    "\"Generate Python code that uses the azure-iot-sdk-python library to interact with Azure IoT Hub devices, including sending and receiving messages, managing device twins, and monitoring device status.\"",
    "\"Generate Python code that creates a Flask app that takes in user input and generates HTML, CSS, and JavaScript files for a customizable website.\"",
    "\"Generate Python code that implements a scalable, flexible, and efficient algorithm for online learning and inference in machine learning models using the Vowpal Wabbit Python package.\"",
    "\"Generate Python code that creates a storage account, container, and block blob using the Azure Batch API.\"",
    "\"Generate Python code that uses the `google-cloud-bigquery` library to create a BigQuery schema from a JSON or CSV file, using the `SchemaField` class to define the fields and their data types, and then loads the schema into BigQuery using the `client.create_schema()` method.\"",
    "\"Generate Python code that uses the `subprocess` module to run the command `gcovr --reverse-path` to convert gcov files to Coveralls format, and then use the `requests` library to send the report to Coveralls API.\"",
    "\"Generate Python code that reads configuration variables from the operating system's environment variables and uses them to configure an application, such as a web server or database connection pool.\"",
    "\"Generate Python code that implements a common workflow language reference implementation, allowing users to define and execute workflows composed of multiple steps, each step being a specific task or operation, and providing features such as conditional statements, loops, and function calls to customize the workflow behavior.\"",
    "\"Generate Python code that implements an SQLAlchemy model with Active Record functionality, Django-like query syntax, nested eager loading, and beautiful repr displays, like so:\\n```\\nfrom sqlalchemy import create_engine, MetaData, Table, Column, Integer, String\\nfrom sqlalchemy.orm import sessionmaker, Session\\n\\nclass MyModel(object):\\n   def __init__(self, id, name, age):\\n       self.id = id\\n       self.name = name\\n       self.age = age\\n\\nengine = create_engine('postgresql://user:password@host:port/dbname')\\nmetadata = MetaData()\\nusers = Table('users', metadata,\\n   Column('id', Integer, primary_key=True),\\n   Column('name', String),\\n   Column('age', Integer)\\n)\\n\\nSession = sessionmaker(bind=engine)\\nsession = Session()\\n\\n# Nested Eager Load\\ndef fetch_all():\\n   return session.query(MyModel).join(users).all()\\n\\n# Beauty Repr\\ndef __repr__(self):\\n   return f\\\"{self.__class__.__name\"",
    "\"Generate Python code that imports the necessary libraries and creates wrappers for the Quartz frameworks on macOS, allowing developers to easily interact with the Quartz APIs from their Python applications.\"",
    "\"Generate Python code that calculates business duration in days, hours, minutes, and seconds by excluding weekends, public holidays, and non-business hours using the datetime and schedule libraries.\"",
    "\"Generate Python code that uses the `collectstatic` module to collect static files from a Django application, but does so faster by using a multi-threaded approach to parallelize the file collection process.\"",
    "\"Generate Python code that imports the required libraries, sets up the project structure, and compiles the SCSS files into CSS using the XStatic packaging standard, similar to how Bootstrap-SCSS 3.4.1 works.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Google Cloud DataflowClient object to interact with the Google Cloud Dataflow service, including creating and executing data processing pipelines.\"",
    "\"Generate Python code that imports the os module and uses its functions to read and manipulate environment variables defined by the XDG Base Directory specification, such as $XDG_CONFIG_HOME, $XDG_DATA_HOME, and $XDG_CACHE_HOME.\"",
    "\"Generate Python code that implements a pure Python VI (Vim) implementation, including basic editing functionality such as inserting and deleting text, moving the cursor, and opening files.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Pyomo model to solve an optimization problem, using variables, constraints, and objective functions to represent the problem in a mathematical format.\"",
    "\"Generate Python code that imports the logging module and creates a logger object with a customized log format and level, sets up log file rotation and backup, and logs messages at different levels with formatted arguments.\"",
    "\"Generate Python code that imports the necessary libraries and defines a class for memcached connection via the binary protocol with SASL authentication support, allowing for various methods to interact with the memcached server such as set, get, delete, increment, decrement, and flush.\"",
    "\"Generate Python code that imports the `daemon` module, creates a daemon process using the `daemon.Daemon` class, and runs the main application logic in the context of the daemon process.\"",
    "\"Generate Python code that implements a Fernet encryption algorithm, allowing users to encrypt and decrypt messages using a secret key.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to the Browsermob Proxy, allowing you to send HTTP requests through the proxy and receive responses.\"",
    "\"Generate Python code that uses the `unittest` module and the `difflib` module to select tests affected by changed files and methods.\"",
    "\"Generate Python code that uses the PyPDF2 library to read a PDF file and extract detailed information about each character, rectangle, and line, and stores the information in separate lists or dictionaries for easy analysis and manipulation.\"",
    "\"Generate Python code that uses Redis as a priority-enabled and time-based task queue by creating a Python class that inherits from the multiprocessing.Queue class and overrides the _put() method to use Redis' ZADD command to add tasks with their priorities and timestamps, and the _get() method to use Redis' ZRANGE command to retrieve tasks based on their priorities and timestamps.\"",
    "\"Generate Python code that creates a simple debugger for Python programs by allowing users to step through their code line-by-line, inspect variables, and set breakpoints.\"",
    "\"Generate Python code that parses and analyzes MS Office and OLE files for malware analysis and incident response, using libraries such as pyolefile and pytorch to extract metadata, file structure, and content, and perform machine learning-based threat detection.\"",
    "\"Generate Python code that imports the necessary modules and creates a DBAPI and SQLAlchemy dialect for Elasticsearch, allowing users to interact with Elasticsearch databases using SQL queries.\"",
    "\"Generate Python code that imports the Flask and MySQL libraries, creates a Flask app and MySQL connection, and uses the connection to execute SQL queries and retrieve results.\"",
    "\"Generate Python code that creates a configuration class with defaults, validates user input, and loads configuration from files or environment variables.\"",
    "\"Generate Python code that imports the Firebase API library and creates a instance of the FirebaseClient class, allowing you to interact with Firebase services such as authentication, real-time database, and storage.\"",
    "\"Generate Python code that imports the Django framework, creates a Crontab schedule, and uses it to run a job at a specific time every day.\"",
    "\"Generate Python code that imports the necessary libraries to create sparse n-dimensional arrays for the PyData ecosystem, specifically the `scipy.sparse` module for efficient storage and manipulation of large-scale sparse matrices, and optionally the `dask` library for parallel computing capabilities.\"",
    "\"Generate Python code that creates an asyncio-based SMTP server using the aiosmtpd library, allowing for asynchronous handling of email messages and supporting various authentication mechanisms, encryption, and message formats.\"",
    "\"Generate Python code that imports the required libraries, such as zlib and struct, and creates a class for compressing and decompressing data using various algorithms, as well as classes for transforming data between different formats, such as binary and ASCII.\"",
    "\"Generate Python code that uses the `mermaid` library to create diagrams and incorporates them into Sphinx-powered documentation.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the DocumentDB client class, allowing you to interact with Azure DocumentDB databases and perform various operations such as creating, reading, updating, and deleting documents.\"",
    "\"Generate Python code that uses libraries like pandas and python-dateutil to fetch and parse data from various securities exchanges, determining their holiday schedules and creating a unified calendar object containing all relevant information.\"",
    "\"Generate Python code that uses the `setuptools` library to create cross-distribution Linux wheels for a Python project, including support for multiple versions of Python and various Linux distributions.\"",
    "\"Generate Python code that imports the concurrent.futures module and creates a ThreadPoolExecutor to handle logging requests in parallel, while providing a drop-in replacement for the RotatingFileHandler class.\"",
    "\"Generate Python code that uses the svg2pdf library to convert SVG files to PDF, allowing users to customize conversion options such as paper size, margin, and font size, and outputting the resulting PDF file to disk or streaming it directly to the user's browser.\"",
    "\"Generate Python code that imports the necessary libraries for distributed and parallel machine learning, such as joblib, dask, or ray, and creates a function that can split data into chunks, distribute them across multiple machines, and run machine learning algorithms in parallel on each chunk before combining the results.\"",
    "\"Generate Python code that reads and writes hierarchical yaml configuration files, allowing for nesting of arbitrary depth and supporting standard python data types, using the ruamel.yaml library.\"",
    "\"Generate Python code that imports the necessary modules, sets up a Celery task queue, and uses Celery as the execution engine for Dagster's pipeline execution.\"",
    "\"Generate Python code that imports the required libraries and uses an extensible HTML/xml generator along with a cross-platform templating language to create templates for generating XML files and oracle utility scripts while also providing various other tools for different purposes all in one single program.\"",
    "\"Generate Python code that creates a lean enterprise content management system using Django, with features such as user authentication, role-based access control, customizable workflows, and integration with third-party services.\"",
    "\"Generate Python code that imports the requests library and uses it to make API calls to the Cloudflare v4 API, including functions to authenticate, create and manage records, and retrieve account information.\"",
    "\"Generate Python code that implements a faster port of language detection using the Shuyo algorithm.\"",
    "\"Generate Python code that imports the required libraries and interacts with the OpenStack Image Service API to manage image storage, including creating, updating, and deleting images, as well as retrieving image metadata and accessing image data.\"",
    "\"Generate Python code that implements an error highlight plugin for Flake8, which uses AST to parse Python source code, identifies potential errors, and reports them in a format compatible with Flake8.\"",
    "\"Generate Python code that creates a simple rTorrent interface using the python-libtorrent library, allowing users to create, list, and manage torrents, as well as download files from the tracker.\"",
    "\"Generate Python code that encrypts Django model fields using Fernet encryption.\"",
    "\"Generate Python code that imports the necessary libraries and uses them to split, merge, crop, and transform PDF files.\"",
    "\"Generate Python code that imports the django.contrib.singleton module and creates a singleton class that uses the SingletonBase class from the module to implement a singleton pattern for a given class.\"",
    "\"Generate Python code that creates a robot framework debug library and an interactive shell using the `robotframework` module and the `pytest` library for debugging, and the `IPython` library for the interactive shell.\"",
    "\"Generate Python code that creates a visually appealing display of threading and multiprocessing using animating colored bars and rectangles, leveraging the `threading` and `multiprocessing` modules.\"",
    "\"Generate Python code that creates an asynchronous caching system using the async-aware versions of popular backends, such as Redis, Memcached, and SQLite, and utilizes the asyncio library for efficient concurrency.\"",
    "\"Generate Python code that imports the jQuery library and includes it in a XStatic packaging standard project.\"",
    "\"Generate Python code that uses the azure-sqlcmd module to execute SQL commands against an Azure SQL Database, including creating databases, creating and managing database users, running SQL scripts, and querying database tables.\"",
    "\"Generate Python code that uses the `pytest` framework to discover and run tests in directories and files, using the `pytest.main()` function to execute the tests and report their results.\"",
    "\"Generate Python code that uses the Slack Events API to handle incoming webhooks in a Flask application, allowing for real-time communication and integration between Slack and the app.\"",
    "\"Generate Python code that plays and records sound using the `pydub` library, allowing users to create and save audio files with various formats and quality settings.\"",
    "\"Generate Python code that imports the necessary modules, defines a stub function with appropriate signatures, and uses the stub function to replace original functions.\"",
    "\"Generate Python code that imports the necessary libraries for building a recommendation system, such as NumPy, SciPy, and Matplotlib, and creates a simple dataset for demonstration purposes.\"",
    "\"Generate Python code that creates a high-level Twisted HTTP client API that allows users to send HTTP requests and handle responses in a simple, synchronous way, using the Twisted library for asynchronous I/O.\"",
    "\"Generate Python code that uses randomization and string manipulation to produce valid, yet fake, credit card numbers, expiration dates, and security codes, while adhering to the Luhn check and other industry-standard validation rules.\"",
    "\"Generate Python code that implements a Dash-based interface for Jupyter Notebooks, allowing users to create and share interactive documents with live code, visualizations, and collaboration features.\"",
    "\"Generate Python code that implements a pytest plugin for gRPC by defining a `pytest_plugin` function that registers a `Fixture` class which sets up a gRPC server and client, and defines test functions that use the fixture to call the gRPC methods and verify the responses.\"",
    "\"Generate Python code that implements a reinforcement learning algorithm using the OpenAI baselines library, which provides high-quality implementations of various RL algorithms.\"",
    "\"Generate Python code that imports the graphviz library and creates a dotgraph object to represent a directed graph, allowing users to add nodes and edges to the graph and render it to various formats such as PDF, PNG, and SVG using the graphviz tool.\"",
    "\"Generate Python code that imports the XStatic base package and provides minimal support code, including a basic main function that runs the application.\"",
    "\"Generate Python code that constructs network packets for various protocols, such as IPv4, TCP, UDP, ICMP, and DNS, using customizable headers and payloads, and also dissects received packets into their constituent parts for analysis.\"",
    "\"Generate Python code that implements a linter that checks for strict adherence to coding standards, including naming conventions, indentation, and syntax, and fails if any violations are found.\"",
    "\"Generate Python code that imports the `mimesis` library and uses it to create realistic fake data for various data types, such as numbers, dates, strings, and lists, and also generates fake data for more complex data structures like dictionaries and pandas DataFrames.\"",
    "\"Generate Python code that creates a minimal, easy-to-use, declarative CLI tool using the argparse library to parse command line arguments and the os module for performing basic file system operations.\"",
    "\"Generate Python code that uses the Spotipy library to download Spotify playlists and songs, along with album art and metadata, and saves them locally in a specified format.\"",
    "\"Generate Python code that imports the SoX library and wraps its functions in a Python module, allowing users to perform various audio manipulation tasks, such as converting audio files between different formats, resampling, and applying effects like echo, reverb, and noise reduction.\"",
    "\"Generate Python code that creates an SSL-enabled development server for Django by running the command `python manage.py runserver --ssl` in your terminal, which starts the Django development server with SSL support enabled.\"",
    "\"Generate Python code that imports the Zipkin library and uses it to instrument traces, log errors, and visualize distributed systems performance data.\"",
    "\"Generate Python code that uses PyTorch to implement Bayesian optimization, an algorithm for optimizing expensive-to-evaluate black-box functions by iteratively building a probabilistic model of the function and using it to guide the search for the optimal input.\"",
    "\"Generate Python code that imports the necessary modules and configures an Apache Airflow provider to connect to Tableau using the `apache_airflow_providers_tableau` package, allowing Airflow to interact with Tableau data sources and execute Tableau reports as part of a workflow.\"",
    "\"Generate Python code that uses the `xml.etree.ElementTree` module to parse JUnit/XUnit XML files and creates Python objects to represent the test cases, test suites, and their results.\"",
    "\"Generate Python code that uses libraries like TensorFlow, PyTorch, and OpenCV to implement image and video super-resolution algorithms, including Deep Learning based methods like SISRGAN and DRRN, and traditional methods like Lanczos resampling and Non-local means denoising, to enhance the resolution of low-quality images and videos.\"",
    "\"Generate Python code that imports the geventhttpclient library and creates a pre-built wheel for it using the `setuptools` package, allowing for easy installation and use in other projects.\"",
    "\"Generate Python code that uses the Sphinx library to parse source code and create high-quality documentation for APIs, including automatic generation of documentation pages, cross-referencing, and search functionality.\"",
    "\"Generate Python code that wraps the C++ Cap'n Proto library using Cython, allowing for efficient and type-safe serialization and deserialization of Cap'n Proto messages in Python.\"",
    "\"Generate Python code that uses the requests library to send HTTP requests to the Amazon Echo device's API, allowing for programmatic control of the device's capabilities, such as playing music, setting alarms, and controlling smart home devices.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an Exporter that collects metrics from Airflow using the `airflow.stats` module, and exports them to Prometheus using the `prometheus-client` library.\"",
    "\"Generate Python code that uses a library like Graphviz or PyGraphviz to create a block diagram image from a textual description of the diagram, using a simple syntax for defining blocks and connections between them.\"",
    "\"Generate Python code that uses the TensorFlow and PyTorch libraries to optimize and run deep neural networks on NVIDIA GPUs, similar to the DeepSpeed library.\"",
    "\"Generate Python code that imports the Rust library for creating graphs and uses it to create a graph object, add nodes and edges to it, and perform basic graph operations like traversal and shortest path finding.\"",
    "\"Generate Python code that calculates dates with monthly intervals using the datetime module, like \\\"datetime.date.today() + relativedelta(months=X)\\\" to add X months to the current date.\"",
    "\"Generate Python code that imports the necessary libraries and creates a fanartTV class with methods to search for TV shows, movies, and actors, retrieve detailed information, and download images.\"",
    "\"Generate Python code that imports the Pygments library and customizes the tomorrow theme using mozmorris's tomorrow-pygments package, similar to the provided package description.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Python interface to interact with a vehicle simulation running in Unreal, allowing for real-time data exchange between the two environments.\"",
    "\"Generate Python code that imports the docx module and creates a new DocxFile object to write a docx file named \\\"example.docx\\\" in the current working directory.\"",
    "\"Generate Python code that imports the necessary libraries for image manipulation and creates a function that takes an image or GIF file path as input, applies random glitch effects to it using various techniques such as pixel shifting, color distortion, and noise addition, and returns the modified image or GIF.\"",
    "\"Generate Python code that implements a SQLAlchemy extension for versioning and auditing, using techniques such as row-level security and immutable data structures to ensure data integrity and track changes made to database tables.\"",
    "\"Generate Python code that imports the Pygments library and defines a custom syntax highlighting theme inspired by the Dracula theme, using dark colors and minimalistic styling for better readability in low-light environments.\"",
    "\"Generate Python code that defines core object representations for structures and molecules, supports multiple electronic structure codes, and performs robust materials analysis, similar to the functionality of the Python Materials Genomics package.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the ArvadosClient class, which can be used to interact with an Arvados server and perform various operations such as creating, reading, updating, and deleting collections, as well as uploading and downloading files.\"",
    "\"Generate Python code that imports the necessary libraries for interactive visualization, such as `matplotlib` or `seaborn`, and creates an interactive plot or chart using these libraries, allowing the user to interact with the visualization through mouse clicks or other input methods.\"",
    "\"Generate Python code that creates an API and CLI for securely managing secrets, using cryptography to protect sensitive information and utilizing environment variables for configuration.\"",
    "\"Generate Python code that uses the Docker API to create and build Docker images, allowing users to specify image names, directories, and files to be included in the image.\"",
    "\"Generate Python code that imports the necessary libraries and sets up authentication with Google Cloud Platform using the Google Cloud Auth API.\"",
    "\"Generate Python code that uses the `docker` module to parse a Docker image and extract its metadata, such as name, tag, and labels, similar to how Distribution parses a Docker image.\"",
    "\"Generate Python code that implements an OAuth 2.0 provider using the `requests` library to interact with the authorization server, `json` library to parse JSON responses, and `hashlib` library to compute the signature.\"",
    "\"Generate Python code that uses the Sphinx docstring parser to extract example code from Python scripts and creates an HTML gallery of examples using Jinja templating.\"",
    "\"Generate Python code that uses the ldap3 library to connect to an Active Directory domain and retrieve information about users, groups, computers, and other objects in the domain, dumping the data to CSV files for further analysis.\"",
    "\"Generate Python code that imports the necessary libraries and creates a DAGster component that uses PySpark to perform data processing operations, such as reading and writing data to a Spark DataFrame, transforming data using PySpark's RDD API, and executing Spark SQL queries.\"",
    "\"Generate Python code that imports the necessary modules and configures Celery to be used as the task executor for Apache Airflow.\"",
    "\"Generate Python code that reads a DAWG (Directed Acyclic Word Graph) from a file using the dawgdic C++ library or DAWG Python extension, and provides an interface for traversing and querying the graph.\"",
    "\"Generate Python code that uses the `azure.cli` module to manage Azure roles, including creating, updating, and deleting role definitions, as well as assigning roles to users or groups.\"",
    "\"Generate Python code that creates a Django application with custom models, views, and templates for managing files and images, including uploading, storing, and displaying them in a user-friendly interface.\"",
    "\"Generate Python code that implements a stream processing system using the `stream` module, allowing for the creation of streams from various sources, such as files, sockets, and generators, and providing methods for filtering, mapping, and reducing data in real-time.\"",
    "\"Generate Python code that implements a component-based software-defined networking framework, allowing for modular and extensible network architecture composition, including network functions virtualization and service chaining, using APIs and abstract interfaces to decouple components and enable flexible network service deployment.\"",
    "\"Generate Python code that implements a Flake8 plugin to enforce consistent string formatting styles by analyzing code files for format string literals and reporting any inconsistencies according to predefined rules.\"",
    "\"Generate Python code that downloads YouTube videos using the pafy library, which provides a convenient API for interacting with YouTube's video streaming service.\"",
    "\"Generate Python code that imports the requests library and uses it to make API calls to the OpenWeatherMap web API to retrieve weather data for a given location, using the API key from the environment variable OPENWEATHERMAP_API_KEY.\"",
    "\"Generate Python code that imports the necessary libraries and creates a class called TableData to represent tabular data, with methods for reading and writing tables from files, databases, and memory, and for manipulating and querying the data.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to a Dask gateway server, allowing the user to execute tasks on the cluster and retrieve their results.\"",
    "\"Generate Python code that uses the whois library to retrieve and parse whois data for IPv4 and IPv6 addresses, such as \\\"whois 8.8.8.8\\\" or \\\"whois 2001:0db8:85a3:0000:0000:8a2e:0370:7334\\\".\"",
    "\"Generate Python code that uses the Azure CLI library to interact with Azure Batch services, such as creating and managing batch accounts, pools, and jobs, as well as monitoring their status and output.\"",
    "\"Generate Python code that implements a simple FIX Protocol client and server using the `socket` library, allowing for basic message sending and receiving between two parties over a network.\"",
    "\"Generate Python code that uses the mbed-os-tools library to interact with Mbed OS, including building, testing, and working with Mbed OS projects.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a basic structure for using Google Visualization tools in a Python application, similar to the functionality provided by the Python API for Google Visualization package.\"",
    "\"Generate Python code that parses a GIT URL into its component parts, such as repository path, branch, and reference, using a library like `urlparse` or `pygit2`.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the Sauce Labs API, authenticating with a provided username and password, and utilizing the API's various endpoints to interact with Sauce Labs resources such as virtual machines, jobs, and tests.\"",
    "\"Generate Python code that parses a CODEOWNERS file and returns a dictionary where keys are files and values are lists of owners, or empty lists if no owners are specified for a particular file.\"",
    "\"Generate Python code that creates a simple terminal application for viewing Markdown files, with basic navigation functionality and support for rendering GitHub Flavored Markdown syntax.\"",
    "\"Generate Python code that uses pytest-xdist to split the test suite into subsuites of equal size based on test execution time, using the --xdist-args option to specify the number of subsuites desired.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that takes a message ID as input, translates it using the Google Translate API, and returns the translated message in the target language.\"",
    "\"Generate Python code that uses the os and shutil modules to delete all files in a given directory that are older than a specified number of days, using the datetime module to calculate file ages.\"",
    "\"Generate Python code that reads OpenStack release notes and compares the current version of various OpenStack services against the minimum required versions mentioned in the release notes, reporting any discrepancies and suggesting remediation steps.\"",
    "\"Generate Python code that uses the AutoML library to perform automated machine learning for image, text, and tabular data, including data preprocessing, feature engineering, model selection, training, and evaluation.\"",
    "\"Generate Python code that parses WWW-Authenticate headers and extracts authentication information, such as username and password, from them.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3 AppConfig service with mypy-boto3-builder.\"",
    "\"Generate Python code that implements API key permissions for the Django REST Framework by using the `api_key` attribute in the user model, and decorating views with the `@api_key_required` decorator to enforce permission checks.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the FTP client class, allowing for interaction with a remote FTP server and providing a virtual file system interface for manipulating files.\"",
    "\"Generate Python code that implements a package management system that allows users to easily install, update, and remove packages, with a focus on editable installations.\"",
    "\"Generate Python code that implements a filesystem router for Python web frameworks by creating a class that inherits from a web framework's routing class, such as Flask's `Flask_Router`, and overrides its methods to map URLs to files on the file system.\"",
    "\"Generate Python code that parses a JSON file with JavaScript-style comments using the `json` module and a custom function to extract comment content.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the FTDI device driver, allowing you to communicate with an FTDI device connected to a serial port.\"",
    "\"Generate Python code that imports the Django CMS library and adds pretty CSS styles for its admin interface by including a custom.css file in the project's static directory, leveraging Django's built-in static files support.\"",
    "\"Generate Python code that imports the necessary libraries for time series data mining and Matrix Profile algorithms, such as NumPy, SciPy, and pandas, and creates a function that takes in a time series dataset as input and returns a dataframe containing the extracted insights and patterns.\"",
    "\"Generate Python code that parses a Device Tree file version 1 and returns a dictionary representing the device tree nodes and their properties.\"",
    "\"Generate Python code that automates testing for a software application, including functional tests, performance tests, and security tests, using a framework such as Pytest or Unittest, and utilizing test fixtures and mock objects to isolate dependencies and improve test efficiency.\"",
    "\"Generate Python code that creates an interactive shell for managing Microsoft Azure resources, allowing users to run commands and scripts to provision and configure virtual machines, storage accounts, networks, and other Azure services.\"",
    "\"Generate Python code that imports the necessary libraries and creates an OVSDB application using the Open vSwitch database.\"",
    "\"Generate Python code that implements a morphological analyzer for Russian language, consisting of a POS tagger and an inflection engine, using existing libraries such as NLTK or spaCy for tokenization and part-of-speech tagging, and custom implementation for inflection analysis.\"",
    "\"Generate Python code that creates an enumeration module with classes for defining and iterating over enumerations, supporting both ordered and unordered variants, and allows registering custom enumeration classes.\"",
    "\"Generate Python code that uses the flake8 library to create a custom plugin for checking common style issues or inconsistencies in pytest-based tests, by inheriting from the `flake8.checks.BaseCheck` class and implementing the necessary checks and reporting methods.\"",
    "\"Generate Python code that uses the `unicode` module to convert between Japanese hankaku and zenkaku characters, handling both hiragana and katakana characters, with a focus on speed and efficiency.\"",
    "\"Generate Python code that uses the Humbug API to gather user data and provide insights for improving developer tools.\"",
    "\"Generate Python code that uses the `nose` module to run tests and generates coverage reports for both the main process and subprocesses using the `coverage` module, and also supports multiprocessing by running multiple processes in parallel using the `multiprocessing` module.\"",
    "\"Generate Python code that uses the Azure CLI to interact with Azure Key Vault, including creating and managing vaults, secrets, and certificates, using the az keyvault command module.\"",
    "\"Generate Python code that implements a simple RPC system using gRPC, including a server and client implementation, with support for synchronous and asynchronous communication, error handling, and message compression.\"",
    "\"Generate Python code that uses the Gardener CI/CD libraries to automate continuous integration and delivery pipelines for your software projects, including creating and managing Kubernetes deployments, configuring monitoring and logging, and implementing security best practices.\"",
    "\"Generate Python code that creates standard barcodes using only built-in libraries, without requiring any external modules, optionally utilizing PIL for improved image quality if available.\"",
    "\"Generate Python code that uses SQLAlchemy to create a CRUD (Create, Read, Update, Delete) application with a simple database schema, including tables for users, items, and orders, and a user interface to perform CRUD operations on these data.\"",
    "\"Generate Python code that imports the necessary libraries and performs the following tasks:\\n\\n1. Calculates the pairwise distances between a set of points in a high-dimensional space.\\n2. Selects a subset of these points that are closest to each other, based on a specified distance threshold.\\n3. Computes the nearest neighbor graph for this subset of points.\\n4. Prunes the graph to remove edges that are below a certain distance threshold.\\n5. Returns the pruned graph, along with the set of points used to construct it.\"",
    "\"Generate Python code that imports the necessary modules, reads an SCSS file, compiles it into CSS, and writes the output to a file using the `os` and `shutil` modules.\"",
    "\"Generate Python code that wraps the C++ implementation of Chia BIP158 library, providing an easy-to-use interface for interacting with Chia blockchains.\"",
    "\"Generate Python code that uses file input to display the last few lines of a file, like the Unix tail command, and also has an option to display the first few lines of the file, like the Unix head command.\"",
    "\"Generate Python code that simplifies social authentication using popular platforms like Google, Facebook, LinkedIn, and GitHub, allowing users to register and log in through their preferred social media account.\"",
    "\"Generate Python code that imports the necessary libraries and manipulates JSON-like data using NumPy-like idioms, similar to the functionality provided by the `json` and `numpy` packages.\"",
    "\"Generate Python code that creates a CloudFormation template file for deploying an AWS CDK project, including the necessary dependencies and configuration options, using the AWS CDK CLI.\"",
    "\"Generate Python code that masks objects instead of deleting them from the database by using a boolean field, such as `is_deleted`, and setting it to `True` for objects that should be hidden while keeping their data intact.\"",
    "\"Generate Python code that imports the necessary libraries and performs the following tasks:\\n\\n1. Load an image from a file using OpenCV's `cv2.imread()` function.\\n2. Convert the image to grayscale using OpenCV's `cv2.cvtColor()` function.\\n3. Apply thresholding to the grayscale image using OpenCV's `cv2.threshold()` function, with adjustable parameters for the threshold value and type.\\n4. Perform morphological operations (erosion and dilation) on the thresholded image using OpenCV's `cv2.morphologyEx()` function.\\n5. Detect edges in the image using the Canny edge detection algorithm implemented in OpenCV's `cv2.Canny()` function.\\n6. Apply non-maximum suppression to the detected edges using OpenCV's `cv2.nonmaxSuppression()` function.\\n7. Visualize the resulting edges using Matplotlib's `matplotlib.pyplot.imshow()` function.\\n8. Save the visualization to a file using Matplotlib's `matplotlib.pyplot.savefig()` function.\"",
    "\"Generate Python code that defines a custom sentinel value for representing null values in APIs, similar to how None, False, and True are used as sentinel values in various contexts.\"",
    "\"Generate Python code that imports the required libraries, creates a custom Sphinx theme directory, copies the necessary files to the theme directory, and modifies the theme configuration to match the desired customization.\"",
    "\"Generate Python code that imports the necessary libraries and uses string formatting to create table-formatted output for display in a terminal, similar to the `print_table` function from the `terminaltables` package.\"",
    "\"Generate Python code that uses requests and BeautifulSoup to scrape data from JustWatch.com and returns a dictionary of movies and TV shows, along with their ratings and streaming availability.\"",
    "\"Generate Python code that creates a Django form using Bootstrap 4 components, including a customizable layout and styling, and supports validation and rendering of form inputs, labels, and buttons.\"",
    "\"Generate Python code that imports the required libraries and creates an instance of the TelegraphAPI class, which can be used to interact with the Telegram API and perform various tasks such as sending messages, creating conversations, and handling updates.\"",
    "\"Generate Python code that imports and uses the HTCondor Python bindings to submit jobs, monitor their progress, and retrieve job results in a high-throughput computing environment.\"",
    "\"Generate Python code that imports the zope.interface module and defines a class MySchema with attributes id, name, and age, implementing the IMySchema interface.\"",
    "\"Generate Python code that imports the Robot Framework and faker libraries, and uses faker to generate fake test data for use in Robot Framework tests.\"",
    "\"Generate Python code that imports the discord.py library and creates a bot instance to interact with the Discord API.\"",
    "\"Generate Python code that creates a test infrastructure using pytest-infrastructure, including a test environment and test data, and configures the test runner to use the appropriate testing framework.\"",
    "\"Generate Python code that uses a library like `requests` to fetch a random joke from a API, stores it in a variable, and then shares it on a chat platform using another library like `pyrolling` or `pygment`.\"",
    "\"Generate Python code that creates a tool for managing Python packages, including functionality for installing, updating, and removing packages, as well as listing available packages and checking dependencies.\"",
    "\"Generate Python code that creates a program that sends notifications to users about upcoming fitness classes, cancellations, and schedule changes at their preferred gym.\"",
    "\"Generate Python code that uses the `archive` module to extract the contents of an archive file, such as a ZIP or RAR file, to a specified directory.\"",
    "\"Generate Python code that uses the `pytest` framework to run tests in a specific order by implementing a custom test runner that sorts tests based on a specified ordering and runs them using the `pytest.main()` function.\"",
    "\"Generate Python code that creates a Junos automation script for non-programmers using the Juniper Networks' Junos OS, allowing them to easily configure network devices without needing extensive programming knowledge.\"",
    "\"Generate Python code that implements a consistent Ansible API and CLI using container and process isolation runtime capabilities, utilizing Python's built-in module, `pycontainment`, to create lightweight, resource-controlled containers for running Ansible playbooks in isolated environments.\"",
    "\"Generate Python code that imports the os and sys modules, checks if the file exists in the path, and then checks if the file is executable, all without using the shutil module.\"",
    "\"Generate Python code that tests the packaging friendliness of a project by checking for proper file structure, existence of essential files, and correct naming conventions using the `os` and `shutil` modules to iterate through directories and files, and the `re` module for regular expression pattern matching.\"",
    "\"Generate Python code that imports the TensorFlow library and loads a pre-trained model from the TensorFlow Model Garden, such as ResNet50 or BERT, and performs an image classification task using the loaded model.\"",
    "\"Generate Python code that imports the v8 module and creates a minimal, modern embedded V8 engine for executing JavaScript scripts.\"",
    "\"Generate Python code that imports the requests library and uses it to send HTTP requests with message signatures for authentication.\"",
    "\"Generate Python code that connects to the IBM Watson IoT Platform and allows users to interact with the platform's APIs, including creating and managing devices, applications, and sensors, as well as processing data and sending commands.\"",
    "\"Generate Python code that imports the required libraries, defines fixtures and markers for asynchronous tornado applications, and uses the py.test framework to run tests for these applications.\"",
    "\"Generate Python code that creates a CLI tool using the azure-cli-python package to manage Azure containers, including creating and deleting container groups, listing and filtering containers, and running containers with specified commands.\"",
    "\"Generate Python code that uses Django's built-in model ordering feature, along with a custom admin interface for reordering models using Django's admin framework.\"",
    "\"Generate Python code that imports the necessary libraries and retrieves the country code and exchange rate data from HDX, then manipulates and exports the data in various formats for use in downstream applications.\"",
    "\"Generate Python code that creates a pytest plugin which uses the `pytest.mark.workflow` marker to annotate failed tests with a workflow command for GitHub Actions, allowing you to easily identify and debug failing tests in your CI pipeline.\"",
    "\"Generate Python code that creates an AWS ECS cluster, service, and task definition using the CDK Construct Library.\"",
    "\"Generate Python code that imports the necessary libraries and implements the Earth Mover's Distance algorithm, as described by Ofir Pele and Michael Werman, to calculate the distance between two probability distributions.\"",
    "\"Generate Python code that imports the pytest module and uses it to run a subset of tests by splitting them into equally sized groups, using a fork of Mark Adams' original project pytest-test-groups.\"",
    "\"Generate Python code that creates a class called Task with attributes name, description, and status, and a method add_task that takes in a task dictionary and sets its status to \\\"pending\\\", and a method mark_as_completed that takes in a task ID and sets its status to \\\"completed\\\".\"",
    "\"Generate Python code that imports the necessary libraries for working with tabular data, dates, and times, and includes functions for streaming data, handling date and time operations, and other miscellaneous utilities.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Google Cloud Recaptcha Enterprise API client, configuring it with your project ID, secret key, and site key.\"",
    "\"Generate Python code that uses the `requests` library to send a streaming HTTP upload with multipart/form-data encoding, similar to how the `curl` command can be used to upload files to a server.\"",
    "\"Generate Python code that formats dates according to the RFC 3339 standard using the datetime module, like this:\\n```\\nimport datetime\\n\\ndef format_date(dt):\\n   return dt.isoformat() + \\\"Z\\\"\\n\\n# Example usage:\\ndt = datetime.datetime(2017, 5, 18, 13, 45, 0)\\nprint(format_date(dt)) # Output: 2017-05-18T13:45:00Z\\n```\"",
    "\"Generate Python code that uses the `subprocess` module to interact with the system's package manager, such as `apt-get` on Linux or `brew` on macOS, to install, update, and remove software packages.\"",
    "\"Generate Python code that imports the required libraries and uses tabula-java to extract data from a PDF file and convert it into a Pandas DataFrame.\"",
    "\"Generate Python code that imports the `typing` module and creates a stub file for a given module, class, or function using the `typing. declarations` syntax.\"",
    "\"Generate Python code that imports the necessary libraries and creates a constraint-based metabolic network model using COBRApy.\"",
    "\"Generate Python code that imports the necessary libraries and defines an EfficientNet model using Keras, allowing for customization of the architecture through hyperparameters such as depth, width, and resolution.\"",
    "\"Generate Python code that imports the certifi module, adds the Windows certificate store to the list of trusted roots using the `certifi.add_root_CA()` function, and then updates the SSL context using the `certifi.create_default_context()` function.\"",
    "\"Generate Python code that imports the subprocess module and creates a wrapper function for the Terraform command-line tool, allowing users to run Terraform commands and interact with the resulting processes.\"",
    "\"Generate Python code that imports a Spanish word conjugation module and uses it to conjugate a given verb according to the specified tense, mood, and pronoun.\"",
    "\"Generate Python code that imports the necessary libraries and creates an AWS System Manager Parameter Store caching client, using the `boto3` library to interact with AWS services.\"",
    "\"Generate Python code that uses the Azure CLI library to monitor Azure resources, including retrieving logs, metrics, and alerts, and configuring monitoring settings.\"",
    "\"Generate Python code that creates a command line interface for managing gardens, including planting, watering, pruning, and harvesting, using the Gardener CI/CD toolset.\"",
    "\"Generate Python code that imports the inspect module and uses it to check if *args or **kwargs are present in the function signature, and raises a ValueError if they are not; this will ensure the function accepts only keyword arguments.\"",
    "\"Generate Python code that writes a table in various formats using pytablewriter, including AsciiDoc, CSV, Elasticsearch, HTML, JavaScript, JSON, LaTeX, LDJSON, LTSV, Markdown, MediaWiki, NumPy, Excel, Pandas, Python, reStructuredText, SQLite, TOML, TSV, and YAML.\"",
    "\"Generate Python code that imports the json module and uses it to convert the output of a Django view into a JSON response, using the `json` parameter of the `render` method to specify the content type of the response.\"",
    "\"Generate Python code that creates a progress bar and percent indicator utility using the `progress` module, which displays a moving progress bar and calculates the percentage of completion for a given task.\"",
    "\"Generate Python code that uses the `datetime` module to convert timestamps in a dataset to human-readable format, the `pandas` library to convert data types and reorganize data, and the `numpy` library to perform calculations on numerical data.\"",
    "\"Generate Python code that uses the os module's \\\"ping\\\" function to send an ICMP echo request to a given host and return the response time.\"",
    "\"Generate Python code that imports the required libraries, creates an instance of the APScheduler, and schedules tasks using the scheduler in a Flask application.\"",
    "\"Generate Python code that defines a dictionary of standardized trait strings, where each key represents a trait name and the corresponding value is a list of possible string values for that trait, such as \\\"hair_color\\\" : [\\\"blonde\\\", \\\"brunette\\\", \\\"redhead\\\"], \\\"eye_color\\\" : [\\\"blue\\\", \\\"brown\\\", \\\"green\\\"] etc.\"",
    "\"Generate Python code that imports the Blosc library and uses it to compress and decompress data, similar to how the Blosc command line tool works.\"",
    "\"Generate Python code that imports the necessary libraries and creates a ChargeBee API object to interact with the subscription billing service, allowing users to create, read, update, and delete subscriptions, customers, and invoices.\"",
    "\"Generate Python code that reads environment variables from a `.env` file and sets them as OS environment variables, using the `os` and `shutil` modules, so that they can be accessed by `manage.py`.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a logging handler with GELF support, similar to the given package description.\\n\\nHere is an example of a possible implementation:\\n```\\nimport logging\\nfrom logging.handlers import TimedRotatingFileHandler\\nfrom gelful import GelfUDPHandler\\n\\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)\\n\\n# Set up a rotating file handler\\nrotator = TimedRotatingFileHandler('logs/access.log', when='D')\\nrotator.setLevel(logging.INFO)\\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\\nrotator.setFormatter(formatter)\\n\\n# Set up a GELF handler\\ngelf_handler = GelfUDPHandler('udp://localhost:12201')\\ngelf_handler.setLevel(logging.ERROR)\\nformatter = logging.Formatter('%(asctime\"",
    "\"Generate Python code that implements a quantum circuit simulator, allowing users to create and manipulate quantum bits (qubits) and run simulations of quantum algorithms on a classical computer.\"",
    "\"Generate Python code that creates an interactive 3D scatter plot using the matplotlib library, allowing users to manipulate the plot and view it from different angles.\"",
    "\"Generate Python code that imports theunicodemoduleand sets the unicodeinput flag to enabled, like this: import unicode # set theunicodeinputflag to enabled print \\\"Enter text:\\\". This will allow you to type in text using any character encoding supported by your system and then it will be displayed correctly when printed.\"",
    "\"Generate Python code that declares a contract on a function parameter and return value using Python3 annotations, a decorator, or a docstring with :type: and :rtype: tags, supporting a basic type system, variables binding, arithmetic constraints, and specialized contracts for Numpy arrays, and includes an extension API.\"",
    "\"Generate Python code that uses the geocoding library folium to search for places and geographic data based on a given ZIP code, and display the results on an interactive map using Folium's leaflet JavaScript library.\"",
    "\"Generate Python code that imports the pkcs11 module, creates a PKCS#11 slot, loads a PEM-encoded certificate into the slot, and uses the certificate to encrypt and decrypt data.\"",
    "\"Generate Python code that implements automatic semantic versioning for a Python project, using the `packaging` and `semver` libraries, by defining a custom versioning scheme that includes major, minor, and patch versions, and automatically increments the version number based on changes to the project's source code.\"",
    "\"Generate Python code that uses Apache Spark and Keras to distribute deep learning models across multiple nodes and perform efficient distributed training.\"",
    "\"Generate Python code that uses the flake8-annotations package to check type hints in Python files, reporting any inconsistencies found.\"",
    "Generate Python code that implements a generator-based version of the popular map() function, which can be used to apply a given function to each element of an iterable in parallel.",
    "Create a Python library that provides a simple way to iterate over large datasets in parallel using generators, allowing developers to write efficient and scalable data processing pipelines.",
    "Implement a generator-based version of the filter() function, which allows filtering a large dataset in parallel while consuming less memory compared to the traditional list comprehension approach.",
    "Design a Python module that enables asynchronous iteration over iterables using generators, providing a way to perform operations on each item in parallel without blocking other tasks in the program.",
    "Develop a Python tool that leverages generators to implement a parallelized version of the reduce() function, enabling developers to perform aggregation operations on large datasets efficiently and concurrently.",
    "\"Generate Python code that parses an OpenStack microversion header and extracts the version number, using the `re` module for regular expressions and the `strsplit()` function to split the header into its components.\"",
    "\"Generate Python code that implements a Django Rest Framework extension to add custom fields to existing models, including a checkbox field for \\\"terms of service\\\" acceptance, a date field for \\\"date of birth,\\\" and a dropdown menu field for \\\"country of residence.\\\"\"",
    "\"Generate Python code that implements a Django GraphQL backend using JSON Web Tokens for authentication, including token generation, validation, and revocation.\"",
    "\"Generate Python code that creates a simple GUI using PySimpleGUI, including a layout manager, widgets, and event handling, with a focus on ease of use and extensibility.\"",
    "\"Generate Python code that uses the Boto3 library to integrate with AWS StepFunctions, allowing users to create and manage step functions, workflows, and tasks in their AWS account.\"",
    "\"Generate Python code that implements websocket support for a Flask app using the `websocket-client` library, allowing real-time communication between the client and server.\"",
    "\"Generate Python code that implements a set of mixins for Django REST framework to perform bulk CRUD operations on a model, including create, update, and destroy, with support for filtering, searching, and pagination.\"",
    "\"Generate Python code that uses regular expressions to extract information from Java source code, similar to the functionality provided by truffleHog.\"",
    "\"Generate Python code that imports the django.urls module, parses hostnames from URLs using the urlparse library, maps hostnames to URLconfs using a dictionary, and raises a Http404 error if no matching URLconf is found.\"",
    "\"Generate Python code that configures Azure services using the azure- CLI module, including creating and managing resource groups, storage accounts, virtual networks, subnets, network interfaces, public IP addresses, load balancers, application gateways, and security groups.\"",
    "\"Generate Python code that uses the `pytest-black` plugin to enable format checking with Black for a Python project.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Boto3 library to access the AWS Systems Management Parameter Store, retrieve parameters, and return their values.\"",
    "\"Generate Python code that imports the necessary libraries and uses the LibreTranslate API to perform translation tasks, such as translating text between languages, retrieving translation memories, and managing projects.\"",
    "\"Generate Python code that imports the necessary libraries and creates an Elasticsearch client object to interact with an Elasticsearch cluster, allowing for searching, indexing, and managing data in the cluster.\"",
    "\"Generate Python code that provides a variety of helpful functions for web development, including converting HTML to plain text, extracting URLs from web pages, and formatting dates according to common web formats.\"",
    "\"Generate Python code that implements a security framework for Zope, including user authentication, access control, and encryption.\"",
    "\"Generate Python code that creates an AWS CloudWatch alarm that triggers an action when a threshold is met, using the AWS CDK library.\"",
    "\"Generate Python code that uses the `requests` library to send HTTP requests to the YouTube Music API, `beautifulsoup4` to parse HTML responses, and `pandas` to manipulate data; and implements features like searching songs, retrieving song information, creating playlists, adding songs to playlists, playing music, and scraping song metadata.\"",
    "\"Generate Python code that creates an extension command module for Microsoft Azure Command-Line Tools using the `click` library, allowing users to easily interact with Azure services from the command line.\"",
    "\"Generate Python code that uses the `mkdocs` library to automatically generate documentation for a project, including parsing source files and generating HTML pages, by running the command `mkdocs build`.\"",
    "\"Sure, here's a prompt that could generate Python code to create HTML reports from JUnit results:\\n\\n\\\"Generate Python code that takes a JUnit test result file as input and produces an HTML report summarizing the test results, including pass/fail status and detailed information about each test case.\\\"\"",
    "\"Generate Python code that creates a CLI tool and a Python library for manipulating SQLite databases, using the `sqlite3` module to interact with SQLite databases, and providing functions for creating, modifying, and querying databases, as well as handling common database operations such as creation, deletion, and alteration of tables, insertion, update and deletion of data, and querying data from tables.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Azure Schema Registry client, allowing you to interact with the registry and perform operations such as creating, updating, and deleting schemas, as well as retrieving schema metadata.\"",
    "\"Generate Python code that implements a basic version of the geo_interface package, which provides a simple interface for geolocation services.\"",
    "\"Generate Python code that implements a debugging function called \\\"debug\\\" that takes a variable or expression as input and returns its value and type, like pdb.\"",
    "\"Generate Python code that uses the `emoji` library to encode and decode Unicode country flags emojis.\"",
    "\"Generate Python code that implements a fork of the Python 3 pickle module, allowing for customized serialization and deserialization of Python objects.\"",
    "\"Generate Python code that creates a function which takes in an object and returns its corresponding color, utilizing the object's attributes such as name, value, or other identifying features.\"",
    "\"Generate Python code that imports the email standard library and provides a simple wrapper around its functions, allowing users to easily send emails with customizable headers and attachments.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a client object to interact with the Magnum API, allowing users to create, read, update, and delete resources such as instances, volumes, and security groups.\"",
    "\"Generate Python code that imports the required libraries and defines a function to wrap and consume the most commonly used URL shortener APIs, such as Bitly, TinyURL, and Google URL Shortener, using their respective APIs, and returns the shortened URL.\"",
    "\"Generate Python code that imports the necessary modules, creates a Boto3 Cognito client, and uses it to log in users with SRP support, for example:\\n```\\nfrom botocore.credentials import CognitoIdentityPoolCredentials\\nfrom botocore.client import Client\\n\\n# Initialize the Cognito identity pool credentials\\ncredentials = CognitoIdentityPoolCredentials(\\n   client=Client(\\n       service='CognitoIdentityService',\\n       region='your-region'\\n   )\\n)\\n\\n# Use the credentials to log in a user with SRP\\nuser_pool = credentials.get_user_pool()\\nuser_data = {\\n   'username': input('Enter your username: '),\\n   'password': input('Enter your password: ')\\n}\\nuser = user_pool.get_user(**user_data)\\nprint(f'Logged in as {user.name}')\\n```\"",
    "\"Generate Python code that creates a producer that sends messages to a topic, consumes messages from a topic, and handles errors and exceptions.\"",
    "\"Generate Python code that sets up a basic logging system using the built-in `logging` module, including a custom formatter and a file handler that writes logs to a file named \\\"log.txt\\\" in the current working directory, and adds a context switch handler that logs any exceptions encountered during execution:\\n```\\nimport logging\\nimport logging.handlers\\nimport threading\\n\\n# Create a custom formatter\\nclass MyFormatter(logging.Formatter):\\n   def format(self, record):\\n       return \\\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\\\"\\n\\n# Create a file handler\\nfh = logging.FileHandler(\\\"log.txt\\\")\\nfh.setLevel(logging.INFO)\\nfh.setFormatter(MyFormatter())\\n\\n# Create a console handler\\nch = logging.StreamHandler()\\nch.setLevel(logging.WARNING)\\n\\n# Add a context switch handler\\ndef switch_handler(event):\\n   if event.context is not None:\\n       # Log the exception and stack trace\\n       logging.error(\\\"Context switch occurred:\\\", event.context.exception, event.context\"",
    "\"Generate Python code that imports the necessary libraries and uses the Levenshtein distance algorithm to perform sequence alignment between two given strings, returns the aligned sequences and the total edit distance.\"",
    "\"Generate Python code that imports the necessary libraries and provides an interface for interacting with the Google Cloud Asset API, including methods for asset management, such as creating, updating, and deleting assets, as well as retrieving and filtering asset metadata.\"",
    "\"Generate Python code that imports the necessary libraries for creating DAQ components in Dash, including dash, dash_core_components, and dash_html_components.\"",
    "\"Generate Python code that scans your Python project's source code, identifies classes that could benefit from being backed by a database, and automatically generates the necessary SQL schema and ORM models for you.\"",
    "\"Generate Python code that implements a multi-threaded version of the gzip module, using the `threading` module to create multiple threads that compress and decompress files in parallel.\"",
    "\"Generate Python code that uses heuristics to identify and remove boilerplate text from documents, such as legal agreements and terms of service, by analyzing the frequency and distribution of certain words and phrases.\"",
    "\"Generate Python code that implements JSON Web Token based authentication for Django REST framework by using the djangorestframework-jwt package, which provides a simple and secure way to authenticate API requests using JWT tokens.\"",
    "\"Generate Python code that imports and uses the `paramiko` library to connect to a remote server via SSH and perform various management tasks, such as creating and managing user accounts, updating server configurations, and monitoring system logs.\"",
    "\"Generate Python code that imports WebTest and Django's testing framework, and uses WebTest to run tests on Django applications.\"",
    "\"Generate Python code that imports the necessary libraries and uses them to read, manipulate, and write data in xls format, including support for xlsx and xlsm formats.\"",
    "\"Generate Python code that imports the necessary modules and uses the Azure Data Lake Store Command Module to interact with Azure Data Lake Store, performing various operations such as creating directories, uploading files, and listing file system contents.\"",
    "\"Generate Python code that uses the azure-CLI-python library to provide a command-line interface for managing MySQL and PostgreSQL databases on Microsoft Azure, including creating, updating, deleting, and listing databases, as well as running SQL queries and creating database users.\"",
    "\"Generate Python code that imports the OpenStack API client and uses it to validate digital signatures against OpenStack-specific validation criteria.\"",
    "\"Generate Python code that creates a Sanic plugin by inheriting from `sanic.Plugin` and defining the necessary methods to handle HTTP requests and responses.\"",
    "\"Generate Python code that imports the necessary modules, sets up authentication with Azure, creates a new DevTest Lab, adds virtual machines and artifacts to the lab, configures access control and networking, and starts the lab.\"",
    "\"Generate Python code that creates a TensorBoard plugin for visualizing and analyzing profiling data from TensorFlow models, including support for multiple profiling formats and customizable visualizations.\"",
    "\"Generate Python code that defines a module with a small personal collection of utility functions, such as string formatting, file reading and writing, and data structure manipulation.\"",
    "\"Generate Python code that creates an Amazon RDS database instance, database security group, and database parameter group using the CDK Construct Library for AWS.\"",
    "\"Generate Python code that plays a sound using the os module's afplay command, like so:\\n```\\nimport os\\nos.system(\\\"afplay sound.mp3\\\")\\n```\\nThis will play an MP3 file called \\\"sound.mp3\\\" in the current directory, assuming it is present.\"",
    "\"Generate Python code that imports the necessary modules and configure an Apache Airflow provider for MongoDB, allowing Airflow to interact with MongoDB databases.\"",
    "\"Generate Python code that creates a Google Cloud Endpoint to handle HTTP requests and route them to appropriate backend services, including authentication and authorization, using the Flask web framework and Google Cloud Endpoints API.\"",
    "\"Generate Python code that outputs JUnit compatible XML for test results using pyunit, similar to PyJUnitXML.\"",
    "\"Generate Python code that uses pyangbind to convert a YANG data model into a Python class hierarchy, allowing Python to manipulate data that conforms with the YANG model.\"",
    "\"Generate Python code that uses the OpenStack API to create and manage virtual machines, networks, and volumes, and tests their functionality and performance in various scenarios, such as scaling up and down, updating software, and simulating failures.\"",
    "\"Generate Python code that imports the `orjson` module and creates a typing stubs file for it using the `typing` module, so that the stubs can be used in a type-checking environment.\"",
    "\"Generate Python code that uses the PyPDF2 library to manipulate PDF files, including merging multiple PDFs into a single file, splitting a large PDF into smaller files, and extracting text and metadata from PDFs.\"",
    "\"Generate Python code that imports the necessary modules for creating a logger in a multiprocessing application, sets up a logging configuration with a designated log file and format, and logs messages at various levels (info, warning, error) from different parts of the application.\"",
    "\"Generate Python code that imports the requests library and uses it to perform an OAuth2 flow, including registering a client application, obtaining authorization from a user, and using an access token to make API calls on behalf of the user.\"",
    "\"Generate Python code that imports the necessary libraries for Dask and CUDA interactions, sets up a Dask cluster on GPU nodes, and runs a computation on the cluster using CUDA acceleration.\"",
    "\"Generate Python code that imports the weakref module and creates a class called WeakMethod that stores a weak reference to a bound method, allowing it to be called even after the original object has been garbage collected.\"",
    "\"Generate Python code that interfaces with AMPL solvers and parses AMPL output to extract solution data using the `subprocess` module for running AMPL commands, `re` for regular expressions, and `pandas` for data manipulation.\"",
    "\"Generate Python code that implements a mechanism allowing objects to obtain attributes from the containment hierarchy they're in, using a dictionary to store the attributes and a recursive function to traverse the hierarchy.\"",
    "\"Generate Python code that creates a decorator factory function that takes a function name and returns a decorator function that can be used to decorate other functions, similar to the `decorator` module but with a simpler syntax.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the DomoAPI class to interact with the Domo API.\"",
    "\"Generate Python code that uses regular expressions to replace profanity and leet speak in strings with blazingly fast performance.\"",
    "\"Generate Python code that uses beautifulsoup and requests libraries to extract the original and updated publication dates from URLs and web pages by parsing the HTML content and searching for relevant date information.\"",
    "\"Generate Python code that imports the Azure CLI module and uses it to manage Azure resources, including creating and managing virtual machines, storage accounts, and networks.\"",
    "\"Generate Python code that uses the google-api-python-client library to create, manage, and deploy APIs using the Google Endpoints API management platform.\"",
    "\"Generate Python code that imports the NumPy module, creates a custom dtype for quaternions, and adds it to the list of dtypes available in NumPy.\"",
    "\"Generate Python code that uses NLTK and scipy to probabilistically split concatenated words based on English Wikipedia uni-gram frequencies, like in the given package description.\"",
    "\"Generate Python code that imports the necessary libraries and uses Petastorm to read and write Parquet files for data storage and retrieval in machine learning models using Tensorflow or PyTorch.\"",
    "\"Generate Python code that creates an asynchronous web scraping service using async-await and BeautifulSoup to scrape data from websites and save it to a MongoDB database.\"",
    "\"Generate Python code that imports the necessary libraries and uses APIs to query Minecraft servers for their status and capabilities, such as online players, game mode, and version number.\"",
    "\"Generate Python code that imports the necessary modules and uses the \\\"azure.datalake\\\" module to interact with Azure Data Lake Storage Gen2 and execute Data Lake Analytics jobs.\"",
    "\"Generate Python code that imports the tornado module, creates an instance of the tornado.web.Application class, and defines a route for handling CORS requests; then, it sets up CORS handlers for each route using the tornado.web.CorsAwareRouter class.\"",
    "\"Generate Python code that imports the necessary modules for working with Apache Spark, creates a SparkContext, and configures it with essential settings.\"",
    "\"Generate Python code that imports the necessary modules and uses the `cosmosdb` module to interact with a Cosmos DB database, such as creating a database, creating a container, adding items to the container, querying the container, and deleting the container.\"",
    "\"Generate Python code that implements a rotating logging handler for multiple processes using the TimedRotatingFileHandler class from the logging module, creating a new log file every day and keeping the last X logs, where X is a configurable parameter.\"",
    "\"Generate Python code that creates an interactive dashboard using Matplotlib and Jupyter Notebook for data visualization and analysis, allowing users to plot, manipulate, and explore data in an intuitive and user-friendly manner.\"",
    "\"Generate Python code that implements a class called \\\"ChunkedArray\\\" that takes in a tuple of dimensions, a dtype, and a compression method, and returns an N-dimensional array object that supports efficient chunked access and compression.\"",
    "\"Generate Python code that imports the pytz library and uses it to support internationalization for time zones and territories by creating a dictionary of time zone data and using it to convert between time zones and display localized time information.\"",
    "\"Generate Python code that uses the `newsfile` module to create a news file for a project, including the project name, version number, and a list of features, with each feature described in a separate section.\"",
    "\"Generate Python code that implements the Data Encryption Standard (DES) and Triple-DES encryption algorithms using pure Python, without any external libraries or dependencies.\"",
    "\"Generate Python code that uses the `Flask` and `Freezer` packages to freeze a Flask application into a set of static files:\\n```\\nimport flask\\nfrom freezer import Freezer\\n\\napp = flask.Flask(__name__)\\n\\n# Define your Flask routes and application logic here\\n\\nfreezer = Freezer(app)\\nfreezer.freeze()\\n```\"",
    "\"Generate Python code that imports the `print` function and uses a loop to print out each item in a list, like so:\\n```\\nitems = ['apple', 'banana', 'orange']\\nfor item in items:\\n   print(item)\\n```\"",
    "\"Generate Python code that imports the required modules and creates a PostgreSQL database connection, allowing you to execute SQL queries and interact with the database.\"",
    "\"Generate Python code that takes a list of words and returns their symspell equivalent, using the SymSpell algorithm to preserve word similarity while changing only a few letters at a time.\"",
    "\"Generate Python code that imports the necessary libraries and provides an interface for interacting with CloudFoundry, including logging in, creating and managing applications, services, and routes, as well as accessing account and organization information.\"",
    "\"Generate Python code that instruments Starlette applications using OpenTelemetry, capturing performance metrics and tracing requests across services.\"",
    "\"Generate Python code that imports the discord.py library and creates a bot instance, allowing you to interact with the Discord API.\"",
    "\"Generate Python code that imports a permissive filename sanitizer module and uses it to sanitize a list of filenames, removing any characters that are not allowed in file names on the target platform, while preserving the original case and spacing of the input filenames.\"",
    "\"Generate Python code that creates a Discord bot that greets users when they join a server, allows them to play a text-based adventure game, and awards them a virtual currency for completing tasks.\"",
    "\"Generate Python code that imports the necessary libraries and defines a class with methods for tokenization, stemming, lemmatization, parsing, and semantic reasoning.\"",
    "\"Generate Python code that imports the subprocess module and creates a wrapper function for running shell commands, providing a convenient and secure way to execute external programs while avoiding shell injection attacks.\"",
    "\"Generate Python code that implements a library for W3C Provenance Data Model supporting PROV-JSON, PROV-XML, and PROV-O (RDF) using the `xmlschema` library for parsing XML schema files and the `rdflib` library for working with RDF data.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes a message as input and produces an ASCII art representation of the message using the \\\"box drawing\\\" characters (\\u2500, |, /, \\\\), like those found in the ASCII Art Library For Python package.\"",
    "\"Generate Python code that imports the DNS library and performs DNS lookups for a list of domain names, printing the IP addresses and hostnames for each domain name.\"",
    "\"Generate Python code that creates a Service Fabric cluster, deploys a application to it, and queries the status of the application using the Service Fabric CLI.\"",
    "\"Generate Python code that disables migrations when running Django tests by adding the following line to the settings.py file: `MIGRATION_MODULES = ['django.contrib.auth.migrations', 'django.contrib.contenttypes.migrations']`\"",
    "\"Generate Python code that uses the `subprocess` module to run the installation script for a given package, while providing assistance to the user during the installation process by displaying instructions and options.\"",
    "\"Generate Python code that imports the HuggingFace/NLP library and loads a specific dataset from it, such as \\\"datasets.load_dataset('imdb', split='train')\\\".\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the RocketChat class, allowing you to interact with the Rocket.Chat API and perform various tasks such as sending messages, managing channels, and retrieving user information.\"",
    "\"Generate Python code that imports the necessary modules for interacting with Azure Cognitive Services, such as `azure.cognitiveservices` and `requests`, and uses them to perform various cognitive services tasks, such as image analysis, sentiment analysis, and language translation.\"",
    "\"Generate Python code that imports the necessary libraries and creates an AWS ACM certificate, a private key, and an Amazon CloudWatch events rule that triggers an AWS Lambda function when the certificate is near expiration.\"",
    "\"Generate Python code that uses the gspread library to format Google Sheets worksheets, including setting background colors, font sizes and styles, and adding borders and images.\"",
    "\"Generate Python code that imports the required modules and uses the Azure CDN command module to configure and manage content delivery networks in Microsoft Azure, including creating and deleting CDN resources, configuring CDN settings, and monitoring CDN performance.\"",
    "\"Generate Python code that creates a pipeline management system for clustered environments, utilizing modules like `fabric` and ` Apache Airflow` to automate workflows, monitor task statuses, and manage resource allocation.\"",
    "\"Generate Python code that uses the SQLAlchemy-Alembic library to create and manage database procedures and views across different versions of a database, allowing for backwards-compatible changes and version control.\"",
    "\"Generate Python code that implements a fully-featured Modbus protocol stack, including support for RS-232, RS-485, and TCP communication channels, with functionality for sending and receiving Modbus commands and responses, handling exceptions and errors, and supporting both master and slave roles.\"",
    "\"Generate Python code that uses the TensorFlow and Apache Airflow libraries to orchestrate machine learning workflows, including data preprocessing, model training, and deployment, with features such as automated hyperparameter tuning, model evaluation, and collaboration support.\"",
    "\"Generate Python code that uses the UA Parser library to detect mobile and tablet browsers by parsing the user agent string and checking for patterns indicative of mobile or tablet devices.\"",
    "\"Generate Python code that imports the requests library and uses it to send HTTP requests to a Stan server, allowing users to perform Bayesian inference tasks using Stan's APIs.\"",
    "\"Generate Python code that implements the XMODEM protocol for sending and receiving files over a serial connection, including error detection and correction, using the struct module for data packaging and the serial module for communication.\"",
    "\"Generate Python code that uses the `pyinstaller` library to create standalone executables from Python scripts, allowing for easy distribution and execution of the scripts on systems without Python installed.\"",
    "\"Generate Python code that launches a Jupyter notebook server, creates a new notebook, and opens it in a web browser using the `jupyter` and `webbrowser` modules:\\n```\\nimport jupyter\\nfrom webbrowser import open_new_tab\\n\\njupyter.notebook.generate_config(allow_root=True)\\njupyter.notebook.start_notebook(port=8888)\\nopen_new_tab('http://localhost:8888')\\n```\"",
    "\"Generate Python code that imports the necessary modules, configures an Apache Hive connection, creates a DAG, and uses the HiveOperator to execute a Hive query and load the results into a database table.\"",
    "\"Generate Python code that imports the lzma module and uses it to decompress an XZ/LZMA compressed file, similar to how the lzma module in Python 3.3 allows for decompression of such files.\"",
    "\"Generate Python code that instruments Elasticsearch requests using OpenTelemetry tracing by calling `opentelemetry.instrument.elasticsearch()` on each Elasticsearch client interaction, allowing for distributed tracing of requests across services.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Recurly client with API credentials to manage subscriptions, billing, and customers for a SaaS application.\"",
    "\"Generate Python code that imports the Kitchen package and uses its functionality to perform various tasks, such as data manipulation and visualization, statistical analysis, and machine learning tasks.\"",
    "\"Generate Python code that imports the required modules and annotates the types of the boto3.IAM 1.34.8 service using mypy-boto3-builder 7.23.0, like this:\\n```python\\nfrom typing import TypeVar, Callable\\nfrom botocore.client import BaseClient\\nfrom mypy_boto3_builder import MyPyBoto3Builder\\n\\n# Define type variables for the client and builder classes\\nClient = TypeVar('Client', bound=BaseClient)\\nBuilder = TypeVar('Builder', bound=MyPyBoto3Builder)\\n\\n# Create a client instance with type hints\\nclient: Client = boto3.client('iam')\\n\\n# Build the API interfaces with type hints\\nbuilder: Builder = MyPyBoto3Builder(client)\\n\\n# Generate type-annotated function definitions for the APIs\\nfor func in builder.functions:\\n   func.generate_type_annotations()\\n```\"",
    "\"Generate Python code that imports the required libraries and sets up an S3 client with the necessary configurations to upload files to an S3 bucket asynchronously using worker pools, caches header information, and supports async uploads.\"",
    "\"Generate Python code that imports the necessary modules and wraps the SystemConfiguration framework on macOS, providing a convenient interface for accessing system settings and configuration.\"",
    "\"Generate Python code that uses the Django syncdb management command to detect backward incompatible migrations for a Django project by comparing the database schema before and after each migration.\"",
    "\"Generate Python code that creates a GraphQL mutation resolver using Graphene Django or Flask-Graphql, allowing users to upload files and store them in a specified directory, while also validating the uploaded files against a set of defined rules.\"",
    "\"Generate Python code that creates a minimal stub package with a name, version, and description, and includes a setup function that prints a success message when installed using pip.\"",
    "\"Generate Python code that imports the necessary libraries and defines functions for 3D coordinate transformations, such as converting between cartesian and spherical coordinates, calculating distances and angles between 3D points, and transforming 3D points by rotations, translations, and scaling.\"",
    "\"Generate Python code that imports necessary libraries and performs global sensitivity analysis using Sobol', Morris, FAST, DGSM, PAWN, HDMR, Moment Independent and fractional factorial methods.\"",
    "\"Generate Python code that imports the django module and provides a utility function to handle Django-related tasks, such as setting up databases, creating tables, and interacting with the database.\"",
    "\"Generate Python code that uses the wkhtmltopdf library to convert HTML files to images via the WebKit rendering engine and Qt, allowing for the creation of high-quality raster images from dynamic web content.\"",
    "\"Generate Python code that creates a command line interface for interacting with Mbed OS, allowing users to execute commands, view device information, and install applications on their Mbed-based microcontrollers.\"",
    "\"Generate Python code that uses BeautifulSoup to extract all the text elements from an HTML file and print them to the console.\"",
    "\"Generate Python code that reads log file lines that have not been read using the `pandas` library by calling the `read_csv()` function with the `skiprows` parameter set to the number of rows that have already been read.\"",
    "\"Generate Python code that uses the GitPython library to search through Git repositories for high entropy strings, by iterating through commits and analyzing the contents of each commit using the entropy module.\"",
    "\"Generate Python code that creates a flexible plugin system for Napari using Pluggy, allowing developers to easily create and manage plugins for various data processing and analysis tasks.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of a class that can communicate with GPIB, RS232, TCP/IP, and USB instruments using the VISA protocol.\"",
    "\"Generate Python code that imports the pandas and dagster libraries and provides examples of how to use them together to create data pipelines.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AvroSerialization class from the Microsoft Azure Schema Registry Avro Serializer Client Library, allowing you to serialize and deserialize data using Avro schema id.\"",
    "\"Generate Python code that uses the SAP HANA API to perform machine learning tasks, such as data preprocessing, feature engineering, model training, and prediction, on data stored in SAP HANA databases.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API connection to SparkPost to send emails with personalized content and track their delivery status.\"",
    "\"Generate Python code that imports the rabbitmq-c library and creates an AMQP client that can connect to a RabbitMQ server, send messages to a queue, and receive messages from a queue.\"",
    "\"Generate Python code that imports the necessary libraries and provides utility functions for working with Unicode graphemes, such as breaking down text into individual graphemes, iterating over the graphemes in a string, and comparing the similarity between two strings using grapheme-level comparison.\"",
    "\"Generate Python code that sets up a plug-and-play continuous integration system using Django and Jenkins, allowing for automated testing and deployment of Django applications on a Jenkins instance.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `requests` library to make API calls to the EnergyCapApi, allowing users to manipulate energy consumption data and create reports.\"",
    "\"Generate Python code that launches a subprocess to execute a given Python program, using the `subprocess` module.\"",
    "\"Generate Python code that implements a trie data structure using a class Trie, with methods for inserting, searching, and deleting strings, and a method to retrieve all keys in the trie.\"",
    "\"Generate Python code that reads and writes ZIP files using the zipfile module, backported from Python 3.6, by doing the following:\\n\\n1. Importing the required modules: `import os` for creating directories and `zipfile` for reading and writing ZIP files.\\n2. Creating a directory to store the ZIP file: `os.makedirs('output_dir', exist_ok=True)`.\\n3. Creating an empty ZIP file in the directory: `with zipfile.ZipFile('output_dir/example.zip', 'w') as zipf: pass`.\\n4. Adding files to the ZIP file: `with open('file1.txt', 'rb') as f1, open('file2.txt', 'rb') as f2: zipf.write(f1, arcdata=f2)`.\\n5. Closing the ZIP file: `zipf.close()`.\\n6. Reading the ZIP file: `with zipfile.ZipFile('output_dir/example.zip', 'r') as zipf: print(zipf.namelist())`.\"",
    "\"Generate Python code that imports the Threading class from the standard library and creates a custom class that inherits from threading.Thread and overrides the run method to execute a callable function passed in the constructor.\"",
    "\"Generate Python code that imports the requests library, makes an API call to a currency exchange rate API, stores the response in a dictionary, and then uses that data to convert between different currencies.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Socrata Open Data API to retrieve, manipulate, and visualize data from various sources, including government, research, and other organizations.\"",
    "\"Generate Python code that implements a bi-directional transliterator for converting text between two languages, using the Google Translate API and BeautifulSoup library to parse HTML tags and preserve formatting.\"",
    "\"Generate Python code that imports the necessary modules and creates a SQLAlchemy dialect for interacting with Teradata databases using the Teradata SQL driver.\"",
    "\"Generate Python code that imports the necessary libraries for deep learning with Keras and Apache MXNet backend support:\\n```\\nimport keras\\nfrom keras.backend.mxnet import MXNet\\n```\"",
    "Generate Python code that creates a data model for a given dataset, including defining tables, columns, and relationships between them.",
    "Generate Python code that generates a SQL schema from a data model, including creating tables, columns, and constraints.",
    "Generate Python code that populates a database with data from a CSV file, using the generated SQL schema.",
    "Generate Python code that performs CRUD (create, read, update, delete) operations on data in a database, using the generated SQL schema.",
    "Generate Python code that performs data validation and cleaning, such as handling missing values, outliers, and inconsistencies.",
    "Generate Python code that performs data transformation and aggregation, such as grouping, filtering, and sorting data.",
    "Generate Python code that visualizes data, such as creating plots, charts, and maps.",
    "Generate Python code that machine learning models, such as linear regression, decision trees, and clustering algorithms.",
    "Generate Python code that performs data storytelling,",
    "\"Generate Python code that formats Markdown text using SmartyPants, a syntax highlighter and code formatter, by installing the required packages and importing them in the script, then passing the Markdown text through the SmartyPants parser to produce formatted HTML output.\"",
    "\"Generate Python code that implements a library with functions for various string similarity and distance measures, such as Levenshtein distance, Jaccard similarity, and cosine similarity, using classes and modules to organize the code and provide clear documentation for each function.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Spark session, then uses the spark-sql module to create a Spark DataFrame from a variety of data sources, such as CSV, JSON, and Parquet files, and performs various data manipulation and analysis operations on the DataFrame using the provided API endpoints, similar to the functionality offered by the pandas library.\"",
    "\"Generate Python code that imports the required libraries and uses the TTS engines specified in the question to convert text to speech without an internet connection or delay.\"",
    "\"Generate Python code that imports the usb module and uses it to iterate over all connected USB devices, printing their device names and classes.\"",
    "\"Generate Python code that implements a Redis session backend for Django by creating a custom Django session backend class that stores session data in Redis, using the py-redis library to interact with Redis, and setting up the necessary configuration options in Django's settings file.\"",
    "\"Generate Python code that creates a custom pandas flavor with a new data type and associated functions, similar to how the `pandas` package is used for data manipulation and analysis.\"",
    "\"Generate Python code that uses the Sphinx documentation generator and the Click library to create documentation for command-line applications.\"",
    "\"Generate Python code that uses the `mlinterpret` library to interpret machine learning models, providing insights into their predictions and decision-making processes.\"",
    "\"Generate Python code that uses the Azure Batch AI client library to interact with Azure Batch AI resources from the command line, including creating and managing batch accounts, pools, and jobs, submitting job files, monitoring job progress, and retrieving output files.\"",
    "\"Generate Python code that wraps the CoreBluetooth framework on macOS, allowing for easy interaction with Bluetooth Low Energy devices from Python scripts and applications.\"",
    "\"Generate Python code that uses the PyPDF2 library to extract text from PDF documents, the BeautifulSoup library to parse HTML and XML documents, and the re module to search for and extract text patterns in various file formats, including Microsoft Office documents.\"",
    "\"Generate Python code that imports the necessary libraries and computes string edit distances and similarities between two strings using dynamic programming and mathematical formulas, then returns the results in a user-friendly format.\"",
    "\"Generate Python code that imports the picosat library and uses it to solve a given Boolean satisfiability problem (SAT).\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to the vSphere Web Services SDK, allowing you to manage virtual machines, networks, and other resources in your vSphere environment.\"",
    "\"Generate Python code that imports the necessary modules and creates an asynchronous Redis client that can perform key-value operations such as set, get, delete, and exists, using the aiohttp library for asynchronous HTTP requests.\"",
    "\"Generate Python code that imports the flask_themes package and creates a theme directory with a template file, which can be used to customize the appearance of a Flask application.\"",
    "\"Generate Python code that creates an XML signature using the XAdES library, allowing for the validation of digital signatures in XML documents.\"",
    "\"Generate Python code that uses the `nosetests` framework to split test suites into smaller parts and run them in parallel, using multiple processes or threads to take advantage of multi-core systems.\"",
    "\"Generate Python code that uses the `subprocess` module to create a new Git repository in the current directory, initializes the repository with a `.git` folder, and adds all files in the current directory to the repository.\"",
    "\"Generate Python code that imports the necessary modules and formats unit test output with ANSI escape codes for colors, boldness, and italics.\"",
    "\"Generate Python code that imports the necessary modules for sending emails using the modern Python library for emails.\"",
    "\"Generate Python code that uses a dictionary to convert numbers from base 10 integers to base X strings and back again, where X is a user-inputted base.\"",
    "\"Generate Python code that instruments FastAPI applications using OpenTelemetry for distributed tracing, logging, and metrics.\"",
    "\"Generate Python code that imports and uses the Lob Python bindings to interact with Lob's API, allowing developers to easily integrate Lob's services into their applications, including sending and receiving mail, managing addresses, and tracking packages.\"",
    "\"Generate Python code that uses pycodestyle to check a cell for PEP 8 compliance:\\n```\\nimport pycodestyle\\n\\ndef check_pep8_compliance(cell):\\n   \\\"\\\"\\\"\\n   Returns True if the cell is PEP 8 compliant, False otherwise.\\n   \\\"\\\"\\\"\\n   style = pycodestyle.StyleGuide()\\n   report = style.check_code(cell)\\n   return report.total_errors == 0\\n```\"",
    "\"Generate Python code that imports the stringdist module, which provides various functions for calculating string distances, with an optional C extension module for optimal performance.\"",
    "\"Generate Python code that imports the Flask and Redis modules, creates a Flask app with a route for storing data in Redis, and implements a function to store data in Redis using the `redis.set` method.\"",
    "\"Generate Python code that uses the `requests` library to send HTTP requests to the Report Portal's API, providing the necessary credentials and payload information to report test results.\"",
    "\"Generate Python code that creates a CDK construct for an AWS CodeDeploy deployment, including the necessary resources and configuration for a successful deployment.\"",
    "\"Generate Python code that implements a higher level datagram support for Asyncio, allowing users to create datagram sockets and send/receive datagrams with ease, using the async/await syntax and providing a simple and intuitive API for building efficient network applications.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the MailjetV3 class, which can be used to interact with the Mailjet API to send emails, retrieve email templates, and perform other email-related operations.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function that runs an automated machine learning (AutoML) workflow for public use, using the common code associated with running AutoML and excluding Azure-specific code.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a simple interface for controlling GPIO pins on a Raspberry Pi using the RPi.GPIO library, allowing users to easily manipulate GPIO pins and read their states.\"",
    "\"Generate Python code that imports the `unittest` module, creates a test case class, and defines a method that uses the `assert` statement with a delay parameter to check if a condition is true after a specific amount of time.\"",
    "\"Generate Python code that imports the required libraries and creates a function that takes a tile provider as an argument and returns a list of available tiles from the provider.\"",
    "\"Generate Python code that uses the `transformers` library to implement byte-pair embeddings in 275 languages, similar to the `bpe` package, by first tokenizing text data and then mapping each token to a unique integer index, and finally using these indices to train a machine learning model.\"",
    "\"Generate Python code that imports the requested module and creates an empty dictionary to store the attributes:\\n```\\nimport attr\\nmy_dict = {}\\n```\\nAlternatively, you can use the `attr.ib` function to create an attribute dictionary directly:\\n```\\nmy_dict = attr.ib()\\n```\"",
    "\"Generate Python code that uses the `pytest` module to list all unused fixtures in a test file, by iterating over the fixtures defined in the file and checking if they are used in any test function.\"",
    "\"Generate Python code that imports the necessary modules and uses the `scsi_target` module to interact with the Linux kernel SCSI target (LIO) to perform various operations such as creating a new LIO target, adding a disk to the target, and executing commands on the target.\"",
    "\"Generate Python code that creates a command-line interface for managing Redis instances on Microsoft Azure, including creating and deleting Redis instances, adding and removing keys, and updating existing data.\"",
    "\"Generate Python code that imports the required libraries and sets up an asynchronous communication layer for Async PRAW 7+ using the asyncio library and aiohttp library, allowing for efficient and scalable communication with Reddit's API.\"",
    "\"Generate Python code that sends HTTP requests to the European Bioinformatics Institute's (EMBL) Electronic Application Programming Interface (eAPI) to perform various bioinformatics tasks, such as querying databases, retrieving sequence data, and performing computational analyses.\"",
    "\"Generate Python code that imports the ed25519 library and uses it to create a public-key signature for a given message, using a private key stored in a file.\"",
    "\"Generate Python code that uses the TFLite API to convert trained machine learning models into TFLite format and optimizes them for deployment on mobile devices, allowing developers to easily integrate TFLite models into their iOS and Android apps.\"",
    "\"Generate Python code that implements custom class-based views for Django, including render methods, URL patterns, and any necessary templates or forms, using Django's built-in view functionality as a starting point.\"",
    "\"Generate Python code that creates a Spectrum instance using spotinst-agent, allowing for remote script execution, data collection, and application deployment.\"",
    "\"Generate Python code that creates a Flask-based web application with MongoDB support, user authentication, and a simple CRUD interface using the Flask-Mongoengine and Flask-Login packages.\"",
    "\"Generate Python code that uses the `py.test` framework to create a plugin for validating Jupyter notebooks, including parsing notebook files, executing cells, and reporting test results.\"",
    "\"Generate Python code that uses the `listfiles` function from the `os` module and the `replace` method to modify the file names, replacing all occurrences of \\\"crap\\\" with an empty string, resulting in a list of cleaned up file names.\"",
    "\"Generate Python code that imports the Flask framework, replaces the default `flask shell` command with a new command that runs an IPython kernel, and starts the Flask development server with the new command.\"",
    "\"Generate Python code that uses the discord.py library to create a Discord bot that supports slash commands, allowing users to execute custom commands by typing \\\"/command\\\" in a server channel.\"",
    "\"Generate Python code that uses the kml module to read and parse KML files, and the geopy library to perform geometric calculations and convert between different coordinate systems.\"",
    "\"Generate Python code that imports the desired template engine, such as Jinja2 or Mako, and creates a wrapper module that provides a common API for rendering templates, including functions for loading templates, retrieving template variables, and rendering the template with the given context.\"",
    "\"Generate Python code that imports the required libraries and defines a Telegram bot with simple route decorators using the `python-telegram-bot` library and the `decorator` library.\"",
    "\"Generate Python code that uses PyTorch to solve ordinary differential equations (ODEs) and perform adjoint sensitivity analysis for optimizing model parameters.\"",
    "\"Generate Python code that implements an EfficientNet model using Keras and TensorFlow Keras, similar to the original implementation in the paper \\\"EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks\\\" by Google Research.\"",
    "\"Generate Python code that imports the necessary modules and classes from the `apache-airflow-providers-oracle` package to create an Oracle connection and execute a SQL query.\"",
    "\"Generate Python code that uses the Boto3 library to interact with AWS services, and the Fabric library to run commands on a filtered set of EC2 instances.\"",
    "\"Generate Python code that parses a YAML configuration file and provides easy access to structured data using the `yaml` module and dictionary manipulation.\"",
    "\"Generate Python code that uses the flake8 library to check for syntax errors in Python files, ignoring individual error codes per file.\"",
    "\"Generate Python code that creates a JupyterLab extension for version control using Git by implementing a toolbar button that opens a terminal window with a Git Bash prompt, allowing users to execute Git commands and view commit history.\"",
    "\"Generate Python code that parses, audits, queries, builds, and modifies Cisco IOS-style and JunOS-style configuration files using the PyCli tool.\"",
    "\"Generate Python code that uses the `xml.etree.ElementTree` module to parse an XML string and convert it into a dictionary, and also uses the `json` module to convert the dictionary back into an XML string.\"",
    "\"Generate Python code that imports the necessary modules and creates a dictionary with entries from the SudachiPy - Full Edition dataset, allowing users to search for and retrieve information on various sudoku puzzles and their solutions.\"",
    "\"Generate Python code that creates a transparent reverse proxy server using the `http.server` module and allows web applications to run on any device, similar to how `websockify` works, but without requiring administrative privileges.\"",
    "\"Generate Python code that uses the `feedback` module in the Microsoft Azure Command-Line Tools to send feedback on the usage of the Azure CLI.\"",
    "\"Generate Python code that parses MediaWiki wikicode using the MWParserFromHell library, returning a parse tree that can be used for further analysis and manipulation.\"",
    "\"Generate Python code that uses the python-telegram-bot library to create a Telegram bot that can receive and respond to messages, interact with users, and perform various tasks using the Telegram API.\"",
    "\"Generate Python code that implements a pattern-matching language using OMeta for Python 3 and 2, allowing users to define patterns and match them against strings, integers, and other data types, with support for nested patterns, variables, and user-defined functions.\"",
    "\"Generate Python code that implements a machine learning orchestration system, which manages the lifecycle of multiple ML models, allows for scalable deployment, and provides automated model training and testing capabilities.\"",
    "\"Generate Python code that truncates datetime objects to a set level of precision using the datetime module's round() method, like this:\\n```\\nimport datetime\\n\\ndef truncate_datetime(dt, precision):\\n   return dt.round(precision)\\n```\\nThis code takes a datetime object `dt` and an integer `precision` indicating the desired level of precision (e.g. 0 for seconds, 1 for minutes, etc.), and returns a new datetime object that has been rounded to the nearest unit of time at the specified precision.\"",
    "\"Generate Python code that imports the tweepy library and sets up an API object to interact with the Twitter Ads API, using environment variables for authentication credentials.\"",
    "\"Generate Python code that imports the necessary modules and creates a function that accepts a TGCall object and an MTProto instance as arguments, and uses the TGCall object to make a call to the specified number using the MTProto instance as the connection.\"",
    "\"Generate Python code that imports the `wsgiref` module, creates a random selection of WSGI servers using a list comprehension, and starts each server in a separate thread using the `threading` module.\"",
    "\"Generate Python code that implements a custom serialization method for un-pickle-able objects using a custom subclass of `pickle.Pickler` that adds support for saving and loading the object's state, allowing it to be successfully picked and used in other parts of the program.\"",
    "\"Sure, here's a prompt that could generate Python code to implement Luhn check digit verification:\\n\\n\\\"Generate Python code that takes in a string of digits as input and returns True if the provided string passes the Luhn check and False otherwise.\\\"\"",
    "\"Generate Python code that creates a MongoDB collection using PyMongo and defines a document structure with fields for entity, attribute, and value, then implements a generic ODM on top of PyMongo using PyMODM.\"",
    "\"Generate Python code that imports the Google Cloud Storage client library for App Engine and uses it to perform streaming reads and writes to Google Cloud Storage, with a focus on stability and a better developer experience.\"",
    "\"Generate Python code that uses Redis as a job input/output coordinator by creating a Redis queue for jobs, processing jobs from the queue, and marking them as completed in the queue once they are done.\"",
    "\"Generate Python code that implements a ZODB backend that stores pickles in a relational database using SQLAlchemy to interact with the database, and uses Python's built-in `pickle` module to serialized and deserialize the data.\"",
    "\"Generate Python code that imports the required modules and annotates the types of the boto3.KMS 1.34.14 service using mypy-boto3-builder 7.23.0, like this:\\n```python\\nfrom typing import List\\nfrom botocore.client import BaseClient\\nfrom mypy_boto3_builder import Botowrapper\\n\\nKms = Botowrapper(service='kms', region='us-east-1')\\n\\n@Kms.client\\nclass KmsClient:\\n   def __init__(self) -> None:\\n       self.client = Kms.create_client()\\n\\n   def encrypt(self, plaintext: str, key_id: str) -> str:\\n       return self.client.encrypt(plaintext, key_id)\\n\\n   def decrypt(self, ciphertext: str, key_id: str) -> str:\\n       return self.client.decrypt(ciphertext, key_id)\\n\\n   def create_key(self, name: str, description: str) -> str:\\n       return self.client.create_key(\"",
    "Generate Python code that instruments a function using Epsagon's API, allowing you to track the function's execution time and memory usage.",
    "Generate Python code that instruments a class method using Epsagon's API, allowing you to track the method's execution time and memory usage.",
    "Generate Python code that instruments a Python module using Epsagon's API, allowing you to track the module's execution time and memory usage.",
    "Generate Python code that instruments a specific line of code within a function using Epsagon's API, allowing you to track the execution time and memory usage of that line of code.",
    "Generate Python code that instruments a list of functions using Epsagon's API, allowing you to track the execution time and memory usage of each function in the list.",
    "Generate Python code that instruments a dictionary of functions using Epsagon's API, allowing you to track the execution time and memory usage of each function in the dictionary.",
    "Generate Python code that instruments",
    "\"Generate Python code that imports the necessary libraries, sets up the figure and axis objects, and creates a variety of map types using Matplotlib's pyplot module.\"",
    "\"Generate Python code that uses Boto3 to interact with AWS services, such as creating an Amazon S3 bucket, uploading files to it, granting permissions, and triggering AWS CodeBuild to run tests and build a Docker image, then create an AWS CodePipeline to automate the process.\"",
    "\"Generate Python code that imports the Singer.io utility library and uses it to create a PipelineWise-compatible pipeline for data processing.\"",
    "\"Generate Python code that imports django-test-plus and uses its features to write more efficient and effective unit tests for a Django application.\"",
    "\"Generate Python code that creates a hosts file manager library, allowing for easy modification and management of hosts files, using the os and re modules to read and write files, and providing functions for adding, removing, and modifying host entries.\"",
    "\"Generate Python code that imports the necessary modules and uses the Kerberos protocol to authenticate with a server, encrypting data sent over the network and decrypting data received from the network.\"",
    "\"Generate Python code that uses the `google-protobuf` library to convert Protocol Buffers version 3 (protobuf3) messages to SrcML format, and vice versa, using the `srcml` library.\"",
    "\"Generate Python code that imports the required libraries, sets up a Facebook login, and uses the WebDriverAgent to automate Facebook actions.\"",
    "\"Generate Python code that imports TensorFlow and uses its probabilistic modeling and statistical inference capabilities to build and train machine learning models, perform Bayesian inference, and compute statistics over large datasets.\"",
    "\"Generate Python code that uses the requests library to make API calls to the Intuit API, using the OAuth 2.0 protocol for authentication, and returns access tokens and refresh tokens for use in subsequent API calls.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Dagster instance with a PostgreSQL connection, allowing you to define and run graphite-style workflows using Python code.\"",
    "\"Generate Python code that binds to MAD-X using Cython, allowing for efficient and type-safe access to MAD-X functions from Python.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes in a user-provided seed and returns a HOTP or TOTP token based on a given algorithm and time-based or counter-based token generation.\"",
    "\"Generate Python code that uses the `requests` library to make an HTTP request to the SharePoint Online login page, parses the HTML response to extract the CSRF token, and then uses the token to authenticate to the SharePoint Online API using the `sharepoint-auth` library.\"",
    "\"Generate Python code that imports the requests library, sends an HTTP request to a specified URL, and handles potential errors by printing a custom error message if an SSL certificate is invalid or if the request times out.\"",
    "\"Generate Python code that imports the systemd library and provides a convenient interface for interacting with systemd services, units, and daemons.\"",
    "\"Generate Python code that creates a web application framework with a modular architecture, Routes-based URL mapping, and support for multiple databases, templating engines, and web servers.\"",
    "\"Generate Python code that uses the Datadog API to collect metrics and log data from AWS Lambda functions, including setting up a DataDog account, installing the library, configuring the library for use with AWS Lambda, and using the library to collect metrics and log data from Lambda functions.\"",
    "\"Generate Python code that uses the Boto3 library to deploy contents to S3 buckets, including creating buckets, uploading files, and setting permissions.\"",
    "\"Generate Python code that uses the `pandas` library to convert DataFrames into Tableau Hyper Extracts and vice versa, utilizing the `tableau_extract` module for communication with Tableau servers.\"",
    "\"Generate Python code that implements a reinforcement learning library for TensorFlow, allowing users to easily create and train agents for various environments, including classic problems like mountain car and acrobot, as well as complex games like soccer and Atari games.\"",
    "\"Generate Python code that uses the Azure CLI module to manage Azure reservations, including creating, updating, deleting, and listing reservations, as well as retrieving reservation details and managing reservation policies.\"",
    "\"Generate Python code that imports the necessary libraries and creates a basic line plot using HoloViews, similar to `import hv; hv.plot(df['value'], df['time'])`\"",
    "\"Generate Python code that connects to a PostgreSQL database, executes SQL queries, and returns query results as Pandas DataFrames.\"",
    "\"Generate Python code that imports the Qiniu Resource Storage SDK and creates a client instance to interact with the Qiniu cloud storage service, allowing users to upload, download, and manage files and directories.\"",
    "\"Generate Python code that imports Flask and creates a decorator that wraps a view function, appending a JSONP callback parameter to the URL and responding with JSON-formatted data, using the `json` module to serialize the data.\"",
    "\"Generate Python code that implements an ASGI middleware to emit timing metrics using statsd, which logs timing information for incoming requests and responses in a format compatible with statsd, allowing for easy monitoring and analysis of application performance.\"",
    "\"Generate Python code that creates an asynchronous function using the asyncio library to read a file, write a file, and delete a file in a non-blocking way, using the os module for interacting with the file system.\"",
    "\"Generate Python code that creates a Markdown file named \\\"README.md\\\" in the root directory of a new project, containing a brief introduction to the project and a list of features implemented in the current version.\"",
    "\"Generate Python code that imports the requests library and sends a GET request to the API endpoint of Antispam Inc. to retrieve a list of IP addresses that have been flagged for spamming.\"",
    "\"Generate Python code that implements Zigbee quirks for ZHA in Home Assistant, including custom device classes and handlers for Zigbee devices, using the ZHA library and its APIs.\"",
    "\"Generate Python code that imports the Zope exceptions module and uses its classes to raise and handle custom errors in a modular and reusable way, providing informative error messages and debugging information.\"",
    "\"Generate Python code that implements a real-time logging and aggregation server using the Flask web framework, Socket.IO library, and MongoDB database.\"",
    "\"Generate Python code that uses distutils2-like setup.cfg files for a package's metadata with a distribute/setuptools setup.py file, allowing developers to define and manage their package's metadata in a consistent and platform-independent way.\"",
    "\"Generate Python code that imports the necessary modules and defines a custom JDBC provider class with the required methods to interact with a JDBC database, similar to the apache-airflow-providers-jdbc package for Apache Airflow.\"",
    "\"Generate Python code that uses natural language processing and machine learning algorithms to intelligently query a command-line interface (CLI) for example information, automatically generating queries based on the user's input and preferences to efficiently retrieve relevant data.\"",
    "\"Generate Python code that implements a conversational dialog engine using machine learning algorithms to respond to user input, similar to ChatterBot.\"",
    "\"Generate Python code that imports the PostgreSQL database driver, creates a connection to a database, and executes a query using parameterized queries.\"",
    "\"Generate Python code that imports the dbapi20 library and uses its convert_param function to convert between different parameter styles for DB API 2.0.\"",
    "\"Generate Python code that imports the necessary libraries and creates a DBAPI driver for MSSQL using the pure Python TDS protocol implementation.\"",
    "\"Generate Python code that imports the necessary libraries and provides wrappers for the CFNetwork framework on macOS, allowing developers to interact with the system's network interfaces and configure network settings using Python scripts.\"",
    "\"Generate Python code that implements authentication and registration endpoints using Django Rest Framework, including serializers for user creation and validation, login and logout views, and token-based authentication.\"",
    "\"Generate Python code that uses the `fake-useragent` library to set a random user agent for each HTTP request made using the `requests` library, like so:\\n```\\nimport requests\\nfrom fake_useragent import UserAgent\\n\\nua = UserAgent()\\n\\nresponse = requests.get('https://example.com', headers={'User-Agent': ua.generate()})\\n```\"",
    "\"Generate Python code that implements an email backend for Django compatible with SendGrid's Python library version 5 or higher, allowing for easy integration with SendGrid's email sending capabilities.\"",
    "\"Generate Python code that extracts speech features from audio files using Librosa and performs various preprocessing steps such as noise reduction, filtering, and feature extraction to prepare the data for machine learning algorithms.\"",
    "\"Generate Python code that imports pytest and creates a custom marker named \\\"group\\\" to decorate test functions, along with a pytest.mark.parameterize wrapper to split the tests into equally-sized groups.\"",
    "\"Generate Python code that implements a portfolio optimization algorithm using the Borg Algorithm, which is a genetic algorithm that uses a population of candidate solutions and iteratively evolves them through a process of selection, crossover, and mutation to find the optimal solution for a given problem.\"",
    "\"Generate Python code that uses the `requests` and `json` modules to retrieve the latest version of a PyPI package and compares it to the installed version using the `packaging` module, raising a warning if the installed version is outdated.\"",
    "\"Generate Python code that uses the pdbx library to provide a remote vanilla PDB (over TCP sockets) with proper handling around connection failures and CI, without any extraneous features or dependencies.\"",
    "\"Generate Python code that imports the necessary modules and configures an Apache Airflow provider using the `DockerOperator` to interact with Docker containers, allowing users to create workflows that incorporate containerized tasks and services.\"",
    "\"Generate Python code that implements a support library for the Humanitarian Exchange Language (HXL) using the HXL standard, providing tools for data manipulation, transformation, and serialization in accordance with the HXL specifications.\"",
    "\"Generate Python code that implements a seralize and deserialize function similar to PHP's `serialize` and `unserialize` functions using the `pickle` module.\"",
    "\"Generate Python code that uses spaCy to perform coreference resolution with neural networks by importing the necessary modules, loading a pre-trained model, and using it to process text and identify coreferent entities.\"",
    "\"Generate Python code that takes a string as input and returns its inflectional forms, such as singular, plural, and gender-specific forms, using a dataset of predefined inflection rules.\"",
    "\"Generate Python code that imports the necessary libraries, creates a progress bar using a library such as Tqdm, and updates the progress bar after each iteration of a deep learning training loop.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to a Triton Inference Server using the Triton Python client library, then uses the library to send an inference request to the server and receive the response.\"",
    "\"Generate Python code that uses the `toml` library to read and write `pyproject.toml` files, and provides an API for interacting with the project metadata, such as setting and getting project versions, dependencies, and other metadata.\"",
    "\"Generate Python code that imports the datetime module and uses its fromisoformat function to parse an ISO-formatted date string, like \\\"2023-03-14T15:30:00\\\", into a datetime object, like datetime.datetime(2023, 3, 14, 15, 30).\"",
    "\"Generate Python code that imports the subprocess module and creates a function that takes a list of commands as arguments and executes them in a pipeline fashion, using subprocess.check_output() or subprocess.run() to run each command and passing the output of each command as input to the next command.\"",
    "\"Generate Python code that uses the Boto3 library to interact with AWS Step Functions and implements a data science workflow on top of it, allowing users to create and manage step functions, input/output artifacts, and connections between steps.\"",
    "\"Generate Python code that imports the avro library and uses it to generate Avro schemas from Python classes, serialize Python instances using those schemas, and deserialize Avro data into Python instances.\"",
    "\"Generate Python code that emulates a CPU using the Unicorn CPU emulator engine, providing a modular and extensible architecture for testing and debugging purposes.\"",
    "\"Generate Python code that implements a simple template engine using a syntax similar to Handlebars.js, allowing users to render templates with dynamic data in Python 3 and 2.\"",
    "\"Generate Python code that implements a data structure for intervals and provides basic operations such as union, intersection, and difference.\"",
    "\"Generate Python code that imports the kerberos module and creates a Context object for high-level Kerberos authentication, allowing users to perform Kerberos authentication without dealing with low-level details.\"",
    "\"Generate Python code that imports the requests library and uses it to send a GET request to the whois.cymru.com API to retrieve information about a domain name, parsing the response to extract relevant details such as domain ownership and registration status.\"",
    "\"Generate Python code that simplifies authoring CloudFormation Custom Resources by creating a custom resource provider that enables the definition of custom resources in a declarative manner, using Python's native syntax and data types.\"",
    "\"Generate Python code that imports the necessary modules and creates a wrapper function for the FSEvents framework on macOS, allowing users to easily integrate file system event monitoring into their applications.\"",
    "\"Generate Python code that imports the necessary modules for working with colors, defines a class for representing colors with various constructors and methods, and includes functions for converting between different color representations.\"",
    "\"Generate Python code that imports the click module, creates a click commander class that uses a configuration file, and defines a function for each command in the configuration file.\"",
    "\"Generate Python code that creates a Django app with a custom authentication backend that allows superusers to impersonate other users, using the built-in Django auth models and an additional model for storing impersonation data.\"",
    "\"Generate Python code that imports a module only when its name is accessed, caching the imported module in a dictionary for subsequent accesses.\"",
    "\"Generate Python code that uses the `restructuredtext` library to parse reStructuredText documents and checks for valid syntax, also utilizing the `ast` library to analyze code blocks nested within the documents and ensure they have proper indentation and syntax.\"",
    "\"Generate Python code that implements a Jupyter Python COM implementation for usage in ipykernel, xeus-python, etc.:\\n```\\nfrom comtypes import CLSID, CoCreateFreeThreaded MarinaPlayer\\nimport threading\\n\\nclass JupyterCOM(object):\\n   _public_methods_ = [\\\"Install\\\", \\\"Uninstall\\\", \\\"Start\\\", \\\"Stop\\\"]\\n\\n   def __init__(self, app_name, app_version):\\n       self.app_name = app_name\\n       self.app_version = app_version\\n       self.player = None\\n\\n   def Install(self):\\n       # implement installation logic here\\n       pass\\n\\n   def Uninstall(self):\\n       # implement uninstallation logic here\\n       pass\\n\\n   def Start(self):\\n       # implement startup logic here\\n       pass\\n\\n   def Stop(self):\\n       # implement shutdown logic here\\n       pass\\n\\nif __name__ == \\\"__main__\\\":\\n   app_name = \\\"MyJupyterApp\\\"\\n   app_version = \\\"1.0\\\"\\n   player = JupyterCOM(app_name, app_version)\\n   player.\"",
    "\"Generate Python code that creates an interactive visualization application for live, rich data using Matplotlib and Seaborn, utilizing Torch and Numpy for data manipulation and processing.\"",
    "\"Generate Python code that imports the `urllib` module and enables keep-alive support for sustaining active HTTP connections, similar to the `urllib.keepalive` package.\\n\\nHere is an example of how this might look in practice:\\n```\\nimport urllib\\n\\n# Enable keep-alive support\\nurllib.default_keepalive = True\\n\\n# Set keep-alive parameters\\nurllib.default_keepalive_timeout = 15  # seconds\\nurllib.default_keepalive_interval = 2  # seconds\\n```\"",
    "\"Generate Python code that uses the PyTorch library to create a model summary, similar to the `model.summary()` function in Keras, by accessing the model's attributes and printing them in a neatly formatted table.\"",
    "\"Generate Python code that implements an adaptive experimentation framework for optimizing machine learning model performance using hyperparameter tuning, Bayesian optimization, and reinforcement learning.\"",
    "\"Generate Python code that implements OAuth2 and OpenID Connect authentication using the requests library to make HTTP requests and the cryptography library to handle encryption.\"",
    "\"Generate Python code that imports the tgcalls C++ library and provides a Python interface for making TGI calls, including functions for logging in, getting account information, placing trades, and retrieving trade confirmations.\"",
    "\"Generate Python code that creates a Flask application that returns \\\"Hello, World!\\\" when a GET request is made to /hello.\"",
    "\"Generate Python code that creates a simple task queue using a First-In-First-Out (FIFO) data structure, allowing tasks to be added to the queue and removed in the order they were added, and providing methods for peeking at the next task in the queue and dequeuing tasks.\"",
    "\"Generate Python code that imports the os module and uses its functions to call the prctl system call with the desired options, such as setting the name of a process or creating a new process group, while also handling errors and exceptions appropriately.\"",
    "\"Generate Python code that parses Bicep files and extracts information such as variables, resources, and dependencies using the `bicep` library.\"",
    "\"Generate Python code that uses the TensorFlow and Apache Airflow libraries to orchestrate machine learning workflows, allowing data scientists to manage and scale their experiments while maintaining reproducibility and trackability.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a client object to interact with the Google Cloud Billing API, allowing users to manage their cloud resources and track their costs.\"",
    "\"Generate Python code that imports the Hugging Face Transformers library and loads a pre-trained model from the repository, such as BERT or RoBERTa, for natural language processing tasks like sentiment analysis or question answering.\"",
    "\"Generate Python code that imports the necessary modules, sets up authentication with Azure, and uses the consumption command module to manage Azure resources, such as creating and deleting resource groups, creating and updating subscription definitions, and retrieving cost and usage data.\"",
    "\"Generate Python code that implements the squarify treemap layout algorithm, which takes in a dataset of nested rectangles and outputs a squared version of the tree map, using a recursive approach to ensure that each node is laid out in a square shape, without any overlaps or gaps.\"",
    "\"Generate Python code that creates a Telegram bot using the python-telethon library, with functionality including handling user commands, responding to messages, and interacting with the Ultroid userbot API.\"",
    "\"Generate Python code that implements a structured Pipfile and Pipfile.lock model using the `pydantic` library, which provides a powerful data validation framework for defining and validating data structures in Python.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3.SSM 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\\n```python\\nfrom typing import List\\nfrom botocore.client import BaseClient\\nfrom mypy_boto3_builder import BotocoreClientBuilder\\n\\nssm = BotocoreClientBuilder(service=\\\"ssm\\\", version=\\\"1.34.0\\\")\\n\\n# Annotate the types of the SSM client\\nssm_client: BaseClient = ssm.build_client()\\n\\n# Define a function that uses the SSM client to retrieve a list of instances\\ndef get_instances() -> List[dict]:\\n   response = ssm_client.call(\\\"describe_instances\\\", Filters=None)\\n   return response[\\\"Instances\\\"]\\n```\"",
    "\"Generate Python code that implements a recursive descent parser with full backtracking capabilities, supporting both Python 2.6+ and 3+.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a simulation environment using the Bullet Physics SDK, then creates a robotic arm and obstacles in the simulation, and finally implements reinforcement learning algorithms to train the robotic arm to perform tasks such as pick-and-place and navigation.\"",
    "\"Generate Python code that imports and collects all Dragonfly core Python libraries in a single place for easy access and use.\"",
    "\"Generate Python code that imports the logging module, creates a custom logging class that sends logs to Loggly using their API, sets up the Loggly API credentials, formats the log messages according to Loggly's requirements, and logs messages at different levels (debug, info, warning, error) using the custom logging class.\"",
    "\"Generate Python code that implements a module for calculating taxes and benefits in France using the OpenFisca framework, including support for income tax, social contributions, and benefits such as housing allowance and child care credits.\"",
    "\"Generate Python code that imports the requests library and uses it to make GET, POST, PUT, and DELETE requests to the Help Scout v2 API, handling authentication and parsing responses into usable data structures.\"",
    "\"Generate Python code that imports the Cython module for fast and re-entrant optimistic locks, and uses it to implement a lock class with methods for acquiring and releasing the lock, as well as support for multiple threads and automatic unlocking on exit.\"",
    "\"Generate Python code that creates a domain-specific language (DSL) for defining business intelligence rules, allowing users to configure rules without writing code, using a simple and intuitive syntax.\"",
    "\"Generate Python code that imports the necessary libraries and creates an AWS Lambda function that can be invoked via API Gateway, including setting up the function's handler, environment variables, and deployment configuration.\"",
    "\"Generate Python code that implements a command-line interface for interacting with the user, similar to GNU readline, using the `cmd2` module for parsing commands and the `readline` module for reading input.\"",
    "\"Generate Python code that interfaces with the Pulp 3 API to manage software repositories, packages, and dependencies for various operating systems and architectures.\"",
    "\"Generate Python code that imports the required modules and defines a collection of useful middleware functions for aiohttp applications, including authentication, rate limiting, caching, and logging, each function decorated with the appropriate aiohttp decorators to ensure proper execution within an asynchronous context.\"",
    "\"Generate Python code that wraps the Framework Application Services on macOS, providing a simple and consistent interface for accessing various system functionality, such as user authentication, file management, and process execution.\"",
    "\"Generate Python code that uses the Deezer API to download songs, albums, or playlists from Deezer.\"",
    "\"Generate Python code that imports the XenAPI library and creates a connection to a XenServer host, allowing you to manage virtual machines and other resources in an OpenStack environment.\"",
    "\"Generate Python code that wraps the CoreText framework on macOS, providing a convenient interface for performing text processing tasks such as font manipulation, layout, and rendering.\"",
    "\"Generate Python code that uses the PyQt or PySide libraries to create a wrapper around the WebKit framework on macOS, allowing developers to create custom web browsers or integrate web browsing functionality into their applications.\"",
    "\"Generate Python code that implements a parameterization framework for scientific simulations using dictionaries to store parameters and perform automated validation and interpolation of input parameters.\"",
    "\"Generate Python code that creates a system for running and monitoring numerous processes and sockets, with capabilities such as spawning new processes, terminating existing ones, and intercepting socket data.\"",
    "\"Generate Python code that downloads files from a URL and saves them to a directory, optionally allowing for customizable directories, filename modifications, and download progress tracking.\"",
    "\"Generate Python code that imports the necessary libraries for ensemble sampling, such as numpy and scipy, and creates a function that takes in a likelihood function and prior distributions as input, samples from the prior distributions using a random walk sampler, and computes the posterior distribution of the model parameters using the sampled values and the likelihood function.\"",
    "\"Generate Python code that implements a drop-in replacement for Django's many-to-many field with sorted relations, allowing models to have sortedManyToManyFields without any additional migrations or database modifications.\"",
    "\"Generate Python code that customizes the Django Admin interface for the models `Edit`, `ForeignKey`, `ManyToManyField`, and `CharField` by incorporating jQuery UI Autocomplete functionality.\"",
    "\"Generate Python code that uses the `subprocess` module to check the current version of Chrome, then downloads and installs the corresponding version of chromedriver using `requests` and `os` modules.\"",
    "\"Generate Python code that imports the necessary libraries and creates a connection to a SEGGER J-Link device using the JLink API, allowing for communication with the device and execution of various commands such as reading and writing memory, debugging, and flashing firmware.\"",
    "\"Generate Python code that imports the necessary libraries and creates an etcd3 client using the grpc-gateway v3 API, allowing for interaction with an Etcd cluster.\"",
    "\"Generate Python code that exports trace data from OpenTelemetry to Jaeger, a distributed tracing system, using the `opentelemetry-python` and `jaeger-client` libraries.\"",
    "\"Generate Python code that uses libraries such as BeautifulSoup and lxml to create well-formed HTML, XHTML, and XML documents with ease.\"",
    "\"Generate Python code that reads and writes ID3 tags in MP3 files, allows for adding, modifying, and removing tags, and also supports manipulating audio data, such as trimming silence, normalizing volume, and converting between different audio formats.\"",
    "\"Generate Python code that imports the necessary libraries for statistical analysis, linear algebra, and einops operations on xarray data.\"",
    "\"Generate Python code that implements a plugin system allowing developers to register and retrieve plugins, load and unload plugins at runtime, and manage dependencies between plugins.\"",
    "\"Generate Python code that imports the necessary modules, authenticates to Azure, and uses the az billing commands to list subscriptions, get subscription details, create a new subscription, update a subscription, and delete a subscription.\"",
    "\"Generate Python code that imports the necessary libraries and sets up authentication with the Webex Teams APIs using the Community-developed Python SDK.\"",
    "\"Generate Python code that imports the `random` module and uses its `randint` function to create a random name for an object by combining a random adjective from a list of adjectives with a random noun from a list of nouns.\"",
    "\"Generate Python code that imports the requests and BeautifulSoup libraries, and uses them to download and parse HTML content from a given URL, extracting specific data elements and storing them in a Pandas DataFrame for further analysis.\"",
    "\"Generate Python code that imports the thrift module, creates a Thrift struct with defined fields, serializes the struct into a string, and deserializes the string back into the struct.\"",
    "\"Generate Python code that uses PySpark to perform string and phonetic matching, including tokenization, cleaning, and distance metrics.\"",
    "\"Generate Python code that imports the necessary libraries, defines a public service with a well-defined API using a transport and architecture agnostic RPC mechanism, and exposes the service to clients.\"",
    "\"Generate Python code that uses the `socket` library to scan for IP addresses on a local network and prints a list of discovered devices.\"",
    "\"Generate Python code that imports the required modules and checks if a given string is formatted using old string formatting by checking for the presence of % symbols in the string.\"",
    "\"Generate Python code that implements state-of-the-art diffusion models using PyTorch and JAX, allowing for efficient and scalable training of complex neural networks.\"",
    "\"Generate Python code that imports the required libraries, creates an instance of the OpenIDConnectProvider class, and uses it to authenticate a user and obtain an access token for authorization.\"",
    "Generate Python code that implements a function to find the differences between two strings, using a simple hash table-based algorithm.",
    "Generate Python code that implements a function to find the longest common substring between two strings, using a dynamic programming approach.",
    "Generate Python code that implements a function to compute the Levenshtein distance between two strings, using a recursive algorithm.",
    "Generate Python code that implements a function to compute the Jaccard similarity between two sets, using a straightforward implementation.",
    "Generate Python code that implements a function to compute the cosine similarity between two vectors, using a dot product and magnitude calculation.",
    "Generate Python code that implements a function to perform a breadth-first search through a graph, using a queue data structure.",
    "Generate Python code that implements a function to perform a depth-first search through a graph, using a stack data structure.",
    "Generate Python code that implements a function to compute the shortest path between two nodes in a weighted graph, using a priority queue",
    "\"Generate Python code that creates an interactive plotting library for Jupyter notebooks using d3.js and ipywidgets, allowing users to visualize data and interact with plots in real-time.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function for the fast marching method, which takes in a grid of values and returns the updated grid after applying the method.\"",
    "\"Generate Python code that imports the necessary libraries, loads the time series data, preprocesses it using appropriate methods such as differencing and normalization, splits the data into training and testing sets, fits a bat-based model using the BATS library, evaluates its performance using metrics such as mean absolute error, and visualizes the results.\"",
    "\"Generate Python code that interfaces with StatsD using Django, you can use the `django-statsd` library, which provides a simple way to send metrics to StatsD from your Django application. Here is an example of how you might use it:\\n```\\nfrom django_statsd import stats\\n\\n# Increment a counter\\nstats.incr('my_counter')\\n\\n# Decrement a counter\\nstats.decr('my_counter')\\n\\n# Set a gauge to a specific value\\nstats.gauge('my_gauge', 10)\\n\\n# Send a timing metric\\nstats.timing('my_timer', 100)\\n```\\nThis code sends four metrics to StatsD:\\n\\n* An incremented counter called `my_counter`\\n* A decremented counter called `my_counter`\\n* A gauge set to the value 10 called `my_gauge`\\n* A timing metric called `my_timer` with a value of 100\\n\\nYou need to install the `django-statsd` library by running the following command in your terminal:\\n```\\npip install django-stats\"",
    "\"Generate Python code that imports the Tree-Sitter parsing library and creates a wrapper function to parse source code using Tree-Sitter, returning an AST representation of the code.\"",
    "\"Generate Python code that imports the required libraries and defines a class 'ImageField' that inherits from Django's 'models.FileField' and adds a custom method 'generate_image' that takes an image object and returns a new image object with the desired modifications, such as cropping, resizing, or applying filters.\"",
    "\"Generate Python code that imports the necessary modules, sets up a Django middleware for pretty printing JSON data in forms, admin interfaces, and templates, and adds a template filter for rendering the JSON data in a human-readable format.\"",
    "\"Generate Python code that imports the required libraries and defines a Flask extension that parses and handles multiple types of request-ids sent by various request processors, including Amazon ELB and Heroku, using a custom request-id parser and handler mechanism.\"",
    "\"Generate Python code that creates a Singer tap framework by defining a set of classes and functions that interact with the Singer API, allowing users to create, update, and manage their data pipelines.\"",
    "\"Generate Python code that imports a set of helper functions for integrations, including tools for handling APIs, parsing data, and managing dependencies.\"",
    "\"Generate Python code that imports the Elasticsearch API and performs CRUD operations on indexes, documents, and queries using the Elasticsearch database.\"",
    "\"Generate Python code that imports the required libraries and uses the EventGrid command module to create a subscription, publish an event, and receive notifications for a specific topic using Microsoft Azure Command-Line Tools.\"",
    "\"Generate Python code that creates a simpleTwisted application that can receive incoming connections on a specified port and respond with \\\"Hello, world!\\\" when receiving a \\\"hello\\\" message.\"",
    "\"Generate Python code that uses the Codacy API to retrieve coverage reports for a given project and outputs them in a format suitable for inclusion in a GitHub pull request.\"",
    "\"Generate Python code that implements a schema-based annotation system for linked Avro data, allowing users to define and validate custom schemas, create annotations from schema fields, and utilize those annotations in their application logic.\"",
    "\"Generate Python code that imports the necessary libraries and creates a basic neural network model for text classification using the open-source NLP research library and PyTorch.\"",
    "\"Generate Python code that imports the `pytest` and `psycopg2` libraries and creates a fixture factory that loads data from a PostgreSQL database into a pytest fixture, using the `psycopg2` library to connect to the database and retrieve the data.\"",
    "\"Generate Python code that implements an Earley-Algorithm context-free grammar parser using the nltk library, allowing users to parse strings according to a given grammar and extract parsed trees.\"",
    "Generate Python code that implements a sensor network protocol for wireless communication between devices.",
    "Design a data structure in Python that can represent a message format used for device control and status reporting.",
    "Create a Python class that encapsulates the functionality of an EZSP node, including methods for sending and receiving messages.",
    "Implement a Python function that can parse incoming messages and extract relevant information such as command codes and parameter values.",
    "Develop a Python script that demonstrates how to use the EZSP library to send commands to a remote device and receive responses.",
    "\"Generate Python code that redefines the built-in `doctest` module to provide improved functionality, such as better error messages, support for mocking, and the ability to run tests in parallel.\"",
    "\"Generate Python code that uses the Google Sheets API to perform CRUD operations on sheets and cells, including updating cell values, inserting and deleting rows and columns, and formatting cell styles.\"",
    "\"Generate Python code that imports the necessary libraries and creates a connection to a Google Cloud Bigtable instance using the HappyBase layer.\"",
    "\"Generate Python code that imports a library for creating dynamic model instances for testing purposes, such as `pydantic` or `type-checking`, and uses it to define and create test models with arbitrary attributes and types.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3.ECR 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\\n```python\\nfrom typing import List, Dict\\nfrom boto3.ecr import ECR, GetAuthorizationTokenResponse, UploadImageResponse\\n\\necr = ECR(\\n   aws_access_key_id='your_aws_access_key_id',\\n   aws_secret_access_key='your_aws_secret_access_key',\\n   region='your_region'\\n)\\n\\n# Get authorization token\\ntoken = ecr.get_authorization_token()\\n\\n# Upload image\\nimage_digest = ecr.upload_image(\\n   RepositoryName='your_repository_name',\\n   ImageTag='your_image_tag',\\n   ImageManifest=your_image_manifest\\n)\\n\\n# Get image manifest\\nimage_manifest = ecr.get_image_manifest(RepositoryName='your_repository_name', ImageDigest=image_digest)\\n```\"",
    "\"Generate Python code that imports the ipinfo module and uses it to retrieve information about the user's public IP address, such as country, region, city, latitude, longitude, postal code, and ISP.\"",
    "\"Generate Python code that instrumentsAsyncPG with OpenTelemetry tracer using the `otel.instrumentation.asyncpg` module, decorating relevant functions with the `@otel.trace()` decorator and configuring the tracer with the appropriate exporter and service name.\"",
    "\"Generate Python code that implements quick and dirty domain adaptation using techniques such as feature alignment, adversarial training, and self-supervised learning to adapt models across different domains with minimal additional labeled data.\"",
    "\"Generate Python code that uses the MLflow library to manage the end-to-end machine learning lifecycle, including project management, model training, and deployment, by orchestrating various machine learning tools and services.\"",
    "\"Generate Python code that imports a module that replaces the datetime.timedelta function with a more efficient and flexible alternative for calculating time deltas, such as dateutil.relativedelta or python-dateutil.\"",
    "\"Generate Python code that imports the `requests` library and uses it to send a SOAP request to a given URL, using the `xml_root` parameter to specify the root element of the SOAP message.\"",
    "\"Generate Python code that imports the required libraries and modules, and uses the pow() function to raise 2 to the power of 3.\"",
    "\"Generate Python code that uses the `asyncio` module's `create_task()` function to create a task that stores context information, such as a user ID or API token, as an attribute of the task object.\"",
    "\"Generate Python code that uses the `pytest` framework to write tests for PyQt and PySide applications, including test discovery, running, and reporting, by leveraging the `pytest-qt` plugin which provides fixtures and markers for testing Qt and PySide applications.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the Binance REST API, parsing the responses into usable data structures such as lists, dictionaries, and strings, in order to interact with the Binance cryptocurrency exchange.\"",
    "\"Generate Python code that imports the required libraries and creates an interactive visualization of a network graph using matplotlib or seaborn, allowing users to customize node colors, edge thickness, and other visual attributes through intuitive APIs.\"",
    "\"Generate Python code that uses the TensorFlow or PyTorch libraries to load a pre-trained DeepSpeech model and run inference on audio data, returning the transcribed text.\"",
    "\"Generate Python code that imports a random name and slug generator library, such as `faker` or `slugify`, and uses it to create a random name and slug for a given topic or industry.\"",
    "\"Generate Python code that imports the necessary libraries and creates an AMQP connection to a RabbitMQ server, allowing you to send and receive messages using the AMQP protocol.\"",
    "\"Generate Python code that parses Torch7 binary serialized files using the `torch.serialization` module and returns the contained tensor data.\"",
    "\"Generate Python code that uses the `requests` library to send HTTP requests and perform various operations on the responses, such as checking status codes, parsing JSON data, and verifying content.\"",
    "\"Generate Python code that imports the jq library and uses it to process JSON data, similar to the way the `jq` command-line tool works.\"",
    "\"Generate Python code that creates an HTTP server for use with pytest, allowing you to run tests against realistic HTTP endpoints.\"",
    "\"Generate Python code that uses a style guide to check the format of commit messages and reports any discrepancies.\"",
    "\"Generate Python code that uses a library like scikit-learn or TensorFlow to perform automatic machine learning model selection and hyperparameter tuning through techniques such as cross-validation and grid search.\"",
    "\"Generate Python code that uses the Mailchimp Transactional API to send personalized emails, automate email workflows, and track email statistics for your e-commerce business.\"",
    "\"Generate Python code that uses the azure.identity library to authenticate with Azure and the az.recoveryservices library to perform recovery services operations, such as creating and managing backup policies, backups, and restore points for Azure resources.\"",
    "\"Generate Python code that uses the openpyxl library to read and write Excel files, automate tasks, and perform data manipulation and analysis.\"",
    "\"Generate Python code that sets up a debugging environment in Google Cloud Platform, allowing developers to inspect and debug their applications running on App Engine, Compute Engine, or Kubernetes Engine, using the Cloud Debugging SDK and the Python `google-cloud-debugging` library.\"",
    "\"Generate Python code that imports the PretrainedModels module from the transformers library and uses its pre-trained BERT model to perform a variety of NLP tasks, such as sentiment analysis, question answering, and text classification.\"",
    "\"Generate Python code that wraps the CoreData framework on macOS, providing a simple and consistent interface for interacting with CoreData entities and their attributes.\"",
    "\"Generate Python code that creates an asynchronous Django email backend using Celery by implementing a custom EmailBackend class in Django that utilizes Celery's task queue to send emails in the background, allowing the main thread to continue processing without blocking.\"",
    "\"Generate Python code that uses the tweepy library to interface with Twitter and confluence-py library to interface with Confluence, allowing users to easily post content from Confluence to Twitter and vice versa.\"",
    "\"Generate Python code that imports the necessary modules and creates a class that implements the ChainMap interface, using the same logic as the original ChainMap implementation but modified to work on Python 2.6, 3.2, and PyPy 3.\"",
    "\"Generate Python code that uses the Applitools API to perform automated visual testing and validation of UI elements on web applications, including taking screenshots and comparing them to expected results using image recognition technology, similar to how Selenium is used for automating interactions with the browser.\"",
    "\"Generate Python code that uses the `pymongo` library to connect to a MongoDB instance and perform CRUD operations on a database, similar to the functionality provided by the `db-contrib-tool` package.\"",
    "\"Generate Python code that implements a commenting system for a web application, allowing users to create, read, update, and delete comments associated with a specific model, using a moderation system and email notifications.\"",
    "\"Generate Python code that implements an open-source machine learning framework for automating text- and voice-based conversations, including natural language understanding (NLU), dialogue management, and connections to popular platforms such as Slack and Facebook, to create chatbots and voice assistants.\"",
    "\"Generate Python code that uses the `pip` and `toml` modules to convert between pip-style and pipfile requirements by reading and writing files, parsing and generating the appropriate formats, and handling errors.\"",
    "\"Generate Python code that creates a dictionary wrapper which provides quick access to deeply nested keys by using a flattened version of the dictionary and caching the results of previous lookups.\"",
    "\"Generate Python code that imports the random module and uses it to generate a random integer between 1 and 10, and then prints the result.\\n\\nHere is an example of how this could be done in Python 2:\\n```\\nimport random\\nprint(random.randint(1, 10))\\n```\\nAnd here is an example of how this could be done in Python 3:\\n```\\nimport random\\nprint(random.randint(1, 10))\\n```\\nBoth of these examples will output a random integer between 1 and 10, inclusive. The only difference is that the Python 3 version uses the `print()` function without parentheses, which is the preferred style in Python 3.\"",
    "\"Generate Python code that uses the Mandrill API to send transactional emails from a Django application, including support for templates, dynamic content, and trackable links.\"",
    "\"Generate Python code that implements a describe-style plugin for pytest, allowing users to group related test functions into sections and provide detailed descriptions for each section.\"",
    "\"Generate Python code that imports the necessary libraries and creates a data management framework that provides functionality to describe, extract, validate, and transform tabular data.\"",
    "\"Generate Python code that imports the necessary libraries and creates a basic screensaver using the ScreenSaver framework on macOS, including setup and installation of the screensaver.\"",
    "\"Generate Python code that imports the necessary modules and creates a wrapper class for the SyncServices framework on macOS, providing a simple interface for accessing the framework's functionality.\"",
    "\"Generate Python code that implements drag-and-drop sorting for models and inline models in Django admin using the Sortable widget from the AdminKit library, like so:\\n```python\\nfrom adminkit import Sortable\\n\\nclass MyModelAdmin(admin.ModelAdmin):\\n   list_display = ('name', 'sort')\\n   search_fields = ('name',)\\n\\nclass InlineModelAdmin(admin.TabularInline):\\n   model = MyModel\\n   fields = ('name',)\\n   readonly_fields = ('sort',)\\n\\nadmin.site.register(MyModel, MyModelAdmin)\\nadmin.site.register(InlineModel, InlineModelAdmin)\\n```\"",
    "\"Generate Python code that implements a pytest plugin which enables multiple failures per test by defining a custom `pytest.hook` function that registers a new `call_fixture` function for each failed test, allowing the test to continue running and reporting additional failures.\"",
    "\"Generate Python code that uses the AutoML library to perform automated machine learning for image, text, and tabular data, including data preprocessing, feature engineering, model selection, training, and evaluation.\"",
    "\"Generate Python code that imports the necessary libraries and uses the RPi.GPIO library to control GPIO channels on a Raspberry Pi, allowing for mode setup, digital reading and writing, and pulse width modulation.\"",
    "\"Generate Python code that imports the necessary libraries and creates a dashboard using Dash, incorporating network visualization capabilities using Cytoscape.js.\"",
    "\"Generate Python code that implements a custom serializer using the `json` module to serialize objects into JSON format, and uses the `multiprocessing` module to create multiple worker processes for serializing objects in parallel, resulting in high performance and low memory usage.\"",
    "\"Generate Python code that uses the `pyebook` library to read and convert ebooks between EPUB2, EPUB3, and Kindle formats.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Google Cloud Dataform API client library, allowing you to interact with Google Cloud Dataform resources.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API connection to interact with the SmartyStreets APIs, allowing developers to easily integrate address verification, geocoding, and other location-based services into their applications.\"",
    "\"Generate Python code that configures Selenium to run in headless mode, disables unnecessary browser features, and uses a custom user-agent string to minimize detection by websites.\"",
    "\"Generate Python code that uses Cython and lxml 3.x to create a secure XML document, including encryption and signing, by importing the necessary libraries, creating a root element, adding children elements, setting up the encryption and signing configurations, and saving the document in an XML file.\"",
    "\"Generate Python code that implements the node2vec algorithm to produce vector representations for nodes in a graph, using Gensim's Word2Vec model and utilizing the graph structure to optimize the vector representations.\"",
    "\"Generate Python code that implements a proxy server using the Socket library, allowing clients to connect to a target server through the proxy and modifying the communication channel between the client and the target server.\"",
    "\"Generate Python code that imports the necessary libraries and creates an encrypted dynamodb client using the AWS SDK for Python, specifying a KMS key for encryption.\"",
    "\"Generate Python code that imports and sets up the necessary libraries for supporting multiple storage services (S3, MogileFS, etc.) in Django, including configuring the storage services and their corresponding settings in Django's settings file.\"",
    "\"Generate Python code that defines a Boolean algebra class with methods for creating and parsing Boolean expressions, as well as a custom Boolean DSL using the `ast` module and the `pyparsing` library.\"",
    "\"Generate Python code that imports the necessary libraries and creates an interactive command-line user interface using the Inquirer.js library, allowing users to input information and make selections from a list of options.\"",
    "\"Generate Python code that implements map and starmap functions, allowing for the passage of additional arguments and utilizing parallelization when possible.\\n\\nHere is an example of how this could be achieved:\\n```\\ndef map(func, iterable, *args, **kwargs):\\n   \\\"\\\"\\\"\\n   Apply function to each element in iterable.\\n   Optional args and kwargs are passed to func.\\n   If func is a generator, returns a list of its elements.\\n   Otherwise, returns a list of applied values.\\n   \\\"\\\"\\\"\\n   parallel = len(iterable) > 1000 # adjust this threshold as needed\\n   if parallel:\\n       from joblib import Parallel\\n       with Parallel(n_jobs=len(iterable)) as parallel:\\n           return list(parallel(func, x, *args, **kwargs) for x in iterable)\\n   else:\\n       return list(map(func, iterable, *args, **kwargs))\\n\\ndef starmap(func, iterable, *args, **kwargs):\\n   \\\"\\\"\\\"\\n   Apply function to each element in iterable, in parallel.\\n   Optional args and kwargs are passed\"",
    "\"Generate Python code that creates a structured configuration library using a dictionary-based data structure to store and retrieve configuration settings, with support for nested configurations and a simple syntax for accessing and modifying settings.\"",
    "\"Generate Python code that creates an AWS Tecton client, lists all available Tecton resources in an AWS account, and prints the resource names and their corresponding ARNs.\"",
    "Generate Python code that creates a Docker image for a given application, including installing dependencies and setting environment variables.",
    "Generate Python code that pushes a Docker image to a container registry, such as Docker Hub or Google Container Registry.",
    "Generate Python code that defines a Kubernetes deployment YAML file, including specifying the desired state of the deployment and any necessary configuration options.",
    "Generate Python code that deploys a Kubernetes application, including creating a new deployment YAML file, applying it to the cluster, and rolling back if necessary.",
    "Generate Python code that performs continuous integration testing for a given application, including running unit tests, building documentation, and linting code.",
    "Generate Python code that performs continuous delivery/continuous deployment for a given application, including automating the creation and deployment of Docker images and Kubernetes deployments.",
    "Generate Python code that configures a Kubernetes cluster, including setting up roles, role bindings, and network policies.",
    "Generate Python code that mon",
    "\"Generate Python code that uses the `django-auth` and `saml2` libraries to easily integrate with SAML2 SSO identity providers like Okta for authentication in Django applications, allowing users to access resources securely without needing to create additional login credentials.\"",
    "\"Generate Python code that imports the necessary libraries and creates a RabbitMQ connection to interact with the management interface, allowing for operations such as creating and deleting queues, adding and removing users, and retrieving information about the server and its components.\"",
    "\"Generate Python code that imports the necessary modules and classes from the `apache-airflow-providers-microsoft-azure` package to create an AzureDataLakeHdfsDataSource.\"",
    "\"Generate Python code that exports traces from OpenTelemetry to Jaeger using the Jaeger Thrift Exporter for OpenTelemetry, allowing for easy distributed tracing in complex systems.\"",
    "\"Generate Python code that imports the ANSI escape code library and uses it to print colored text in the terminal, like this:\\n```\\nfrom ansicolortest import *\\nprint(green(\\\"Hello, world!\\\"))\\n```\"",
    "\"Generate Python code that imports the required modules and implements the necessary functions to provide a backport of the Python 3.9 graphlib module for Python 3.6+.\"",
    "\"Generate Python code that implements read-only dict proxy, frozen dict, frozen ordered dict, dict, and ordered dict classes with attribute access using the given package description.\\n\\nHere is an example of how this could be achieved:\\n```\\nfrom collections import abc\\n\\nclass ReadonlyDictProxy(abc.Mapping):\\n   def __init__(self, dict_):\\n       self._dict = dict_\\n\\n   def __getitem__(self, key):\\n       return self._dict[key]\\n\\n   def __contains__(self, key):\\n       return key in self._dict\\n\\nclass FrozenDict(dict):\\n   def __init__(self, *args, **kwargs):\\n       super().__init__(*args, **kwargs)\\n       self._freeze()\\n\\n   def _freeze(self):\\n       self.__slots__ = (\\\"_keys\\\", \\\"_values\\\")\\n       self._keys = tuple(self.keys())\\n       self._values = tuple(self.values())\\n\\n   def __setitem__(self, key, value):\\n       raise TypeError(\\\"attempt to modify frozen dict\\\")\\n\\n   def __delitem__(self\"",
    "\"Generate Python code that parses and analyzes telemetry data from Mozilla's Glean using the `glean-python` library, providing tools for data cleaning, filtering, aggregation, and visualization.\"",
    "\"Generate Python code that uses the `termios` module to read a single character from standard input without blocking, similar to the `getch()` function in C.\"",
    "\"Generate Python code that uses the pyarrow library to convert JSON files into Parquet format, similar to the `parquet-tools` command line tool.\"",
    "\"Generate Python code that uses the TextFSM library to create templates for network devices and a Python wrapper for TextFSM's CliTable, allowing for easy configuration and management of network devices through templated commands and data manipulation.\"",
    "\"Generate Python code that uses the `mlflow` library to manage the end-to-end machine learning lifecycle, including experimentation, reproducibility, deployment, and monitoring.\"",
    "\"Generate Python code that imports the necessary libraries and creates classes to wrap the AddressBook framework on macOS, allowing for easy interaction with the system address book.\"",
    "\"Generate Python code that imports a collection of 60+ Python functions for validating data, such as is_valid, validate_email, validate_phone_number, validate_date, validate_ip_address, validate_url, and others, and calls them as needed to verify the accuracy of various types of user input.\"",
    "\"Generate Python code that uses the pysaml2 library to integrate SAML 2.0 authentication with Django, allowing users to access Django-based applications using their external identity provider credentials.\"",
    "\"Generate Python code that implements a websocket backend for GraphQL subscriptions using the `websockets` library and the `graphql-subscriptions` library.\"",
    "\"Generate Python code that implements a natural language processing pipeline for massive multilingual applications, utilizing various pre-trained models and libraries such as spaCy, NLTK, and Gensim to perform tasks like tokenization, part-of-speech tagging, named entity recognition, dependency parsing, and language modeling.\"",
    "\"Generate Python code that displays detailed information about an HTTP status code, including a description, possible causes, and suggested solutions, using the requests library to retrieve the status code and a template engine like Jinja2 to format the output.\"",
    "\"Generate Python code that simulates quantum circuits using Qiskit's Aer simulator, achieving high performance and supporting various backend simulations.\"",
    "\"Generate Python code that interfaces with IPMI and other hardware management protocols to monitor and control various aspects of computer hardware, such as temperature, fans, and power supply units.\"",
    "\"Generate Python code that uses the `pyautogui` library to fetch the location and size of physical screens, like this:\\n```python\\nimport pyautogui\\nscreen_size = pyautogui.size()\\nscreen_location = pyautogui.position()\\nprint(f\\\"Screen size: {screen_size}x{screen_size[1]} at {screen_location[0]}->{screen_location[1]}\\\")\\n```\"",
    "\"Generate Python code that configures a deep learning model using a specified architecture, hyperparameters, and optimization algorithms.\"",
    "\"Generate Python code that uses the `xml.etree.ElementTree` module to read and compare two XML files, and generates a diff file in XML format using the `xml.dom.minidom` module.\"",
    "\"Generate Python code that imports the necessary modules and uses the ScriptingBridge framework to interact with macOS applications and perform various automation tasks, such as controlling application windows, menus, and dialogs, as well as accessing system-level functionality like files and directories.\"",
    "\"Generate Python code that reads a given file and checks if it follows the documentation standards outlined in the Doc-Warden readme file, returning a boolean value indicating whether the file meets the requirements.\"",
    "\"Generate Python code that implements a MAVLink server using the `mavlink` library, allowing for communication between a drone and a ground control station over a serial connection.\"",
    "\"Generate Python code that creates a Flask-based web application which displays real-time information about RabbitMQ queues, jobs, and workers using the RQ library to interact with the queue.\"",
    "\"Generate Python code that uses the `requests` and `os` modules to download the WebDriver binary from a specified URL, saves it to a directory, and sets environment variables to make the binary executable in the system.\"",
    "\"Generate Python code that adds health check endpoints to Flask or Tornado apps using the `FlaskHealth` or `TornadoHealth` class from the `healthcheck` library, respectively.\"",
    "\"Generate Python code that uses the dlint library to analyze a given piece of Python code and reports any security vulnerabilities or best practice violations it finds.\"",
    "\"Generate Python code that implements a cache decorator similar to functools.lru_cache in C, using Python's built-in dictionaries and hash tables to store function call results for faster retrieval.\"",
    "\"Generate Python code that adds healthcheck endpoints to Flask apps by appending a route for a healthcheck endpoint, which returns a JSON response indicating the application's health status.\"",
    "\"Generate Python code that uses the tidal-python library to download music from Tidal, allowing users to search for songs, albums, and artists, and save their favorite tracks to a local directory.\"",
    "\"Generate Python code that uses the \\\"unicode\\\" module to detect and prevent confusable usage of unicode homoglyphs in strings, including homograph attacks, by implementing a custom string comparison method that takes into account the NFC normalization form and comparing the resulting decomposed forms for identical characters.\"",
    "\"Generate Python code that imports the `scipy.misc` module and uses its `diff` function to compute the gradient of a given function with respect to one or more variables, using automatic differentiation.\"",
    "\"Generate Python code that imports the logging module, sets up a logger with a customized name, and configures the log level, format, and file output.\"",
    "\"Generate Python code that uses the `sphinx` and `jupyter` libraries to create documentation for your project, including automatically generating documentation for your Python code using docstrings and providing interactive widgets for users to explore and visualize your code in Jupyter notebooks.\"",
    "\"Generate Python code that creates a GUI builder class that takes in a dictionary of widget definitions, where each definition consists of a tuple containing the widget type and any additional arguments for that type, and returns a properly configured GUI window.\"",
    "\"Generate Python code that imports the necessary modules and creates a simple wrapper around the InputMethodKit framework on macOS, allowing for basic input method management operations such as enabling, disabling, and switching input methods.\"",
    "\"Generate Python code that creates a container for storing and managing objects, providing a hierarchical structure for organizing and nesting containers, and supporting transactions and security measures to ensure data integrity and access control.\"",
    "\"Generate Python code that imports the necessary modules and wraps the LaunchServices framework on macOS, providing a simple interface for launching applications and accessing related functionality.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `ast` module to parse ECMAScript code and create an abstract syntax tree, which can then be analyzed and transformed using various tools and techniques.\"",
    "\"Generate Python code that calculates solar time events such as dawn, sunrise, sunset, and dusk using the pyastronomy library and returns a dictionary containing the calculated times for a given location and date.\"",
    "\"Generate Python code that imports the necessary libraries and defines a class that inherits from logging.Handler, overriding the emit() method to send log messages to Logstash using the async_timeout library to handle asynchronous sending.\"",
    "\"Generate Python code that uses the unittest module to write automated tests for a program, and uses the pytest-xdist plugin to run the tests in parallel on multiple processors, and generates detailed reports of test results using the junitxml module.\"",
    "\"Generate Python code that imports the necessary libraries and interacts with the OpenStack DBaaS API to perform various database management tasks, such as creating and managing databases, users, and permissions, as well as running SQL queries and storing data.\"",
    "\"Generate Python code that uses the sass library to compile SCSS files into CSS files, optionally using a renderer to display the compiled styles in real-time during development, and also includes an offline mode for batch processing.\"",
    "\"Generate Python code that imports the os, shutil, pathlib, and subprocess modules and provides functions for handling common file system operations, such as creating directories, copying files, resolving paths, and running commands.\"",
    "\"Generate Python code that imports the necessary modules, creates a connection to an ArangoDB database, and performs CRUD operations with built-in validation using the PyArango module.\"",
    "\"Generate Python code that implements a query language for handling graph-based queries, supporting common query languages such as Cypher and Gremlin, with a flexible and efficient execution engine and a simple, intuitive syntax for defining queries.\"",
    "\"Generate Python code that implements type system extensions for use with the pyre type checker, including custom types, type aliases, and type guards, to enhance the expressiveness and flexibility of the pyre type system.\"",
    "\"Generate Python code that wraps theExceptionHandling framework on macOS, providing a Pythonic interface for declaring, handling, and propagating exceptions.\"",
    "\"Generate Python code that imports the required libraries and uses the TF-IDF algorithm and cosine similarity to perform string matching, following the approach described in the provided link.\"",
    "\"Generate Python code that parses an iCalendar file or string, as specified by RFC 5545, and extracts the calendar events, their properties, and recurrence rules.\"",
    "\"Generate Python code that imports the necessary modules and wraps the CoreLocation framework functionality on macOS, providing a simple interface for accessing location services.\"",
    "\"Generate Python code that imports the Django framework and creates a custom administration interface with a dashboard, login page, and user authentication using Django's built-in authentication system.\"",
    "\"Generate Python code that imports the necessary modules, defines a function to print and refresh multiline output contents in the terminal, and demonstrates its use in an example scenario.\"",
    "\"Generate Python code that imports the `pathlib` module and uses its functions to perform various path matching operations, such as matching a file path against a pattern, joining multiple paths, and normalizing a path.\"",
    "\"Generate Python code that imports the required libraries and modules, such as azcmdexecute, azconfig, and azure.datalakestore, to interact with Azure services and execute commands for managing Azure resources and applications.\"",
    "\"Generate Python code that provides additional functionality to the standard datetime module, such as support for nanosecond precision, arbitrary precision representations of dates and times, and extended parsing capabilities.\"",
    "\"Generate Python code that uses the built-in `subprocess` module to execute tasks in parallel, similar to how `invoke` works.\"",
    "\"Generate Python code that dumps binary data to hex format and restores it from there:\\n```\\nimport binascii\\n\\ndef dump_to_hex(data):\\n   return binascii.hexlify(data).decode()\\n\\ndef restore_from_hex(hex_string):\\n   return binascii.unhexlify(hex_string.encode())\\n```\\nThis code defines two functions: `dump_to_hex` and `restore_from_hex`. The `dump_to_hex` function takes in binary data as an argument, converts it to a hexadecimal string using the `binascii.hexlify()` function, and returns the resulting string. The `restore_from_hex` function takes in a hexadecimal string as an argument, converts it back to binary data using the `binascii.unhexlify()` function, and returns the resulting data.\"",
    "\"Generate Python code that creates a Pulumi package for managing AWS cloud resources, including resource creation, updates, and deletion, using Pulumi's AWS provider and SDK.\"",
    "\"Generate Python code that creates an asynchronous REST API using the asyncio library and connects to a database using SQLAlchemy, allowing for the creation, reading, updating, and deleting of resources.\"",
    "\"Generate Python code that uses BeautifulSoup and cssutils to convert CSS selectors to inline styles for HTML elements.\"",
    "\"Generate Python code that uses the setuptools module to create a setup.py file for easy building, distributing, and deploying scripts.\"",
    "\"Generate Python code that imports the necessary libraries for RDBMS access, such as psycopg2 and IPython, and creates an IPython kernel that connects to a PostgreSQL database using SQLAlchemy, allowing the user to interactively execute SQL queries and visualize the results in Jupyter Notebook.\"",
    "\"Generate Python code that imports the Django URL Filter package and uses it to create a human-friendly URL filter for filtering data.\"",
    "\"Generate Python code that imports the necessary modules and creates a Cython interface to the hidapi library, allowing for easy interaction with USB HID devices.\"",
    "\"Generate Python code that imports the necessary modules and annotates the types of the boto3. SFN 1.34.0 service using mypy-boto3-builder 7.21.0, like so:\\n```python\\nfrom typing import Optional\\nfrom botocore.client import BaseClient\\nfrom mypy_boto3_builder import Botofailure, MyBoto3Builder\\n\\nbuilder = MyBoto3Builder(\\n   service=\\\"sfn\\\",\\n   version=\\\"1.34.0\\\",\\n   client=BaseClient,\\n)\\n\\ntry:\\n   builder.build()\\nexcept Botofailure as e:\\n   print(f\\\"Error building type annotations: {e}\\\")\\n```\"",
    "\"Generate Python code that wraps the Trace.moe API into a convenient Python module, allowing users to easily interact with the Trace.moe service and retrieve information about Minecraft traces.\"",
    "\"Generate Python code that detects the root path of a Python project or package using the `os` module and the `inspect` module, for example:\\n```python\\nimport os\\nimport inspect\\n\\ndef get_root_path():\\n   return os.path.dirname(inspect.getabsfile(inspect.currentframe().f_code))\\n```\\nThis code uses the `inspect` module to get the current frame (i.e. the caller) and then gets the absolute path of the file using `os.path.dirname()`. The resulting path is the root path of the package or project.\"",
    "\"Generate Python code that imports the necessary libraries and provides a collection of astronomy-related tools, such as calculating planetary positions, determining lunar phases, and converting between various time systems.\"",
    "\"Generate Python code that uses the PyPDF2 library to create a new PDF document from scratch, add text and images to it, and then save it to disk.\"",
    "\"Generate Python code that implements an interval and interval set data structure, allowing for efficient insertion, deletion, and queries of overlapping intervals.\"",
    "\"Generate Python code that implements authentication for Django Rest Framework using built-in Django auth module and JWT token authentication.\"",
    "\"Generate Python code that formats test reports from JUnit XML files into readable format, similar to how flake8 does it.\"",
    "\"Generate Python code that defines a single dispatch function to encode objects into JSON, using the singledispatch module, without modifying the built-in JSONEncoder class.\"",
    "\"Generate Python code that uses the `ast` module to analyze the syntax of Python functions and check if they have a return statement, and if so, whether the returned value is assigned to a variable or used directly.\"",
    "\"Generate Python code that uses the scikit-learn library to perform morphometric analysis on a dataset, including calculating statistical shape features and visualizing the data in a low-dimensional space using PCA.\"",
    "\"Generate Python code that uses the `wsgi_intercept` package to install a WSGI application in place of a real URI for testing, allowing for the simulation of various web scenarios without modifying the existing infrastructure.\"",
    "\"Generate Python code that takes a grammar in a variation of EBNF as input and output a memoizing PEG/Packrat parser in Python using the `pypeg` library.\"",
    "\"Generate Python code that uses the `marshmallow` library to convert JSON schema draft v7 documents into valid Python classes, and vice versa, using the `marshmallow.Schema` class.\"",
    "\"Generate Python code that sends statistics over UDP to collectd servers using the `socket` library and a custom protocol for message format.\"",
    "\"Generate Python code that creates a class called \\\"Person\\\" with attributes for name, age, and address, and implements a __str__ method to display the person's information when printed.\"",
    "\"Generate Python code that creates a Git commit hook which runs pylint on Python files in the repository and aborts the commit if any issues are found.\"",
    "\"Generate Python code that implements an updated CSRF extension for Flask by using the `Flask` and `CSRF` libraries, setting up a token generation and validation mechanism to protect against cross-site request forgery attacks.\"",
    "\"Generate Python code that uses the requests library to send HTTP requests to a Confluent Schema Registry server, and utilizes the JSON schema data returned by the server to validate user-provided data against the schema.\"",
    "\"Generate Python code that uses the `subprocess` module to periodically check if the Puppet agent is running, and sends a notification if it is not.\"",
    "\"Generate Python code that imports the Django middleware module, creates a new middleware class that captures the current request and user, and uses the `django.contrib.auth` module to retrieve the authenticated user.\"",
    "\"Generate Python code that imports the necessary modules for interacting with Tencent Cloud services, such as boto3 or tencent-sdk-python, and sets up the credentials and configuration for accessing the desired services.\"",
    "\"Generate Python code that creates a Django template-based email generator that uses transactions to ensure consistent sending.\"",
    "\"Generate Python code that implements a webhook dispatcher using the Gardener CI/CD tool, which listens for events on a specified endpoint and triggers corresponding actions in a Kubernetes cluster.\"",
    "\"Generate Python code that imports the required modules and annotates the CloudWatch service with type hints using mypy-boto3-builder.\"",
    "\"Generate Python code that defines an IO wrapper class with missing methods from io.BaseIO, such as a method to read a file's contents into a string and another method to write a string to a file.\"",
    "\"Generate Python code that imports the redis module and creates a connection to a Redis server, allowing for interaction with Redis databases through the use of commands such as SET, GET, DEL, LPUSH, RPUSH, LINDEX, LLEN, and ECHO.\"",
    "\"Generate Python code that imports the necessary modules from the AVFoundation framework and creates classes that wrap the corresponding iOS frameworks, allowing developers to interact with the frameworks using Python instead of Objective-C.\"",
    "\"Generate Python code that uses the `git` and `htcondor` modules to read configuration files from a git repository and update the local HTCondor node's configuration accordingly.\"",
    "\"Generate Python code that imports the requests library and uses it to make GET requests to the top.gg API to retrieve information about games, players, and other data.\"",
    "\"Generate Python code that imports the necessary libraries for graph processing, creates a graph object from a file or database, performs graph traversal and analysis using various algorithms, and visualizes the graph structure and results.\"",
    "\"Generate Python code that uses the os and re modules to extract metadata from video filenames, such as resolution, frame rate, and codec, and then uses this data to make educated guesses about the content of the video, such as genre, scene, and object detection.\"",
    "\"Generate Python code that uses the `flake8` and `junit` libraries to convert a Flake8 file to JUnit format, writing the resulting JUnit test suite to a new file.\"",
    "\"Generate Python code that implements a memoization technique for Django by defining a decorator that caches the results of expensive function calls, allowing subsequent calls to retrieve the cached result instead of recomputing it.\"",
    "\"Generate Python code that uses the requests and BeautifulSoup libraries to programmatically navigate websites, extract desired data, and save it in a structured format such as CSV or JSON.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function that takes a message type and returns a dictionary representing a ROS message structure, with keys corresponding to the message's fields and values set to their default values.\"",
    "\"Generate Python code that uses the Pillow library and Cython to create a simple wrapper around the Tesseract OCR API.\"",
    "\"Generate Python code that imports the necessary modules and defines a class similar to the ipaddress module in Python 3, allowing for the manipulation and conversion of IP addresses.\"",
    "\"Generate Python code that imports the necessary modules and creates a wrapper class for interacting with the CoreWLAN framework on macOS, providing a simple and consistent API for accessing its features and functionality.\"",
    "\"Generate Python code that imports the requests library and creates a class called \\\"RESTClient\\\" that provides a convenient way to consume a REST API by providing methods for common HTTP operations like GET, POST, PUT, DELETE, and authentication.\"",
    "\"Generate Python code that uses the cobertura library to parse coverage reports, compare them to previous reports, and display the coverage progress in a straightforward way.\"",
    "\"Generate Python code that uses the zipfile module to extract Deflate64 compressed files from ZIP archives, example usage: `with zipfile.ZipFile('example.zip') as zip_ref: print(zip_ref.infolist())`\"",
    "\"Generate Python code that imports the necessary libraries and defines a class for communicating with Deconz radios using ZigPy.\"",
    "\"Generate Python code that imports the required libraries, loads data from a Frictionless Data Package, performs operations on the data, and saves the result to a new Frictionless Data Package.\"",
    "\"Generate Python code that imports the necessary modules and creates wrappers for the CoreServices framework on macOS, allowing developers to interact with the system functions provided by CoreServices in a convenient and Pythonic way.\"",
    "\"Generate Python code that uses the Gensim library to calculate statistical features from text, such as word frequency, word length, and lexical diversity.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper function for the NotificationCenter framework on macOS, allowing developers to easily send notifications and manage their lifecycle.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper function for the MultipeerConnectivity framework on macOS, allowing for easy use of the framework's functionality in Python scripts.\"",
    "\"Generate Python code that imports the necessary modules, defines a class that inherits from Sphinx's panel class, and override the create_panel method to create a grid layout for the panel, using a library like Bootstrap or CSS Grid to style the grid.\"",
    "\"Generate Python code that implements a Hawk HTTP authorization library, providing functions for generating authentication headers, validating requests, and parsing response information.\"",
    "\"Generate Python code that reads and writes ROOT files using the `numpy` library, allowing for efficient I/O operations and data manipulation.\"",
    "\"Generate Python code that uses the `yaml` module to parse YAML frontmatter from markdown files, and the `os` and `shutil` modules to manage the files and directories.\"",
    "\"Generate Python code that imports the os and pathlib modules, defines a function that takes a dictionary of parameters and a string for the cache file name, and returns the path to the cache file using the parameterized path syntax.\"",
    "\"Generate Python code that uses the sys module to handle exit codes from pylint command line utility by doing the following:\\n\\n1. Check if the pylint command line utility has been run with the --exit-code option.\\n2. If --exit-code is present, retrieve the exit code from the command line arguments.\\n3. Print an error message to stderr if the exit code indicates a failure.\\n4. Use the sys.exit() function to exit the program with the appropriate exit code.\"",
    "\"Generate Python code that creates a set of type stubs for QuantConnect's Lean using the `typing` module, including classes for `Symbol`, `Environment`, `Data>, `DataManager`, `LiveTrading', and `Backtest'.\"",
    "\"Generate Python code that imports the SQLite4 LSM database bindings and creates a connection to a database file, allowing you to interact with the data stored in the database.\"",
    "\"Generate Python code that creates a web application using Flask or Django, which allows users to input their UK energy bill information and checks against a database of known tariffs to provide a breakdown of the cost components and a comparison with the best available tariff.\"",
    "\"Generate Python code that creates a command-line tool using argparse to specify dependencies, downloads and extracts the required packages, and generates a report on the installed packages.\"",
    "\"Generate Python code that uses the `xmltodict` library to convert an XML file into a dictionary and then uses the `json` library to convert the dictionary into a JSON format, and vice versa.\"",
    "\"Generate Python code that checks if a given tuple has only one element using the `len()` function and returns `True` if it does, otherwise returns `False`.\"",
    "\"Generate Python code that imports the inspect module and creates a decorator function that takes another function as an argument, and returns a new function that prints a warning message when called, using the func_name attribute of the original function to determine whether or not it has been decorated.\"",
    "Generate Python code that imports the necessary libraries for data manipulation and visualization.",
    "Generate Python code that loads and cleans the data from a given dataset.",
    "Generate Python code that performs exploratory data analysis (EDA) on the cleaned data.",
    "Generate Python code that creates visualizations of the data using popular libraries like Matplotlib and Seaborn.",
    "Generate Python code that implements statistical models to analyze the data and extract insights.",
    "Generate Python code that writes the results of the analysis to a report or presentation.",
    "\"Generate Python code that imports the datetime module and uses its functions to work with dates and times, such as parsing strings into datetime objects, calculating time intervals, and formatting datetimes for output.\"",
    "\"Generate Python code that imports the necessary libraries for generalized linear models with dask, including dask-ml, dask-glm, and any additional dependencies.\"",
    "\"Generate Python code that imports the required modules and creates a class with methods for interacting with cloud storage services in a pathlib-like manner.\"",
    "\"Generate Python code that creates a modern and fully asynchronous framework for Telegram Bot API using the async-await syntax and the python-telegram-bot library, allowing for efficient and scalable handling of multiple bot instances and updates.\"",
    "\"Generate Python code that checks for proper Git commit messages, including a descriptive subject, a body that explains the changes made, and proper labels and sign-offs, using regular expressions and the `git` module.\"",
    "\"Generate Python code that imports the necessary modules and wraps the CryptoTokenKit framework on macOS, providing a simple interface for accessing its functionality.\"",
    "\"Generate Python code that imports and sets up the Pingouin statistical package, allowing users to perform various statistical analyses and visualizations.\"",
    "\"Generate Python code that imports the sys module, sets up an except block to catch all exceptions, uses the sys.exc_info() function to get the current exception information, extracts the stack trace from the exception information using the exctype, args, and exctraceback attributes, and finally prints the stack trace to the console.\"",
    "\"Generate Python code that imports the necessary libraries and creates a DeepCL instance for running a deep convolutional neural network on an OpenCL device.\"",
    "\"Generate Python code that wraps the SceneKit framework on macOS, providing a Pythonic interface for creating and manipulating 3D scenes, rendering graphics, and interacting with the scene graph.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple wrapper around the StoreKit framework on macOS, allowing developers to easily implement in-app purchases and subscriptions in their Python applications.\"",
    "\"Generate Python code that reads and writes ASCII tables, with customizable column formats and data types, using the `csv` module and user-defined functions for data processing and manipulation.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the SecurityCenterClient class, which can be used to interact with the Google Cloud Security Command Center API.\"",
    "\"Generate Python code that creates a wrapper class around SpriteKit's SKAction class, providing a more convenient interface for creating and managing actions in a SpriteKit scene.\"",
    "\"Generate Python code that compares the contents of a requirements.txt file with the packages installed in the current environment, and reports any discrepancies.\"",
    "\"Generate Python code that imports the Cython module for JSON5 serialization and parsing, and uses it to serialize and parse JSON5 files.\"",
    "\"Generate Python code that uses the OpenTelemetry API to instrument logging statements in your application, allowing you to collect log data and trace its flow through your system with minimal performance impact.\"",
    "\"Generate Python code that imports a variety of modules, such as math, statistics, numbers, dates, times, strings, files, exceptions, and more, and provides a convenient interface for using their functions and data types, allowing users to perform various tasks such as mathematical calculations, statistical analysis, number manipulation, date and time operations, string manipulation, file operations, exception handling, and other miscellaneous utilities.\"",
    "\"Generate Python code that creates a basic user registration application in Django, including models, views, templates, and URLs, using the built-in authentication system and allowing users to register, log in, and view their profiles.\"",
    "\"Generate Python code that uses a combination of existing datasets, GANs, and transfer learning to quickly generate realistic training data with weak supervision for various NLP tasks, such as sentiment analysis, question answering, and text classification.\"",
    "\"Generate Python code that imports the os module, creates a socket, sets up a sendfile() request, and sends a file's contents to a remote host using the sendfile() system call.\"",
    "\"Generate Python code that imports the necessary modules and classes from the `apache-airflow-backport-providers-microsoft-azure` package to use its functionality in an Apache Airflow workflow.\"",
    "\"Generate Python code that imports the lib2to3 library and redefines certain functions to modify their behavior, using the built-in monkey patching facility in Python.\"",
    "\"Generate Python code that wraps the AVFoundation framework on macOS, providing an easy-to-use interface for working with audio and video files.\"",
    "\"Generate Python code that uses the `requests` library to make API requests to the Zendesk API, including authentication, creating and managing tickets, and fetching ticket metadata.\"",
    "\"Generate Python code that uses the `orchestration` module to coordinate multiple machine learning models and their associated data pipelines, allowing for efficient and automated model training, deployment, and monitoring.\"",
    "\"Generate Python code that imports the necessary libraries and provides wrappers for the ImageCaptureCore framework on macOS, allowing users to capture images and perform related tasks such as adjusting settings, focusing, and triggering the shutter release.\"",
    "\"Generate Python code that uses the GeoSpark library to perform geospatial analytics on large-scale spatial data, including spatial join, aggregation, and distance calculations, and visualize the results on interactive maps.\"",
    "\"Generate Python code that imports the required libraries and retrieves the latest currency exchange rates from an API, then converts them into the desired format and saves them to a file for later use.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Lavalink WebSocket and API wrapper that prioritizes coverage, reliability, and performance.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API connection to interact with the Customer.io platform.\"",
    "\"Generate Python code that imports the dis module from Python 3.5+ and implements its functions in Python 2.7.\"",
    "\"Generate Python code that uses the `time` module to travel through time in tests by freezing the current time and then jumping forward or backward in time by a specified amount.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Contentful Delivery API client to fetch and deliver content from a Contentful space, using the provided API keys and configuration options.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Panda REST interface using the pandapy library, allowing users to interact with the Panda API for data manipulation and analysis.\"",
    "\"Generate Python code that uses the Dedupe library with Pandas to easily dedupe datasets, removing duplicates and retaining only unique records while preserving data integrity.\"",
    "\"Generate Python code that uses the Paramiko library to connect to a remote server and authorize SSH public keys from trusted online identities by fetching the user's public keys from an identity provider, such as Google or GitHub, and then adding them to the server's authorized_keys file.\"",
    "\"Generate Python code that creates a Jupyter widget for dynamic Leaflet maps using the ipywidgets and leaflet packages, allowing users to interactively explore and customize map visualizations.\"",
    "\"Generate Python code that imports the necessary libraries and creates an interactive 3D plot of a mathematical object, such as a sphere or torus, using the OpenGL mathematics library.\"",
    "\"Generate Python code that implements a JWT OAuth flow for Sanic using the `requests` library to make API requests and the `jwt` library to handle JSON Web Tokens, including the creation of a public key for signing the tokens and the verification of the token signature in the authentication process.\"",
    "Generate Python code that returns a list of all public holidays in Japan for a given year.",
    "Generate Python code that takes a date and returns True if it is a public holiday in Japan, False otherwise.",
    "Generate Python code that prints out the names of all public holidays in Japan for a given year.",
    "Generate Python code that creates a dictionary where keys are dates and values are the corresponding public holiday names in Japan.",
    "Generate Python code that uses the `datetime` module to iterate through all dates in a given year and checks each date against a list of public holidays in Japan, returning a new datetime object with the closest upcoming public holiday.",
    "Generate Python code that uses the `dateutil` library to get the next public holiday in Japan based on a given date.",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper function for each PhotosUI method, allowing you to interact with the Photos app on a Mac using Python.\"",
    "\"Generate Python code that imports the necessary libraries and defines a class to interact with the PowerVM REST API, including methods to authenticate, retrieve virtual machine information, create and delete virtual machines, and manage networks.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple wrapper around the DiskArbitration framework on macOS, allowing users to easily create and manage disk arbitration sessions.\"",
    "\"Generate Python code that imports the necessary modules for working with chemical data and performs substructure searches, molecular similarity calculations, and generates 2D and 3D plots of molecules using the CLD3 library.\"",
    "\"Generate Python code that uses Boto3 and PyDubya to collect metrics from an AWS embedded application, process them into aggregated statistics, and send them to Amazon CloudWatch for monitoring and alarming.\"",
    "\"Generate Python code that uses the ast module to parse the source code of one or more Python packages and build a graph data structure representing the imports between modules, allowing for querying the graph to determine dependencies and relationships between modules.\"",
    "\"Generate Python code that imports the necessary libraries and frameworks to interact with Security on macOS, such as pyobjc and security.framework, and provides a simple wrapper around the SecTaskCopyCurrentSession function to return a dictionary containing the session information.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for the GameCenter framework on macOS, providing a simple interface for accessing its main features such as authentication, leaderboards, and achievements.\"",
    "\"Generate Python code that uses the pyobjc library to wrap the Photos framework on macOS, allowing developers to interact with Photos features such as image editing, album management, and photo searching.\"",
    "\"Generate Python code that uses the `json` module to convert Voluptuous schemas to dictionaries:\\n```\\nimport json\\n\\ndef voluptuous_schema_to_dict(schema):\\n   return json.loads(schema.to_json())\\n```\\nThis function takes in a Voluptuous schema object and converts it to a dictionary using the `json.loads()` method. The `to_json()` method on the schema object is used to convert the schema to a JSON string, which can then be parsed into a dictionary using `json.loads()`.\"",
    "\"Generate Python code that uses the `re` module to parse LaTeX strings and convert them to Unicode characters, and also converts Unicode characters back to LaTeX strings using dictionary-based mapping.\"",
    "\"Generate Python code that imports the neovim module and creates a client object to interact with a Neovim instance, allowing you to execute commands, evaluate expressions, and get output from the editor.\"",
    "\"Generate Python code that imports the necessary libraries and allows users to read, write, and manipulate XMP metadata in various file formats, including images and documents, using a simple and intuitive API.\"",
    "\"Generate Python code that imports the required libraries and creates a class that can turn functions and methods into fully controllable objects, allowing for easier testing and manipulation of function calls.\"",
    "\"Generate Python code that creates a fast tunnel proxy using the socket library, allowing you to bypass firewalls and access blocked websites.\"",
    "\"Generate Python code that creates a Discord bot that responds to button clicks with predefined messages, using the discord.py library.\"",
    "\"Generate Python code that wraps the IMServicePlugIn framework on macOS, providing a simple interface for implementing service plug-ins and allowing developers to focus on building their services without worrying about the underlying system integration.\"",
    "\"Generate Python code that imports the Celery library and uses its CancelTaskError exception to cancel and retry failed tasks, while also implementing rate limiting using the RQ (Redis Queue) library to ensure idempotence and avoid overloading the system.\"",
    "\"Generate Python code that imports the pidfile module and creates apidfile object with stale detection and file-locking enabled, which can be used as a context manager or decorator.\"",
    "\"Generate Python code that enforces rules for the imports within and between Python packages using a tool like `import-inspector` or `astroid`.\"",
    "\"Generate Python code that creates an open-source association management system (AMS) with features for member management, event planning, and financial management, using Flask or Django as the web framework, SQLAlchemy for database management, and Stripe for payment processing.\"",
    "\"Generate Python code that uses the `pytest` framework to write a plugin that checks the order of imports in a module, using the `isort` library to perform the actual sorting.\"",
    "\"Generate Python code that implements an asynchronous generator using the asyncio module, allowing for efficient and concise creation of coroutines and management of concurrent tasks.\"",
    "\"Generate Python code that imports the necessary libraries, defines a function that takes in a SAT oracle as input, and uses the oracle to perform operations on a given Boolean formula.\"",
    "\"Generate Python code that imports the necessary libraries and provides wrappers for the SafariServices framework on macOS, allowing developers to interact with the framework's functionality from their Python scripts.\"",
    "\"Generate Python code that creates a Django application with a custom model for storing translation data, a form for submitting translations, and a view for displaying the translated content.\"",
    "\"Generate Python code that imports the __qualname__ module and sets it as a variable, then uses the variable to access the qualified name of a given object.\"",
    "\"Generate Python code that parses HL7 v2.x messages using the `hl7` library, which provides a Python implementation of the HL7 standard for healthcare information exchange.\"",
    "\"Generate Python code that parses a multipart/form-data stream into a dictionary of form fields and files, using the `multipart` module.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for the Contacts framework on macOS, providing a simple interface for accessing and manipulating contact information.\"",
    "\"Generate Python code that uses Flask, requests, and oauthlib to perform an OAuth dance for authentication with a third-party service, handling redirect URLs and generating access tokens for authenticated API calls.\"",
    "\"Generate Python code that uses the MkDocs API to create links between related pages in a MkDocs documentation project, such as linking a concept page to its corresponding implementation details page.\"",
    "\"Generate Python code that implements object lifecycle events, including create, update, and delete events, using a combination of Python's built-in data structures and the Python SQL database API to interact with a MySQL database.\"",
    "\"Generate Python code that uses the pyobjc library to interact with the Automator framework on macOS, allowing users to create and execute workflows, automation scripts, and custom actions.\"",
    "\"Generate Python code that imports the necessary modules, configures an SSH connection to a remote host, and uses the Paramiko library to execute a command on the remote host and retrieve its output, similar to the functionality provided by the `apache-airflow-backport-providers-ssh` package for Apache Airflow.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a Razorpay API client with authentication credentials to make payments, retrieve payment information, and manage subscriptions for an e-commerce website.\"",
    "\"Generate Python code that imports the unittest module and creates a test suite for myprogram.py.\"",
    "\"Generate Python code that imports necessary libraries and defines variables for a linear panel data model, an instrumental variable model, an asset pricing model, and a system regression model.\"",
    "\"Generate Python code that imports the necessary libraries and defines a set of vectorized geospatial functions using NumPy, including calculations such as distances, angles, and projections between geometric objects like points, lines, and polygons.\"",
    "\"Generate Python code that implements a pytest plugin to preserve test isolation in Flask-SQLAlchemy using database transactions, modeled after the `pytest_plugin` module in the `pytest` documentation.\"",
    "\"Generate Python code that creates a set of command line interface (CLI) tools using argparse library, which can manipulate Terraform configurations by generating, modifying and validating configuration files.\"",
    "\"Generate Python code that uses libraries like Pandas and NumPy to clean, transform, and preprocess tabular data, handling missing values, outliers, and data normalization, and outputs ready-to-use data frames for machine learning models.\"",
    "\"Generate Python code that uses a face recognition library such as OpenCV or scikit-image to detect and recognize faces in images or videos, either interactively or from the command line.\"",
    "\"Generate Python code that implements a fast callback/event system using a signal-slot architecture, similar to Qt Signals, for efficient communication between different parts of an application.\"",
    "\"Generate Python code that uses the Apache Airflow API to integrate dbt into a workflow, allowing users to schedule and manage dbt runs, create custom operators for dbt tasks, and monitor the status of dbt jobs in the Airflow web interface.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for the ModelIO framework on macOS, allowing developers to easily interact with the framework's functionality in their Python scripts.\"",
    "\"Generate Python code that uses the AWS SDK to monitor the status of machine learning training jobs and automatically applies debug settings when certain conditions are met.\"",
    "\"Generate Python code that creates a library for recording and reading data in Jupyter and nteract Notebooks, using the `ipywidgets` and `numpy` libraries to create interactive widgets and manipulate data, and the `pickle` library to save and load data.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper around the AppleScriptKit framework on macOS, allowing developers to interact with the framework using Python instead of AppleScript.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple wrapper around the NetworkExtension framework on macOS, allowing developers to easily interact with the framework and create custom network extensions.\"",
    "\"Generate Python code that creates a user-friendly interface for controlling Home Assistant entities, including a dashboard with widgets for each entity, the ability to control entities directly from the dashboard, and support for multiple themes and languages.\"",
    "\"Generate Python code that imports the `toml` module and its dependencies, provides a class for parsing and generating TOML files, and includes methods for loading, dumping, and validating TOML data.\"",
    "\"Generate Python code that imports the Flask web framework and the concurrent.futures library, creates a Flask app, and uses the ThreadPoolExecutor from concurrent.futures to run a function in parallel with multiple threads.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for the PreferencePanes framework on macOS, allowing developers to easily integrate preferences panes into their applications.\"",
    "\"Generate Python code that uses PyTensor for probabilistic programming, Bayesian modeling, and probabilistic machine learning.\"",
    "\"Generate Python code that implements a component-based data mining framework allowing users to create, manipulate, and analyze data streams, using modular components, and providing interactive visualizations and machine learning algorithms for data analysis.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureServerManager class to interact with Azure server management APIs.\"",
    "\"Generate Python code that imports the necessary libraries and provides wrappers for the LatentSemanticMapping framework on macOS, allowing users to perform latent semantic analysis and related tasks.\"",
    "\"Generate Python code that imports a library like `crcmod` or `pycrc` to compute CRC checksums of various sizes (8, 16, 32, 64).\"",
    "\"Generate Python code that uses the Marquez Python Client to interact with the Marquez API, allowing users to create, read, update, and delete workflows, jobs, and other entities on the Marquez platform.\"",
    "\"Generate Python code that uses the AppKit and AddressBook frameworks to provide a user interface for managing contacts, similar to the functionality provided by ContactsUI on macOS.\"",
    "\"Generate Python code that uses the pyobjc library to wrap the MapKit framework on macOS, allowing developers to create maps and map-related applications using Python.\"",
    "\"Generate Python code that imports the async IO module, creates a list of files to read/write, uses asyncio.gather() to perform multiple file operations concurrently, and handles exceptions.\"",
    "\"Generate Python code that imports scikit-multilearn and uses it to perform multi-label classification on a dataset, similar to how one would use scikit-learn for standard classification.\"",
    "\"Generate Python code that implements a distributed system using Apache Spark to learn embeddings of large graphs by partitioning the graph into smaller chunks, processing each chunk in parallel using Spark's RDD API, and combining the results to obtain the final embedded representation.\"",
    "\"Generate Python code that imports the Cython module implementing the Damerau-Levenshtein edit distance algorithm and uses it to calculate the distance between two strings.\"",
    "\"Generate Python code that uses the Ansible module to interact with Hashicorp Vault, including creating and managing secrets, authenticating with the vault, and retrieving secret values.\"",
    "\"Generate Python code that wraps the Intents framework on macOS, providing a simple and consistent API for interacting with the various features of the platform, such as Siri, Shortcuts, and Widgets.\"",
    "\"Generate Python code that imports the necessary libraries for probabilistic time series modeling, such as NumPy, SciPy, and PyStan, and uses them to implement a Bayesian linear regression model with a probit link function for binary response variables.\"",
    "\"Generate Python code that uses the pyinstrument library to analyze and disassemble VBA (Visual Basic for Applications) code, extracting information such as function names, variables, and control flow.\"",
    "\"Generate Python code that implements a caching mechanism for a computational task, taking into account the costs of computation and storage, using a suitable data structure such as a dictionary or a cache library like joblib or scikit-learn's cache.\"",
    "\"Generate Python code that implements a human-friendly interface for converting between HSL (Hue, Saturation, Lightness) colors and RGB colors.\"",
    "\"Generate Python code that imports the necessary modules and creates wrappers for the InstallerPlugins framework on macOS, allowing users to easily install and manage plugins for their favorite apps.\"",
    "\"Generate Python code that formats dates and times into human-readable strings, using natural language syntax and automatically adjusting for daylight savings time and leap years, with customizable precision and spacing options, and support for multiple languages and locales.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper function for the InstantMessage framework on macOS, allowing users to send messages and perform other messaging-related tasks from their Python scripts.\"",
    "\"Generate Python code that creates an Azure-based Kubernetes cluster, deploys applications, configures networking, monitors application performance, and automates remediation using the VMware Aria Operations for Applications CLI Utility.\"",
    "\"Generate Python code that imports the Facebook Messenger API library and creates a new instance of the FacebookMessenger class, which can be used to send and receive messages from a Facebook page.\"",
    "\"Generate Python code that imports the psycopg2 library and creates a connection pool using the `pg.ConnectionPool` class, allowing for proper pooling of PostgreSQL connections.\"",
    "\"Generate Python code that imports the `tryme` module and uses its functions to handle errors in a more human-friendly way, providing clear and concise error messages and suggestions for recovery.\"",
    "\"Generate Python code that configures a system using a YAML configuration file, allowing for nested configurations and inheritance, with support for environment variables and command line arguments, and featuring a warning system for deprecated options.\"",
    "\"Generate Python code that implements content negotiation using the `negotiator` module in Flask, Bottle, web.py, and webapp2 on Google App Engine.\"",
    "\"Generate Python code that uses the Kafka Consumer API to consume spark streams from a Kafka topic and commits the consumed messages to a Spark Streaming batch, within a Kafka consumer group.\"",
    "\"Generate Python code that imports the necessary libraries and uses them to perform super-fast and clean conversions to numbers.\"",
    "\"Generate Python code that uses a library like scikit-learn or TensorFlow to perform automated machine learning model selection and hyperparameter tuning, such as GridSearchCV or RandomizedSearchCV, to find the best performing model and its optimal parameters based on a given dataset and evaluation metric.\"",
    "\"Generate Python code that creates a portable OpenGL context, allowing for cross-platform rendering of 2D and 3D graphics using the PyOpenGL library.\"",
    "\"Generate Python code that imports the required libraries and creates a wrapper function matching httplib2's interface, which forwards calls to the corresponding methods of an instance of urllib3.PoolManager.\"",
    "\"Generate Python code that imports the necessary AWS SDKs and provides utility functions for interacting with AWS resources such as EC2 instances, S3 buckets, and IAM users.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the AzureResourceManagerClient class, which can be used to interact with Azure resources and perform various management tasks such as creating, updating, and deleting resources, as well as retrieving resource groups and subscriptions.\"",
    "\"Generate Python code that sends metrics to Graphite using the `graphite` library, which provides a simple interface for sending metrics to Graphite.\"",
    "\"Generate Python code that uses the pydantic library to parse a SQL query and detect if it contains an N+1 query problem.\"",
    "\"Generate Python code that uses the `pip` module to display a list of installed packages and their update status, using the `pip.list()` method to retrieve the list of installed packages and the `pip.CheckerBase.is_upgrade_available()` method to check for updates.\"",
    "\"Generate Python code that performs factor analysis on a dataset using the PCA module and visualizes the results with matplotlib.\"",
    "\"Generate Python code that wraps the Search Kit framework on macOS, providing a simple interface for executing search queries and retrieving search results.\"",
    "\"Generate Python code that implements SSL and TLS protocols using only pure Python, without relying on any external libraries or modules.\"",
    "\"Generate Python code that imports the necessary libraries, such as `configparser` and `argparse`, to read configuration files and parse command-line arguments, respectively, and creates a basic framework for a configurable application or daemon.\"",
    "\"Generate Python code that implements a declarative HTTP testing library, allowing users to define expected HTTP responses and assertions in a simple syntax, automatically generating test cases and reporting results.\"",
    "\"Generate Python code that parses an ASAM MDF measurement data file and extracts the relevant information using the `pandas` library to read the CSV files and the `pydantic` library to validate the schema.\"",
    "\"Generate Python code that uses the `ast` module to parse source files and extract docstrings, then calculates the percentage of documented functions and classes using the `docstring_coverage` metric.\"",
    "\"Generate Python code that uses the `idna` library to convert a domain or a file with a list of domains to the IDNA format, like so:\\n```\\nimport idna\\n\\n# Convert a single domain\\nprint(idna.encode(\\\"example.com\\\"))  # prints \\\"xn--example-4va.com\\\"\\n\\n# Convert a list of domains from a file\\nwith open(\\\"domains.txt\\\") as f:\\n   domains = [line.strip() for line in f.readlines()]\\n\\nfor domain in domains:\\n   print(idna.encode(domain))\\n```\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for interacting with the Accounts framework on macOS, providing a simple interface for creating, modifying, and querying user accounts.\"",
    "\"Generate Python code that imports the necessary libraries and creates an instance of the Google Cloud IoT API client library, allowing you to interact with Google Cloud IoT Core devices and send/receive data.\"",
    "\"Generate Python code that provisiones and manages virtual machines, containers, and cloud infrastructure on various platforms including Libvirt, Vsphere, Aws, Gcp, Kubevirt, Ovirt, Openstack, IBM Cloud, and others using a unified API.\"",
    "\"Generate Python code that imports the required modules and annotates the types of the boto3.SNS service using mypy-boto3-builder, like this:\\n```python\\nfrom typing import Tuple\\nfrom boto3 import Session\\nfrom mypy_boto3_builder import TypeAnnotator\\n\\nsession = Session()\\nannotator = TypeAnnotator(session)\\n\\n# Annotate the types of the boto3.SNS service\\nsns = session.client(\\\"sns\\\")\\nsns.subscribe.return_value = None  # type: ignore\\nsns.publish.return_value = None  # type: ignore\\nsns.create_topic.return_value = None  # type: ignore\\nsns.delete_topic.return_value = None  # type: ignore\\nsns.get_topic.return_value = None  # type: ignore\\nsns.list_topics.return_value = None  # type: ignore\\nsns.list_subscriptions.return_value = None  # type: ignore\\nsns.unsubscribe.return_value = None  # type: ignore\\n\"",
    "\"Generate Python code that wraps libdispatch functions on macOS using ctypes to interface with the C library, providing a Pythonic interface for parallelism and concurrency.\"",
    "\"Generate Python code that implements an observable typed attribute system for Python classes, allowing for efficient and type-safe access to class attributes while providing notifications for changes to those attributes.\"",
    "\"Generate Python code that imports the necessary modules from the backport of Python 2.7's collections module, such as deque, heapq, and ordereddict, and uses them to implement common data structures and algorithms that are not available in Python 3.x.\"",
    "\"Generate Python code that wraps the Collaboration framework on macOS, providing a simple and consistent interface for creating, managing, and participating in collaborative sessions.\"",
    "\"Generate Python code that imports the necessary libraries and defines a function to calculate the specific gravity of a substance based on its formula weight and density, with appropriate input validation and error handling.\"",
    "\"Generate Python code that wraps the ServiceManagement framework on macOS, providing a simple interface for managing services and service-related tasks.\"",
    "\"Generate Python code that uses the `kubernetes` library to retrieve Kubernetes resources, and then uses a schema validation library such as `jsonschema` to validate the resources against predefined schemas.\"",
    "\"Generate Python code that implements an encrypted file keyring backend, utilizing cryptography libraries such as Fernet or PyNaCl, to securely store and retrieve encryption keys for a Flask API.\"",
    "\"Generate Python code that imports the necessary libraries for basic face detection and manipulation, such as OpenCV and NumPy, and provides functions for loading and displaying images, detecting faces in images, and applying transformations to detected faces.\"",
    "\"Generate Python code that imports the SoftLayer API library and creates an instance of the SoftLayer_Account class, allowing you to interact with the SoftLayer infrastructure.\"",
    "\"Generate Python code that imports the WTForms and JSON packages, creates a form using WTForms, serializes the form data to JSON format using the JSON package, and sends the JSON data to a RESTful API using the requests package.\"",
    "\"Generate Python code that uses the `django-fsm` library to integrate state transitions into the Django admin interface, allowing administrators to manage models with finite state machines.\"",
    "\"Generate Python code that imports the necessary modules for interacting with Alibaba Cloud services, such as os, json, requests, and urllib.\"",
    "\"Generate Python code that imports the necessary modules for Zope testing, sets up a test folder and HTML templating directory, creates a test suite and test cases, runs the tests, and generates JUnit-style test reports.\"",
    "\"Generate Python code that uses the `pandas` and `bokeh` libraries to create a web application for visualizing pandas objects, allowing users to interactively explore and visualize data in a variety of ways.\"",
    "\"Generate Python code that imports the necessary modules and wraps the DictionaryServices functions from the macOS framework, providing a convenient interface for accessing and manipulating system dictionaries.\"",
    "\"Generate Python code that reads and writes configuration files in a human-readable format using a permissive license with the following functions: `load_config(file_path)` to read a configuration file into a dictionary, `save_config(dict, file_path)` to write a dictionary to a configuration file, and `get_config_defaults()` to return a default configuration dictionary.\"",
    "\"Generate Python code that imports the necessary libraries and creates a function for visualizing decision trees using sci-kit learn, XGBoost, LightGBM, Spark, and TensorFlow.\"",
    "\"Generate Python code that uses the Django i18n framework to compile internationalized JavaScript catalogs into static files, leveraging the Django i18n API to load and translate messages, and writing the compiled output to file for use in web applications.\"",
    "\"Generate Python code that reads a file and converts Markdown and reStructuredText syntax within it to HTML, using the `markdown` and `rst2html` libraries, and outputs the resulting HTML to a new file.\"",
    "\"Generate Python code that imports the Boto3 library and uses it to connect to an Amazon S3 bucket, then retrieves a file from the bucket and saves it to a local file path.\"",
    "\"Generate Python code that sends logs to LogDNA using the `requests` library to make HTTP requests to the LogDNA API, with the ability to customize the URL, headers, and payload of the request.\"",
    "\"Generate Python code that uses the `pytest` framework to create a namespace plugin for testing Python projects, providing helpers for working with namespaces in test files.\"",
    "\"Generate Python code that uses the `geopy` library to perform reverse geocoding on an IP address and retrieve information such as country, region, city, latitude, longitude, ZIP code, time zone, ISP, domain name, area code, weather info, mobile info, elevation, usage type, address type, and IAB category.\"",
    "\"Generate Python code that uses the Google Custom Search API to search for an image, resizes it to a specified dimension, and crops it to a specified bounding box.\"",
    "\"Generate Python code that imports the necessary libraries and establishes communication with a ZiGate radio using the zigpy protocol.\"",
    "\"Generate Python code that uses natural language processing techniques, such as tokenization and stopword removal, to extract relevant keywords from a given text, resulting in a list of keyword phrases that can be used for search engine optimization or other applications.\"",
    "\"Generate Python code that imports a package named `fixture` which loads and references test data, and then uses it to perform tests.\\n\\nHere is an example of how you could use the `fixture` package in a Python script:\\n```\\nimport fixture\\n\\n# Load test data from a file\\ndata = fixture.load('test_data.json')\\n\\n# Reference the test data in a test function\\ndef test_function(data):\\n   # Perform some tests using the test data\\n   assert data[' foo'] == 'bar'\\n   assert data['baz'] == 'qux'\\n\\n# Run the test function with the loaded test data\\ntest_function(data)\\n```\\nThis code will load test data from a file called `test_data.json` using the `fixture.load()` function, and then reference that data in a test function called `test_function()`. The test function will perform some tests using the test data, such as checking that certain keys have certain values. Finally, the test function will be called with the loaded test data as an argument, allowing the tests to run and verify that the expected results are correct.\"",
    "\"Generate Python code that uses the Pact framework to create and verify consumer-driven contracts by implementing the following functions: `create_contract`, `verify_contract`, and `generate_test_cases`.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a connection to a Presto cluster using the Trino client.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Microsoft Azure Metrics Advisor Client Library to retrieve and analyze metrics data from Azure Monitor, Azure Activity Log, and other data sources, providing insights and recommendations for optimizing resources and improving performance.\"",
    "\"Generate Python code that uses the `boto3` and `google-auth` libraries to establish a connection between an AWS account and a GCP project, and enables federation between the two platforms with a single line of code:\\n```\\nimport boto3\\nfrom google.oauth2 import service_account\\n\\n# Initialize the AWS session\\nsession = boto3.Session()\\n\\n# Initialize the GCP credentials\\ncreds = service_account.Credentials.from_service_account_file(\\n   \\\"path/to/gcp_credentials.json\\\", scopes=[\\\"https://www.googleapis.com/auth/cloud-platform\\\"]\\n)\\n\\n# Use the AWS session to get an access token for the GCP resource\\naws_token = session.get_credentials().access_key\\n\\n# Use the GCP credentials to authenticate to the GCP API\\ngcp_auth = creds.validator(request_callable=True)\\n\\n# Enable federation between the two platforms\\nfederation = gcp_auth.authorize(aws_token)\\n```\"",
    "\"Generate Python code that updates the ` PKG-INFO` file in the `.egg-info` directory of a Python package to include additional test information, such as test case names and descriptions, using the `pkg_resources` module.\"",
    "\"Generate Python code that implements a machine learning-based dialogue engine for conversational software using popular libraries like TensorFlow, Keras, or PyTorch.\"",
    "\"Generate Python code that implements an Elasticsearch log handler for the logging library, which sends log messages to an Elasticsearch index and allows for customizable mapping of log data to Elasticsearch documents.\"",
    "\"Generate Python code that implements a component-based software defined networking framework for OpenStack, allowing for modular and extensible definition and management of network infrastructure and services, using classes and interfaces to define components and their relationships, and utilizing OpenStack APIs for seamless integration with existing infrastructure.\"",
    "\"Generate Python code that creates an object-relational mapping between database tables and Python classes, allowing for easy interaction with databases using Python objects, similar to the Pony ORM.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple wrapper around the OpenDirectory framework on macOS, allowing users to easily interact with the directory service from their Python scripts.\"",
    "\"Generate Python code that uses the pyAudio and Pillow libraries to generate audio and image CAPTCHAs, respectively, and includes a Tesseract OCR integration for image recognition.\"",
    "\"Generate Python code that uses the pyflame library to create a flame graph from a PySpark profiling data file, allowing users to visualize and analyze the performance of their Spark applications.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Spotinst client object to interact with the Spotinst API, allowing users to manage their Elastic IP addresses, Security Groups, and instances.\"",
    "\"Generate Python code that imports the requests library and uses it to make API calls to the CoinGecko API, parsing the JSON responses to extract information about cryptocurrencies such as their prices, market capitalization, and trading volume.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for the SecurityInterface framework on macOS, providing a simple interface for interacting with the system's security features.\"",
    "\"Generate Python code that imports the necessary libraries and modules to interface with CircuitPython hardware from a non-CircuitPython version of Python, such as CPython on Linux or MicroPython, using the CircuitPython API.\"",
    "\"Generate Python code that sends log data to Logmatic.io using the Logmatic.io API, which allows for real-time log collection and analysis.\"",
    "\"Generate Python code that implements a text plugin for Django CMS with CKEditor support, allowing users to create and edit rich text content with a customizable editor interface.\"",
    "\"Generate Python code that implements a luminosity algorithm for computing the radiance of a scene, given a set of light sources and their properties, and returns the final luminance values for each pixel in an image.\"",
    "\"Generate Python code that imports the required libraries and creates a form class with additional fields, validators, and widgets using WTForms.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an Optimizely feature experiment using the Optimizely Full Stack (legacy) SDK, including defining a feature flag and its possible variations, configuring the experiment's traffic allocation, and registering the experiment on the Optimizely server.\"",
    "\"Generate Python code that imports the necessary libraries and sets up the environment for using the CARTO Python package, which provides tools for data scientists to work with spatial data, including data manipulation, visualization, and analysis.\"",
    "\"Generate Python code that wraps the framework accounts on macOS, providing a simple and consistent interface for managing user accounts, groups, and permissions.\"",
    "\"Generate Python code that imports the necessary libraries and creates wrappers for the AppleScriptObjC framework on macOS, allowing developers to interact with macOS features and applications using Python.\"",
    "\"Generate Python code that imports the necessary libraries, creates an n-dimensional array, and displays it using a suitable visualization library, such as Matplotlib or Plotly.\"",
    "\"Generate Python code that imports the necessary libraries and frameworks to build a media processing pipeline using MediaPipe, including loading and manipulating media files, applying machine learning models for image and video analysis, and deploying the resulting application on various platforms such as mobile, edge, cloud, and web.\"",
    "\"Generate Python code that imports the necessary libraries and uses the Clearbit API to retrieve company data, including name, industry, size, and revenue, for a given list of companies, and prints the data in a neatly formatted table.\"",
    "\"Generate Python code that imports the Google Cloud Storage client library and creates a client object to interact with Google Cloud Storage.\"",
    "\"Generate Python code that formats a JSON API 1.0 compliant document using Marshmallow, given a dataset of resources and relationships between them.\"",
    "\"Generate Python code that implements a certificate transparency utils library and scripts, providing functions for generating, verifying, and uploading certificate transparency logs, as well as parsing and validating CT metadata files.\"",
    "\"Generate Python code that uses the `gettext` module to compile a PO file into a MO file for translating application strings.\"",
    "\"Generate Python code that imports the necessary libraries and provides a simple wrapper around the LocalAuthentication framework on macOS, allowing users to easily integrate biometric authentication into their applications.\"",
    "\"Generate Python code that imports the necessary modules and creates a wrapper class around the NetFS framework on macOS, providing a simple interface for interacting with the file system.\"",
    "\"Generate Python code that implements a debugging print function that can be used as a drop-in replacement for the built-in `print` function, but with additional features such as filtering by log level, logging to a file, and highlighting output in the terminal.\"",
    "\"Generate Python code that parses and formats dates quickly using the datetime module, specifically the datetime.strptime() function for parsing dates in a specific format, and the datetime.datetime.now() function for obtaining the current date and time; also use the timedelta object to calculate time intervals.\"",
    "\"Generate Python code that uses the 'html2text' library to convert HTML files to Markdown format, preserving links and bold/italic text.\"",
    "\"Generate Python code that imports the necessary libraries and sets up authentication with Azure Purview and Atlas, allowing you to interact with the Apache Atlas REST APIs for data lineage, governance, and management.\"",
    "\"Generate Python code that imports the necessary libraries and initializes an XBee radio module using a ZigPy-compatible serial interface, allowing for communication with the module through AT commands.\"",
    "\"Generate Python code that imports the re module and creates a function irregular_replace that takes a string and a pattern as input, and replaces all occurrences of the pattern with a random selection from a list of possible replacements, using a random regex syntax.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for interacting with the CalendarStore framework on macOS, providing a simple interface for adding, removing, and accessing calendar events.\"",
    "\"Generate Python code that uses the `unittest` module to create a test runner that displays a progress bar during test execution and provides smarter tracebacks upon failure, utilizing the `progressbar` and `tty` modules for progress bar implementation and the `inspect` module for intelligent tracebacks.\"",
    "\"Generate Python code that imports the requests library and creates a simple REST client that sends HTTP GET, POST, PUT, and DELETE requests to a specified URL, optionally including query parameters, headers, and data payload.\"",
    "\"Generate Python code that implements a background processing system using the `multiprocessing` module, allowing the user to run time-consuming tasks concurrently without blocking the main event loop.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper function for each Social framework function, allowing the user to interact with the Social framework on macOS using Python.\"",
    "\"Generate Python code that imports the necessary modules and creates a wrapper class for the FinderSync framework on macOS, providing a simple interface for accessing its features and functionality.\"",
    "\"Generate Python code that parses multipart forms in Falcon applications using the `falcon` and `multipart` libraries, handling file uploads and form data in a straightforward and efficient manner.\"",
    "\"Generate Python code that imports the necessary libraries and creates a Mistral client object to interact with the Mistral server, allowing users to create, read, update, and delete workflows, jobs, and executions.\"",
    "\"Generate Python code that imports the necessary libraries, such as `iso8583` and `json`, and defines a function for serializing and deserializing ISO8583 data, leveraging the `iso8583.serialize()` and `iso8583.deserialize()` methods, respectively.\"",
    "\"Generate Python code that uses the psycopg2 library to connect to a PostgreSQL database and utilizes the binary copy feature for fast inserting data into a table.\"",
    "\"Generate Python code that implements an SMTP SSL email backend for Django using the `django.core.mail` module and the `ssl` library, allowing for secure email communication.\"",
    "\"Generate Python code that imports the json, yaml, and xmltodict libraries and creates a framework for serializing/deserializing JSON/YAML/XML files into Python class instances and vice versa using these libraries.\"",
    "\"Generate Python code that imports a large library with various useful tools, including but not limited to OS and SYSTEM tools.\\n\\nHere is an example of a Python code that could accomplish this task:\\n```\\nimportlib.util.module_from_spec('my_library')\\n```\\nThis code imports a module named `my_library` from a spec file that defines the module's name, version, and other metadata. The `importlib.util.module_from_spec()` function is a powerful tool that allows you to import modules that are not installed as packages, but are instead defined in a spec file. This can be useful for loading third-party libraries that are not available on PyPI or other package managers.\"",
    "\"Generate Python code that imports the required modules and annotates the APIGateway service using mypy-boto3-builder:\\n```\\nfrom typing import Tuple\\nfrom botocore.client import BaseClient\\nfrom mypy_boto3_builder import MyPyBoto3Builder\\n\\nbuilder = MyPyBoto3Builder(BaseClient)\\ngenerator = builder.generate_service(\\\"APIGateway\\\", version=\\\"1.34.0\\\")\\n```\"",
    "\"Generate Python code that implements a meta-language for DSL implementation, inspired by Xtext, allowing users to define domain-specific languages and create interpretable models.\"",
    "\"Generate Python code that uses the `kml` and `gejson` libraries to read a KML file, extract its features, and write them to a GeoJSON file.\"",
    "\"Generate Python code that imports the necessary libraries for building a flexible framework of neural networks, such as TensorFlow or PyTorch, and creates a class that defines a basic architecture for a neural network, including layers, activation functions, and optimization algorithms.\"",
    "\"Generate Python code that uses the `mkdocs` and `git` modules to display the localized date of the last Git modification of a Markdown file, using a custom MkDocs plugin.\"",
    "\"Generate Python code that implements a multiprocessing distributed task queue for Django using the built-in `multiprocessing` module and a message broker such as RabbitMQ or Redis.\"",
    "\"Generate Python code that imports the Shapely library, creates a polygon object from a set of coordinates, and returns the set of geohashes that form the polygon using the geohash function from the geohash module.\"",
    "\"Generate Python code that imports the necessary modules and creates classes for wrapping the GameKit framework on macOS, providing a simple interface for accessing its features such as achievements, leaderboards, and authentication.\"",
    "\"Generate Python code that imports the logging module, creates a logger, defines a custom handler class with a handle method, sets the handler to the logger, and logs a message using the logger.\"",
    "\"Generate Python code that implements some out-of-the-box hooks for pre-commit, including a hook to check for trailing commas, a hook to enforce consistent line endings, and a hook to run black formatting on code files.\"",
    "\"Generate Python code that uses the `torrent` library to extract media information from a torrent-like filename.\"",
    "\"Generate Python code that implements a user-friendly HTTP client with support for SOCKS proxies, allowing users to send HTTP requests and interact with servers in a simple and intuitive way, using the python-http-client library and the pysocks library for SOCKS proxy support.\"",
    "\"Generate Python code that implements a Snowball stemming algorithm for information retrieval by importing the nltk library and using its snowball module to perform stemming on a given text, then returning the stemmed words in a list.\"",
    "\"Generate Python code that creates an interactive grid for sorting and filtering DataFrames in Jupyter Notebook using the ipywidgets library and the pandas library.\"",
    "\"Generate Python code that imports the necessary modules and creates classes to wrap the CoreMedia frameworks on macOS, providing a simpler interface for developers to interact with the system's media capabilities.\"",
    "\"Generate Python code that creates a command-line tool that allows users to create, manage, and delete pools for pikas.\"",
    "\"Generate Python code that creates a FUSE driver for interacting with Arvados, a distributed repository of genomic data, allowing users to mount the repository on their local file system and access its contents through standard file operations.\"",
    "\"Generate Python code that parses email messages and extracts relevant information using the Mailgun API, including message headers, sender and recipient information, and attachment data.\"",
    "\"Generate Python code that uses natural language processing and machine learning algorithms to analyze text data from various sources, such as news articles and social media posts, to identify and predict events and their potential impact on business operations, including supply chain disruptions, market demand fluctuations, and brand reputation.\"",
    "\"Generate Python code that uses the nltk library to tokenize Japanese sentences and words, splitting them into individual words or tokens, and optionally removes particles and punctuation.\"",
    "\"Generate Python code that imports the Vagrant API and creates a Vagrant client object to interact with virtual machines, including creating, modifying, and deleting virtual machines, as well as running shell commands within the virtual machine.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for the CoreAudio framework on macOS, allowing users to interact with the audio hardware and software using Python methods and syntax.\"",
    "\"Generate Python code that creates an interactive documentation page for your API using Sphinx, including navigation, code examples, and automatic generation of docstrings from your Python functions and classes.\"",
    "\"Generate Python code that creates a Discord bot that sends a message in a server's lobby channel whenever a new member joins the server, using the discord.py library.\"",
    "\"Generate Python code that imports django.middleware.CommonMiddleware and adds a custom middleware class that modifies the ALLOWED_HOSTS setting to allow CIDR IP ranges, then returns the modified list.\"",
    "\"Generate Python code that imports the necessary libraries and uses the ioctl function to interact with I2C and SPI devices, similar to how the smbus and spidev modules work.\"",
    "\"Generate Python code that uses the `vcs` module to retrieve the current version string from a version control system like Git or Mercurial, and then uses the `os` module to set the version string as an environment variable.\"",
    "\"Generate Python code that exports OpenTelemetry traces and metrics to Jaeger using the OpenTelemetry API and Protocol Buffers.\"",
    "\"Generate Python code that imports the necessary libraries and sets up a basic GUI window using PyQt or PySide, then uses the FontAwesome library to display various icons within the GUI.\"",
    "\"Generate Python code that imports the necessary modules, creates an AWS session, and uses the AWS CLI to perform various AWS tasks, such as creating an EC2 instance, an S3 bucket, and an IAM user, and configures access keys and security groups, using the LocalStack framework.\"",
    "\"Generate Python code that loads and parses the documentation of Python objects, similar to the `pydanny` package, using the `ast` module to parse source code and the `docscraper` library to extract documentation from docstrings.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for the IOSurface framework on macOS, providing a simple interface for creating and managing IOSurfaces.\"",
    "\"Generate Python code that imports the SnowflakeDB File Ingest SDK and uses it to load data from a local file into a Snowflake table.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for the MediaAccessibility framework on macOS, providing a simple and consistent interface for accessing and manipulating media accessibility features.\"",
    "\"Generate Python code that imports the datetime module and uses it to print the current date and time, along with other system information such as the operating system version, CPU architecture, and memory usage.\"",
    "\"Generate Python code that creates an API server using Flask and youtube_dl to download videos from YouTube and serve them to clients.\"",
    "\"Generate Python code that imports the necessary libraries and defines a class to interact with TI ZNP radios using Zigbee protocol, providing methods to send and receive data, and handle radio events.\"",
    "\"Generate Python code that imports the `pip` module and checks if the version is between 8 and the current version, and if so, runs the compatibility shim script for that version.\"",
    "\"Generate Python code that wraps the GameplayKit framework on macOS, providing a simple and easy-to-use interface for creating gameplay algorithms and utilizing the power of machine learning in games and interactive applications.\"",
    "\"Generate Python code that imports the necessary libraries and sets up an API client for interacting with CARTO's APIs, including authentication and configuration options.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for interacting with CloudKit on macOS, similar to the wrappers provided by the CloudKit framework.\"",
    "\"Generate Python code that imports the cybox module and creates a CybOX object from a JSON file, then parses the object into a dictionary.\"",
    "\"Generate Python code that parses and evaluates Zope Configuration Markup Language (ZCML) files, allowing for the definition and modification of configuration settings for Zope-based applications.\"",
    "\"Generate Python code that uses the `jupyter_notebook_themes` library to select and install a Jupyter notebook theme from a list of available themes.\"",
    "\"Generate Python code that imports the Sqreen agent library and initializes it with your application's API key, then uses the agent to monitor and protect your application from common security threats such as SQL injection and cross-site scripting attacks.\"",
    "\"Generate Python code that creates a Django admin list filter with dropdowns using the `django-smart-select` library, allowing users to select multiple items from a list of choices and view associated details for each item.\"",
    "\"Generate Python code that uses the pydirectories module to locate the debugger executables, the subprocess module to run the application and debugger simultaneously, and the time module to wait for the debugging process to complete.\"",
    "\"Generate Python code that imports the necessary modules and creates a dictionary for storing sudachi words, their meanings, and example sentences.\"",
    "\"Generate Python code that uses the python-instagram library to download pictures and videos along with their captions and other metadata from Instagram by iterating through the media items of a user or location and saving them to a file path specified by the user.\"",
    "\"Generate Python code that implements an ASGI channel layer using Redis as the backing store, providing a reliable and high-performance mechanism for communicating between ASGI applications.\"",
    "\"Generate Python code that processes RAW images using libraw, including image decoding, color conversion, and metadata extraction.\"",
    "\"Generate Python code that imports the necessary libraries and creates wrappers for the MediaLibrary framework on macOS, allowing for easy interaction with the framework's functions and data structures.\"",
    "\"Generate Python code that imports the required libraries, creates a Markdown file with the desired content, and saves it to a specified location using the `markdown` module and `os` module.\"",
    "\"Generate Python code that imports the necessary modules and creates a dictionary of Russian words with their morphological information, such as part of speech, gender, and declension, using the pymorphy2 library.\"",
    "\"Generate Python code that configures a password reset strategy for Django Rest Framework by creating a custom password reset view and linking it to a custom email template, while also implementing security measures such as rate limiting and CSRF protection.\"",
    "\"Generate Python code that imports the requests library and uses it to make HTTP requests to the Marketo REST API, authenticating using a provided access token, and parsing the JSON responses into usable data structures.\"",
    "\"Generate Python code that imports the required libraries, sets up a Django compressor filter, and uses libsass to compile SASS files.\"",
    "\"Generate Python code that sends push notifications to mobile devices through GCM, APNS, or WNS and to WebPush in Chrome, Firefox, and Opera using Django by importing the necessary libraries, configuring the notification services, and using Django's built-in HTTP client to send requests to the corresponding APIs.\"",
    "\"Generate Python code that sends an error notification to Airbrake, including the error message, traceback, and additional metadata, using the `airbrake-python` library and following the package description.\"",
    "\"Generate Python code that implements a read-write lock for asyncio, allowing multiple threads to read a shared resource simultaneously while preventing any thread from writing to it until all reading threads have finished.\"",
    "\"Generate Python code that uses the `pycodestyle` library to monitor code metrics, such as line length, tabs vs spaces, and trailing commas, on your Continuous Integration (CI) server.\"",
    "\"Generate Python code that uses the Sphinx renderer to create a custom 404 page with absolute URLs, like so:\\n```python\\nimport sphinx\\nfrom sphinx import template\\n\\napp = sphinx.App()\\n\\n# Define a custom 404 page template\\ntemplate_404 = '''\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n   <title>404 Not Found</title>\\n  </head>\\n  <body>\\n   <h1>404 Not Found</h1>\\n   <p>The requested URL was not found.</p>\\n   <p>You can try one of the following links:</p>\\n   {% for link in links %}\\n     <p><a href=\\\"{{ link }}\\\">{{ link }}</a></p>\\n   {% endfor %}\\n  </body>\\n</html>\\n'''\\n\\n# Define a list of links to display on the 404 page\\nlinks = ['https://example.com/', 'https://example.com/docs/']\\n\\n# Render the custom 404 page using the Sph\"",
    "\"Generate Python code that creates a ROS message generator that produces messages of a specified type, such as `std_msgs.msg.String` or `sensor_msgs.msg.PointCloud2`, using a given set of default values for the message fields.\"",
    "\"Generate Python code that creates a utility library for common tasks such as string formatting, file manipulation, and data structures.\"",
    "\"Generate Python code that implements a custom `functools` module that includes additional functionalities such as `partial`, `curry`, `compose`, and `pipe`.\"",
    "\"Generate Python code that imports the logging module and configures a logger to send log messages to Logentries using the Logentries Python SDK.\"",
    "\"Generate Python code that imports the MeCab library and provides a simple binding for its functionality, without using SWIG or a compiler, using the FFI module to interact with the C libraries.\"",
    "\"Generate Python code that imports the necessary libraries and creates a wrapper class for the GameController framework on macOS, allowing developers to use the framework's functionality in their Python applications.\"",
    "\"Generate Python code that imports the `time` module and creates a context manager `Timer` that measures the clock wall time of the code block it contains, using the `time.clock()` function to get the current CPU clock time at entry and exit, and stores the result in an instance variable for later retrieval.\"",
    "\"Generate Python code that imports the necessary libraries to interact with IBM Watson Services, such as `ibm-watson-sdk` and `requests`, and uses them to make API calls to the various Watson services, such as Natural Language Understanding, Visual Recognition, and Speech to Text, to perform tasks such as text analysis, image recognition, and speech transcription.\"",
    "\"Generate Python code that imports the ngrok library and creates a tunnel to a locally running web server, allowing it to be accessed from the internet.\"",
    "\"Generate Python code that implements a framework for Multi-Stakeholder Reasoning (MSR) by defining a set of rules and axioms for reasoning about conflicting beliefs, obligations, and permissions among multiple stakeholders in a distributed system.\"",
    "\"Generate Python code that implements a set of fast and efficient tools for functional programming, including higher-order functions, closures, and immutable data structures.\"",
    "\"Generate Python code that imports the necessary libraries and creates an object to interact with the Epidata API, similar to the interface provided by the Delphi programming language.\"",
    "\"Generate Python code that imports the necessary libraries and uses the `napari` library to read and write SVG files, allowing users to interact with the data and visualize it in 3D.\"",
    "\"Generate Python code that implements edX extensions of Django REST Framework by inheriting from DRF's renderer classes and adding custom rendering methods for embedding courseware content in an LMS, creating a dashboard for managing course enrollment and progress, and supporting mobile app compatibility.\"",
    "\"Generate Python code that uses the `requests` library to download the latest version of chromedriver from a specified URL, then extracts the archive and sets up the environment variable `webdriver.chrome.driver` to point to the extracted chromedriver executable.\"",
    "\"Generate Python code that imports and utilizes the `thermo` library, an open-source thermodynamic and transport properties database, to access and manipulate thermodynamic and transport property data for various substances.\"",
    "\"Generate Python code that uses the ONNX Runtime library to accelerate machine learning model inference on NVIDIA GPUs, leveraging the high-performance capabilities of the GPU to speed up computationally intensive workloads.\"",
    "\"Generate Python code that imports the Saml Python Toolkit library and uses it to add SAML support to your Python software, allowing for authentication and authorization through SAML protocol.\"",
    "\"Generate Python code that uses the colcon library to support ROS packages by creating a custom builder that implements the necessary functionality for building and installing ROS packages, and integrating it into the colcon workflow using the colcon API.\"",
    "\"Generate Python code that reads and writes SEG-Y files, a standard format for seismic data, using the `segpy` library, which provides an efficient and easy-to-use interface for working with SEG-Y files.\"",
    "\"Generate Python code that parses and analyzes Java source code, providing a range of tools for working with Java programs, including parsing, syntax analysis, code generation, and more.\"",
    "\"Generate Python code that implements a Test Anything Protocol (TAP) client, using the `tap` library, to run test cases and report their results in a TAP-compliant format.\"",
    "\"Generate Python code that imports pandas, reads SAS, SPSS, and Stata files using pandas.read_sas(), pandas.read_spss(), and pandas.read_stata(), converts data to pandas dataframes, performs operations on data, and writes data back to SAS, SPSS, and Stata files using pandas.to_sas(), pandas.to_spss(), and pandas.to_stata().\"",
    "\"Generate Python code that imports the necessary libraries and loads a pre-trained face recognition model using the FaceRecognition class from the face_recognition package, similar to how it is done in the provided example.\"",
    "\"Generate Python code that imports the SQLModel library and creates a simple database connection to a local SQLite file, demonstrating basic CRUD (create, read, update, delete) operations using SQL queries.\"",
    "\"Generate Python code that imports the unicodedata module and replaces any outdated versions of the Unicode data files with the latest updates from the official Unicode website.\""
]